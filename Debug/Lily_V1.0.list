
Lily_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006438  08006438  00007438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006458  08006458  000080c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006458  08006458  00007458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006460  08006460  000080c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006464  08006464  00007464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08006468  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200000c8  0800652c  000080c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800652c  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c8e  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023cf  00000000  00000000  00019d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0001d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e92  00000000  00000000  0001df6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138c4  00000000  00000000  00035dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009caac  00000000  00000000  000496c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e616c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  000e61b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c8 	.word	0x200000c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006420 	.word	0x08006420

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000cc 	.word	0x200000cc
 80001d4:	08006420 	.word	0x08006420

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ae8:	f000 b988 	b.w	8000dfc <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	468e      	mov	lr, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	4688      	mov	r8, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d14a      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4617      	mov	r7, r2
 8000b18:	d962      	bls.n	8000be0 <__udivmoddi4+0xdc>
 8000b1a:	fab2 f682 	clz	r6, r2
 8000b1e:	b14e      	cbz	r6, 8000b34 <__udivmoddi4+0x30>
 8000b20:	f1c6 0320 	rsb	r3, r6, #32
 8000b24:	fa01 f806 	lsl.w	r8, r1, r6
 8000b28:	fa20 f303 	lsr.w	r3, r0, r3
 8000b2c:	40b7      	lsls	r7, r6
 8000b2e:	ea43 0808 	orr.w	r8, r3, r8
 8000b32:	40b4      	lsls	r4, r6
 8000b34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b38:	fa1f fc87 	uxth.w	ip, r7
 8000b3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b40:	0c23      	lsrs	r3, r4, #16
 8000b42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d909      	bls.n	8000b66 <__udivmoddi4+0x62>
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b58:	f080 80ea 	bcs.w	8000d30 <__udivmoddi4+0x22c>
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	f240 80e7 	bls.w	8000d30 <__udivmoddi4+0x22c>
 8000b62:	3902      	subs	r1, #2
 8000b64:	443b      	add	r3, r7
 8000b66:	1a9a      	subs	r2, r3, r2
 8000b68:	b2a3      	uxth	r3, r4
 8000b6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b7a:	459c      	cmp	ip, r3
 8000b7c:	d909      	bls.n	8000b92 <__udivmoddi4+0x8e>
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b84:	f080 80d6 	bcs.w	8000d34 <__udivmoddi4+0x230>
 8000b88:	459c      	cmp	ip, r3
 8000b8a:	f240 80d3 	bls.w	8000d34 <__udivmoddi4+0x230>
 8000b8e:	443b      	add	r3, r7
 8000b90:	3802      	subs	r0, #2
 8000b92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b96:	eba3 030c 	sub.w	r3, r3, ip
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	b11d      	cbz	r5, 8000ba6 <__udivmoddi4+0xa2>
 8000b9e:	40f3      	lsrs	r3, r6
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d905      	bls.n	8000bba <__udivmoddi4+0xb6>
 8000bae:	b10d      	cbz	r5, 8000bb4 <__udivmoddi4+0xb0>
 8000bb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	e7f5      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000bba:	fab3 f183 	clz	r1, r3
 8000bbe:	2900      	cmp	r1, #0
 8000bc0:	d146      	bne.n	8000c50 <__udivmoddi4+0x14c>
 8000bc2:	4573      	cmp	r3, lr
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xc8>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 8105 	bhi.w	8000dd6 <__udivmoddi4+0x2d2>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4690      	mov	r8, r2
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0e5      	beq.n	8000ba6 <__udivmoddi4+0xa2>
 8000bda:	e9c5 4800 	strd	r4, r8, [r5]
 8000bde:	e7e2      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f000 8090 	beq.w	8000d06 <__udivmoddi4+0x202>
 8000be6:	fab2 f682 	clz	r6, r2
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f040 80a4 	bne.w	8000d38 <__udivmoddi4+0x234>
 8000bf0:	1a8a      	subs	r2, r1, r2
 8000bf2:	0c03      	lsrs	r3, r0, #16
 8000bf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf8:	b280      	uxth	r0, r0
 8000bfa:	b2bc      	uxth	r4, r7
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c02:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <__udivmoddi4+0x11e>
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x11c>
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	f200 80e0 	bhi.w	8000de0 <__udivmoddi4+0x2dc>
 8000c20:	46c4      	mov	ip, r8
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c28:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c30:	fb02 f404 	mul.w	r4, r2, r4
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x144>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x142>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f200 80ca 	bhi.w	8000dda <__udivmoddi4+0x2d6>
 8000c46:	4602      	mov	r2, r0
 8000c48:	1b1b      	subs	r3, r3, r4
 8000c4a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c4e:	e7a5      	b.n	8000b9c <__udivmoddi4+0x98>
 8000c50:	f1c1 0620 	rsb	r6, r1, #32
 8000c54:	408b      	lsls	r3, r1
 8000c56:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5a:	431f      	orrs	r7, r3
 8000c5c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c60:	fa20 f306 	lsr.w	r3, r0, r6
 8000c64:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c68:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c6c:	4323      	orrs	r3, r4
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	fa1f fc87 	uxth.w	ip, r7
 8000c76:	fbbe f0f9 	udiv	r0, lr, r9
 8000c7a:	0c1c      	lsrs	r4, r3, #16
 8000c7c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c84:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x1a0>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c96:	f080 809c 	bcs.w	8000dd2 <__udivmoddi4+0x2ce>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8099 	bls.w	8000dd2 <__udivmoddi4+0x2ce>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	eba4 040e 	sub.w	r4, r4, lr
 8000ca8:	fa1f fe83 	uxth.w	lr, r3
 8000cac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cb8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cbc:	45a4      	cmp	ip, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x1ce>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cc6:	f080 8082 	bcs.w	8000dce <__udivmoddi4+0x2ca>
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d97f      	bls.n	8000dce <__udivmoddi4+0x2ca>
 8000cce:	3b02      	subs	r3, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cde:	4564      	cmp	r4, ip
 8000ce0:	4673      	mov	r3, lr
 8000ce2:	46e1      	mov	r9, ip
 8000ce4:	d362      	bcc.n	8000dac <__udivmoddi4+0x2a8>
 8000ce6:	d05f      	beq.n	8000da8 <__udivmoddi4+0x2a4>
 8000ce8:	b15d      	cbz	r5, 8000d02 <__udivmoddi4+0x1fe>
 8000cea:	ebb8 0203 	subs.w	r2, r8, r3
 8000cee:	eb64 0409 	sbc.w	r4, r4, r9
 8000cf2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cfa:	431e      	orrs	r6, r3
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000d02:	2100      	movs	r1, #0
 8000d04:	e74f      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000d06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d0a:	0c01      	lsrs	r1, r0, #16
 8000d0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d10:	b280      	uxth	r0, r0
 8000d12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d16:	463b      	mov	r3, r7
 8000d18:	4638      	mov	r0, r7
 8000d1a:	463c      	mov	r4, r7
 8000d1c:	46b8      	mov	r8, r7
 8000d1e:	46be      	mov	lr, r7
 8000d20:	2620      	movs	r6, #32
 8000d22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d26:	eba2 0208 	sub.w	r2, r2, r8
 8000d2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d2e:	e766      	b.n	8000bfe <__udivmoddi4+0xfa>
 8000d30:	4601      	mov	r1, r0
 8000d32:	e718      	b.n	8000b66 <__udivmoddi4+0x62>
 8000d34:	4610      	mov	r0, r2
 8000d36:	e72c      	b.n	8000b92 <__udivmoddi4+0x8e>
 8000d38:	f1c6 0220 	rsb	r2, r6, #32
 8000d3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	40b1      	lsls	r1, r6
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d52:	b2bc      	uxth	r4, r7
 8000d54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d58:	0c11      	lsrs	r1, r2, #16
 8000d5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5e:	fb08 f904 	mul.w	r9, r8, r4
 8000d62:	40b0      	lsls	r0, r6
 8000d64:	4589      	cmp	r9, r1
 8000d66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d6a:	b280      	uxth	r0, r0
 8000d6c:	d93e      	bls.n	8000dec <__udivmoddi4+0x2e8>
 8000d6e:	1879      	adds	r1, r7, r1
 8000d70:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d74:	d201      	bcs.n	8000d7a <__udivmoddi4+0x276>
 8000d76:	4589      	cmp	r9, r1
 8000d78:	d81f      	bhi.n	8000dba <__udivmoddi4+0x2b6>
 8000d7a:	eba1 0109 	sub.w	r1, r1, r9
 8000d7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d82:	fb09 f804 	mul.w	r8, r9, r4
 8000d86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d90:	4542      	cmp	r2, r8
 8000d92:	d229      	bcs.n	8000de8 <__udivmoddi4+0x2e4>
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d9a:	d2c4      	bcs.n	8000d26 <__udivmoddi4+0x222>
 8000d9c:	4542      	cmp	r2, r8
 8000d9e:	d2c2      	bcs.n	8000d26 <__udivmoddi4+0x222>
 8000da0:	f1a9 0102 	sub.w	r1, r9, #2
 8000da4:	443a      	add	r2, r7
 8000da6:	e7be      	b.n	8000d26 <__udivmoddi4+0x222>
 8000da8:	45f0      	cmp	r8, lr
 8000daa:	d29d      	bcs.n	8000ce8 <__udivmoddi4+0x1e4>
 8000dac:	ebbe 0302 	subs.w	r3, lr, r2
 8000db0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000db4:	3801      	subs	r0, #1
 8000db6:	46e1      	mov	r9, ip
 8000db8:	e796      	b.n	8000ce8 <__udivmoddi4+0x1e4>
 8000dba:	eba7 0909 	sub.w	r9, r7, r9
 8000dbe:	4449      	add	r1, r9
 8000dc0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dc4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc8:	fb09 f804 	mul.w	r8, r9, r4
 8000dcc:	e7db      	b.n	8000d86 <__udivmoddi4+0x282>
 8000dce:	4673      	mov	r3, lr
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1ce>
 8000dd2:	4650      	mov	r0, sl
 8000dd4:	e766      	b.n	8000ca4 <__udivmoddi4+0x1a0>
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e6fd      	b.n	8000bd6 <__udivmoddi4+0xd2>
 8000dda:	443b      	add	r3, r7
 8000ddc:	3a02      	subs	r2, #2
 8000dde:	e733      	b.n	8000c48 <__udivmoddi4+0x144>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	e71c      	b.n	8000c22 <__udivmoddi4+0x11e>
 8000de8:	4649      	mov	r1, r9
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x222>
 8000dec:	eba1 0109 	sub.w	r1, r1, r9
 8000df0:	46c4      	mov	ip, r8
 8000df2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df6:	fb09 f804 	mul.w	r8, r9, r4
 8000dfa:	e7c4      	b.n	8000d86 <__udivmoddi4+0x282>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <delay_us>:
void setMotorSpeed(uint8_t motor, int32_t speed);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t us){
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <delay_us+0x30>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us);
 8000e10:	bf00      	nop
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <delay_us+0x30>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d8f7      	bhi.n	8000e12 <delay_us+0x12>
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000228 	.word	0x20000228

08000e34 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <HAL_ADC_ConvCpltCallback+0x18>
		ADC_DONE = 1;
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_ADC_ConvCpltCallback+0x28>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
	}

}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	2000031c 	.word	0x2000031c

08000e60 <ReadSensors>:
void ReadSensors(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
	for(SensorIndex=0;SensorIndex<9;SensorIndex++){
 8000e66:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <ReadSensors+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e057      	b.n	8000f1e <ReadSensors+0xbe>
		ADC_ChannelConfTypeDef ADC_Config;
		ADC_Config.Channel=SensorAdcChannel[SensorIndex];
 8000e6e:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <ReadSensors+0xd0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a30      	ldr	r2, [pc, #192]	@ (8000f34 <ReadSensors+0xd4>)
 8000e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e78:	603b      	str	r3, [r7, #0]
		ADC_Config.Rank=1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
		ADC_Config.SamplingTime=ADC_SAMPLETIME_480CYCLES;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc1, &ADC_Config);
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	482c      	ldr	r0, [pc, #176]	@ (8000f38 <ReadSensors+0xd8>)
 8000e88:	f001 fb7e 	bl	8002588 <HAL_ADC_ConfigChannel>
		HAL_GPIO_WritePin(IR_LED_PORTS[SensorIndex], IR_LED_PINS[SensorIndex], SET);
 8000e8c:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <ReadSensors+0xd0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a2a      	ldr	r2, [pc, #168]	@ (8000f3c <ReadSensors+0xdc>)
 8000e92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <ReadSensors+0xd0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a29      	ldr	r2, [pc, #164]	@ (8000f40 <ReadSensors+0xe0>)
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f002 fe5b 	bl	8003b60 <HAL_GPIO_WritePin>
		delay_us(50);
 8000eaa:	2032      	movs	r0, #50	@ 0x32
 8000eac:	f7ff ffa8 	bl	8000e00 <delay_us>
		HAL_ADC_Stop_DMA(&hadc1);
 8000eb0:	4821      	ldr	r0, [pc, #132]	@ (8000f38 <ReadSensors+0xd8>)
 8000eb2:	f001 faf1 	bl	8002498 <HAL_ADC_Stop_DMA>
		ADC_DONE=0;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <ReadSensors+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_buf, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4922      	ldr	r1, [pc, #136]	@ (8000f48 <ReadSensors+0xe8>)
 8000ec0:	481d      	ldr	r0, [pc, #116]	@ (8000f38 <ReadSensors+0xd8>)
 8000ec2:	f001 f9f5 	bl	80022b0 <HAL_ADC_Start_DMA>
		while(ADC_DONE==0);
 8000ec6:	bf00      	nop
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <ReadSensors+0xe4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0fb      	beq.n	8000ec8 <ReadSensors+0x68>
		SensorValues[SensorIndex]=adc_buf;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <ReadSensors+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <ReadSensors+0xe8>)
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	491c      	ldr	r1, [pc, #112]	@ (8000f4c <ReadSensors+0xec>)
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR)){__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_OVR);}
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <ReadSensors+0xd8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0320 	and.w	r3, r3, #32
 8000ee8:	2b20      	cmp	r3, #32
 8000eea:	d104      	bne.n	8000ef6 <ReadSensors+0x96>
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <ReadSensors+0xd8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f06f 0220 	mvn.w	r2, #32
 8000ef4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(IR_LED_PORTS[SensorIndex], IR_LED_PINS[SensorIndex], RESET);
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <ReadSensors+0xd0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a10      	ldr	r2, [pc, #64]	@ (8000f3c <ReadSensors+0xdc>)
 8000efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f00:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <ReadSensors+0xd0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <ReadSensors+0xe0>)
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f002 fe26 	bl	8003b60 <HAL_GPIO_WritePin>
	for(SensorIndex=0;SensorIndex<9;SensorIndex++){
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <ReadSensors+0xd0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <ReadSensors+0xd0>)
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <ReadSensors+0xd0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	dda3      	ble.n	8000e6e <ReadSensors+0xe>

	}
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000318 	.word	0x20000318
 8000f34:	20000048 	.word	0x20000048
 8000f38:	200000e4 	.word	0x200000e4
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000024 	.word	0x20000024
 8000f44:	2000031c 	.word	0x2000031c
 8000f48:	20000320 	.word	0x20000320
 8000f4c:	20000324 	.word	0x20000324

08000f50 <line_data>:
int line_data(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
	int sum = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
	double weighted_sum = 0;
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int onLine = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
	for(int i=0;i<9;i++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	e01f      	b.n	8000fb0 <line_data+0x60>
		if(SensorValues[i]< thresh){
 8000f70:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <line_data+0x98>)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	22c3      	movs	r2, #195	@ 0xc3
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d215      	bcs.n	8000faa <line_data+0x5a>
			weighted_sum += weights[i];
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <line_data+0x9c>)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa78 	bl	800047c <__aeabi_i2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f94:	f7ff f926 	bl	80001e4 <__adddf3>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			sum += 1;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
            onLine = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
	for(int i=0;i<9;i++){
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	dddc      	ble.n	8000f70 <line_data+0x20>
		}
	}
	 if (!onLine) {
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <line_data+0x70>
		 return 255;  // Line lost condition
 8000fbc:	23ff      	movs	r3, #255	@ 0xff
 8000fbe:	e00f      	b.n	8000fe0 <line_data+0x90>
	 }

	 return (int)(weighted_sum/sum);
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff fa5b 	bl	800047c <__aeabi_i2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fce:	f7ff fbe9 	bl	80007a4 <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fd53 	bl	8000a84 <__aeabi_d2iz>
 8000fde:	4603      	mov	r3, r0

}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000324 	.word	0x20000324
 8000fec:	2000006c 	.word	0x2000006c

08000ff0 <computePID>:
void computePID(int32_t input) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	P = Kp * error;
 8000ff8:	4b72      	ldr	r3, [pc, #456]	@ (80011c4 <computePID+0x1d4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa3d 	bl	800047c <__aeabi_i2d>
 8001002:	4b71      	ldr	r3, [pc, #452]	@ (80011c8 <computePID+0x1d8>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff faa2 	bl	8000550 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	496e      	ldr	r1, [pc, #440]	@ (80011cc <computePID+0x1dc>)
 8001012:	e9c1 2300 	strd	r2, r3, [r1]
	I += Ki * error * (HAL_GetTick()-LastPIDTime);
 8001016:	4b6b      	ldr	r3, [pc, #428]	@ (80011c4 <computePID+0x1d4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa2e 	bl	800047c <__aeabi_i2d>
 8001020:	4b6b      	ldr	r3, [pc, #428]	@ (80011d0 <computePID+0x1e0>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fa93 	bl	8000550 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4614      	mov	r4, r2
 8001030:	461d      	mov	r5, r3
 8001032:	f000 ffdd 	bl	8001ff0 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	4b66      	ldr	r3, [pc, #408]	@ (80011d4 <computePID+0x1e4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa0c 	bl	800045c <__aeabi_ui2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff fa80 	bl	8000550 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	4b5f      	ldr	r3, [pc, #380]	@ (80011d8 <computePID+0x1e8>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff f8c1 	bl	80001e4 <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	495c      	ldr	r1, [pc, #368]	@ (80011d8 <computePID+0x1e8>)
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
	if (I > integralMax) I = integralMax;
 800106c:	4b5a      	ldr	r3, [pc, #360]	@ (80011d8 <computePID+0x1e8>)
 800106e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001072:	4b5a      	ldr	r3, [pc, #360]	@ (80011dc <computePID+0x1ec>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fcfa 	bl	8000a70 <__aeabi_dcmpgt>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <computePID+0x9e>
 8001082:	4b56      	ldr	r3, [pc, #344]	@ (80011dc <computePID+0x1ec>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4953      	ldr	r1, [pc, #332]	@ (80011d8 <computePID+0x1e8>)
 800108a:	e9c1 2300 	strd	r2, r3, [r1]
	if (I < integralMin) I = integralMin;
 800108e:	4b52      	ldr	r3, [pc, #328]	@ (80011d8 <computePID+0x1e8>)
 8001090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001094:	4b52      	ldr	r3, [pc, #328]	@ (80011e0 <computePID+0x1f0>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fccb 	bl	8000a34 <__aeabi_dcmplt>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <computePID+0xc0>
 80010a4:	4b4e      	ldr	r3, [pc, #312]	@ (80011e0 <computePID+0x1f0>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	494b      	ldr	r1, [pc, #300]	@ (80011d8 <computePID+0x1e8>)
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
	D = Kd * (input - lastInput) / (HAL_GetTick()-LastPIDTime);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff f9e3 	bl	800047c <__aeabi_i2d>
 80010b6:	4b4b      	ldr	r3, [pc, #300]	@ (80011e4 <computePID+0x1f4>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f890 	bl	80001e0 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	4b47      	ldr	r3, [pc, #284]	@ (80011e8 <computePID+0x1f8>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fa3f 	bl	8000550 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4614      	mov	r4, r2
 80010d8:	461d      	mov	r5, r3
 80010da:	f000 ff89 	bl	8001ff0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <computePID+0x1e4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9b8 	bl	800045c <__aeabi_ui2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff fb56 	bl	80007a4 <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	493b      	ldr	r1, [pc, #236]	@ (80011ec <computePID+0x1fc>)
 80010fe:	e9c1 2300 	strd	r2, r3, [r1]

	correction = P + I + D;
 8001102:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <computePID+0x1dc>)
 8001104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001108:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <computePID+0x1e8>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff f869 	bl	80001e4 <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <computePID+0x1fc>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff f860 	bl	80001e4 <__adddf3>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4931      	ldr	r1, [pc, #196]	@ (80011f0 <computePID+0x200>)
 800112a:	e9c1 2300 	strd	r2, r3, [r1]
	lastInput = input;
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f9a4 	bl	800047c <__aeabi_i2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	492a      	ldr	r1, [pc, #168]	@ (80011e4 <computePID+0x1f4>)
 800113a:	e9c1 2300 	strd	r2, r3, [r1]
	LastPIDTime = HAL_GetTick();
 800113e:	f000 ff57 	bl	8001ff0 <HAL_GetTick>
 8001142:	4603      	mov	r3, r0
 8001144:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <computePID+0x1e4>)
 8001146:	6013      	str	r3, [r2, #0]
	correction = floor(correction);
 8001148:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <computePID+0x200>)
 800114a:	ed93 7b00 	vldr	d7, [r3]
 800114e:	eeb0 0a47 	vmov.f32	s0, s14
 8001152:	eef0 0a67 	vmov.f32	s1, s15
 8001156:	f005 f8e7 	bl	8006328 <floor>
 800115a:	eeb0 7a40 	vmov.f32	s14, s0
 800115e:	eef0 7a60 	vmov.f32	s15, s1
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <computePID+0x200>)
 8001164:	ed83 7b00 	vstr	d7, [r3]
	setMotorSpeed(0, base_speed - correction);
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <computePID+0x204>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f985 	bl	800047c <__aeabi_i2d>
 8001172:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <computePID+0x200>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff f832 	bl	80001e0 <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fc7e 	bl	8000a84 <__aeabi_d2iz>
 8001188:	4603      	mov	r3, r0
 800118a:	4619      	mov	r1, r3
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f833 	bl	80011f8 <setMotorSpeed>
	setMotorSpeed(1, base_speed + correction);
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <computePID+0x204>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f970 	bl	800047c <__aeabi_i2d>
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <computePID+0x200>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f81f 	bl	80001e4 <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc69 	bl	8000a84 <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4619      	mov	r1, r3
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f81e 	bl	80011f8 <setMotorSpeed>

}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}
 80011c4:	20000364 	.word	0x20000364
 80011c8:	20000090 	.word	0x20000090
 80011cc:	20000368 	.word	0x20000368
 80011d0:	20000358 	.word	0x20000358
 80011d4:	20000350 	.word	0x20000350
 80011d8:	20000370 	.word	0x20000370
 80011dc:	200000b0 	.word	0x200000b0
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	20000388 	.word	0x20000388
 80011e8:	20000098 	.word	0x20000098
 80011ec:	20000378 	.word	0x20000378
 80011f0:	20000380 	.word	0x20000380
 80011f4:	200000a0 	.word	0x200000a0

080011f8 <setMotorSpeed>:
void setMotorSpeed(uint8_t motor, int32_t speed)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
	// tim1 ch1- left front, ch2- left back, ch3-right front, ch4- right back
    uint16_t pwm = abs(speed);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bfb8      	it	lt
 800120a:	425b      	neglt	r3, r3
 800120c:	81fb      	strh	r3, [r7, #14]
    if (pwm > 200) pwm = 200;  // Limit max speed
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	2bc8      	cmp	r3, #200	@ 0xc8
 8001212:	d901      	bls.n	8001218 <setMotorSpeed+0x20>
 8001214:	23c8      	movs	r3, #200	@ 0xc8
 8001216:	81fb      	strh	r3, [r7, #14]

    if (motor == 0) {  // Left motor
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d110      	bne.n	8001240 <setMotorSpeed+0x48>
        if (speed < 0) {
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da06      	bge.n	8001232 <setMotorSpeed+0x3a>
            TIM1->CCR3 = pwm;
 8001224:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <setMotorSpeed+0x7c>)
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	63d3      	str	r3, [r2, #60]	@ 0x3c
            TIM1->CCR4 = 0;
 800122a:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <setMotorSpeed+0x7c>)
 800122c:	2200      	movs	r2, #0
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
        } else {
            TIM1->CCR2 = 0;
            TIM1->CCR1 = pwm;
        }
    }
}
 8001230:	e019      	b.n	8001266 <setMotorSpeed+0x6e>
            TIM1->CCR3 = 0;
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <setMotorSpeed+0x7c>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c
            TIM1->CCR4 = pwm;
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <setMotorSpeed+0x7c>)
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800123e:	e012      	b.n	8001266 <setMotorSpeed+0x6e>
    else if (motor == 1) {  // Right motor
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10f      	bne.n	8001266 <setMotorSpeed+0x6e>
        if (speed < 0) {
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da06      	bge.n	800125a <setMotorSpeed+0x62>
            TIM1->CCR2 = pwm;
 800124c:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <setMotorSpeed+0x7c>)
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	6393      	str	r3, [r2, #56]	@ 0x38
            TIM1->CCR1 = 0;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <setMotorSpeed+0x7c>)
 8001254:	2200      	movs	r2, #0
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001258:	e005      	b.n	8001266 <setMotorSpeed+0x6e>
            TIM1->CCR2 = 0;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <setMotorSpeed+0x7c>)
 800125c:	2200      	movs	r2, #0
 800125e:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCR1 = pwm;
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <setMotorSpeed+0x7c>)
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40010000 	.word	0x40010000

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 fe51 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f8c3 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f000 fb31 	bl	80018ec <MX_GPIO_Init>
  MX_DMA_Init();
 800128a:	f000 fb07 	bl	800189c <MX_DMA_Init>
  MX_ADC1_Init();
 800128e:	f000 f925 	bl	80014dc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001292:	f000 f9c9 	bl	8001628 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001296:	f000 fa8b 	bl	80017b0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800129a:	f000 f997 	bl	80015cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800129e:	f000 fad3 	bl	8001848 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80012a2:	4850      	ldr	r0, [pc, #320]	@ (80013e4 <main+0x16c>)
 80012a4:	f003 fa62 	bl	800476c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ae:	484e      	ldr	r0, [pc, #312]	@ (80013e8 <main+0x170>)
 80012b0:	f002 fc56 	bl	8003b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2102      	movs	r1, #2
 80012b8:	484b      	ldr	r0, [pc, #300]	@ (80013e8 <main+0x170>)
 80012ba:	f002 fc51 	bl	8003b60 <HAL_GPIO_WritePin>

  // Start PWM for motors
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012be:	2100      	movs	r1, #0
 80012c0:	484a      	ldr	r0, [pc, #296]	@ (80013ec <main+0x174>)
 80012c2:	f003 fb07 	bl	80048d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	4848      	ldr	r0, [pc, #288]	@ (80013ec <main+0x174>)
 80012ca:	f003 fb03 	bl	80048d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012ce:	2108      	movs	r1, #8
 80012d0:	4846      	ldr	r0, [pc, #280]	@ (80013ec <main+0x174>)
 80012d2:	f003 faff 	bl	80048d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012d6:	210c      	movs	r1, #12
 80012d8:	4844      	ldr	r0, [pc, #272]	@ (80013ec <main+0x174>)
 80012da:	f003 fafb 	bl	80048d4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t start_time = HAL_GetTick();
 80012de:	f000 fe87 	bl	8001ff0 <HAL_GetTick>
 80012e2:	6078      	str	r0, [r7, #4]
	  ReadSensors();
 80012e4:	f7ff fdbc 	bl	8000e60 <ReadSensors>
	  sensors_time = HAL_GetTick()-start_time;
 80012e8:	f000 fe82 	bl	8001ff0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4a3f      	ldr	r2, [pc, #252]	@ (80013f0 <main+0x178>)
 80012f4:	6013      	str	r3, [r2, #0]

	  position=line_data();
 80012f6:	f7ff fe2b 	bl	8000f50 <line_data>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a3d      	ldr	r2, [pc, #244]	@ (80013f4 <main+0x17c>)
 80012fe:	6013      	str	r3, [r2, #0]
	  if(position>20 && position!=255){turn=1;
 8001300:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <main+0x17c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b14      	cmp	r3, #20
 8001306:	dd07      	ble.n	8001318 <main+0xa0>
 8001308:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <main+0x17c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2bff      	cmp	r3, #255	@ 0xff
 800130e:	d003      	beq.n	8001318 <main+0xa0>
 8001310:	4b39      	ldr	r3, [pc, #228]	@ (80013f8 <main+0x180>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e008      	b.n	800132a <main+0xb2>
	  }else if(position<-20){turn=-1;}
 8001318:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <main+0x17c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f113 0f14 	cmn.w	r3, #20
 8001320:	da34      	bge.n	800138c <main+0x114>
 8001322:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <main+0x180>)
 8001324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001328:	601a      	str	r2, [r3, #0]

	  while (position ==255){
 800132a:	e02f      	b.n	800138c <main+0x114>
		  LastPIDTime=HAL_GetTick();
 800132c:	f000 fe60 	bl	8001ff0 <HAL_GetTick>
 8001330:	4603      	mov	r3, r0
 8001332:	4a32      	ldr	r2, [pc, #200]	@ (80013fc <main+0x184>)
 8001334:	6013      	str	r3, [r2, #0]
		  ReadSensors();
 8001336:	f7ff fd93 	bl	8000e60 <ReadSensors>
		  position=line_data();
 800133a:	f7ff fe09 	bl	8000f50 <line_data>
 800133e:	4603      	mov	r3, r0
 8001340:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <main+0x17c>)
 8001342:	6013      	str	r3, [r2, #0]
		  if (turn == 1) { // We were heading into a right turn
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <main+0x180>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10d      	bne.n	8001368 <main+0xf0>
			  setMotorSpeed(0, turn_speed);
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <main+0x188>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ff50 	bl	80011f8 <setMotorSpeed>
			  setMotorSpeed(1, -turn_speed);
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <main+0x188>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	425b      	negs	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff ff49 	bl	80011f8 <setMotorSpeed>
 8001366:	e011      	b.n	800138c <main+0x114>
		  } else if (turn == -1) { // We were heading into a left turn
 8001368:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <main+0x180>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001370:	d10c      	bne.n	800138c <main+0x114>
			  setMotorSpeed(0, -turn_speed);
 8001372:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <main+0x188>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	425b      	negs	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff3c 	bl	80011f8 <setMotorSpeed>
			  setMotorSpeed(1, turn_speed);
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <main+0x188>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ff36 	bl	80011f8 <setMotorSpeed>
	  while (position ==255){
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <main+0x17c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2bff      	cmp	r3, #255	@ 0xff
 8001392:	d0cb      	beq.n	800132c <main+0xb4>
		  }
	  }
	  if(position>20 && position!=255){turn=1;
 8001394:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <main+0x17c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b14      	cmp	r3, #20
 800139a:	dd07      	ble.n	80013ac <main+0x134>
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <main+0x17c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2bff      	cmp	r3, #255	@ 0xff
 80013a2:	d003      	beq.n	80013ac <main+0x134>
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <main+0x180>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e008      	b.n	80013be <main+0x146>
	  }else if(position<-20){turn=-1;}
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <main+0x17c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f113 0f14 	cmn.w	r3, #20
 80013b4:	da03      	bge.n	80013be <main+0x146>
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <main+0x180>)
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013bc:	601a      	str	r2, [r3, #0]

	  error = -(position);
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <main+0x17c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	425b      	negs	r3, r3
 80013c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <main+0x18c>)
 80013c6:	6013      	str	r3, [r2, #0]
	  computePID(position);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <main+0x17c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe0f 	bl	8000ff0 <computePID>
	  run_time=HAL_GetTick()-start_time;
 80013d2:	f000 fe0d 	bl	8001ff0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <main+0x190>)
 80013de:	6013      	str	r3, [r2, #0]
  {
 80013e0:	e77d      	b.n	80012de <main+0x66>
 80013e2:	bf00      	nop
 80013e4:	20000228 	.word	0x20000228
 80013e8:	40020400 	.word	0x40020400
 80013ec:	200001e0 	.word	0x200001e0
 80013f0:	20000348 	.word	0x20000348
 80013f4:	20000360 	.word	0x20000360
 80013f8:	200000a4 	.word	0x200000a4
 80013fc:	20000350 	.word	0x20000350
 8001400:	200000a1 	.word	0x200000a1
 8001404:	20000364 	.word	0x20000364
 8001408:	2000034c 	.word	0x2000034c

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	@ 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f004 ff58 	bl	80062d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <SystemClock_Config+0xc8>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a26      	ldr	r2, [pc, #152]	@ (80014d4 <SystemClock_Config+0xc8>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <SystemClock_Config+0xc8>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <SystemClock_Config+0xcc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001476:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800147c:	2319      	movs	r3, #25
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001480:	23c0      	movs	r3, #192	@ 0xc0
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001488:	2304      	movs	r3, #4
 800148a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fcc3 	bl	8003e1c <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800149c:	f000 faac 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2103      	movs	r1, #3
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 ff25 	bl	800430c <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014c8:	f000 fa96 	bl	80019f8 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	@ 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2220      	movs	r2, #32
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 feea 	bl	80062d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014fc:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <MX_ADC1_Init+0xe0>)
 80014fe:	4a30      	ldr	r2, [pc, #192]	@ (80015c0 <MX_ADC1_Init+0xe4>)
 8001500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001502:	4b2e      	ldr	r3, [pc, #184]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001504:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800150a:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <MX_ADC1_Init+0xe0>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001516:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001518:	2200      	movs	r2, #0
 800151a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <MX_ADC1_Init+0xe0>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001524:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001526:	2200      	movs	r2, #0
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152a:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <MX_ADC1_Init+0xe0>)
 800152c:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <MX_ADC1_Init+0xe8>)
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001538:	2201      	movs	r2, #1
 800153a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_ADC1_Init+0xe0>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_ADC1_Init+0xe0>)
 8001546:	2201      	movs	r2, #1
 8001548:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800154a:	481c      	ldr	r0, [pc, #112]	@ (80015bc <MX_ADC1_Init+0xe0>)
 800154c:	f000 fd5c 	bl	8002008 <HAL_ADC_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001556:	f000 fa4f 	bl	80019f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001562:	2307      	movs	r3, #7
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	4619      	mov	r1, r3
 800156c:	4813      	ldr	r0, [pc, #76]	@ (80015bc <MX_ADC1_Init+0xe0>)
 800156e:	f001 f80b 	bl	8002588 <HAL_ADC_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001578:	f000 fa3e 	bl	80019f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001580:	2301      	movs	r3, #1
 8001582:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001592:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_ADC1_Init+0xe0>)
 80015a6:	f001 faa9 	bl	8002afc <HAL_ADCEx_InjectedConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80015b0:	f000 fa22 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000e4 	.word	0x200000e4
 80015c0:	40012000 	.word	0x40012000
 80015c4:	0f000001 	.word	0x0f000001
 80015c8:	000f0001 	.word	0x000f0001

080015cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_I2C1_Init+0x50>)
 80015d2:	4a13      	ldr	r2, [pc, #76]	@ (8001620 <MX_I2C1_Init+0x54>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_I2C1_Init+0x50>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <MX_I2C1_Init+0x58>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_I2C1_Init+0x50>)
 80015ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_I2C1_Init+0x50>)
 800160a:	f002 fac3 	bl	8003b94 <HAL_I2C_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001614:	f000 f9f0 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000018c 	.word	0x2000018c
 8001620:	40005400 	.word	0x40005400
 8001624:	000186a0 	.word	0x000186a0

08001628 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b096      	sub	sp, #88	@ 0x58
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2220      	movs	r2, #32
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fe35 	bl	80062d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001666:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001668:	4a50      	ldr	r2, [pc, #320]	@ (80017ac <MX_TIM1_Init+0x184>)
 800166a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 960-1;
 800166c:	4b4e      	ldr	r3, [pc, #312]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800166e:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 800167a:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800167c:	22c7      	movs	r2, #199	@ 0xc7
 800167e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001686:	4b48      	ldr	r3, [pc, #288]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001692:	4845      	ldr	r0, [pc, #276]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001694:	f003 f81a 	bl	80046cc <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800169e:	f000 f9ab 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016ac:	4619      	mov	r1, r3
 80016ae:	483e      	ldr	r0, [pc, #248]	@ (80017a8 <MX_TIM1_Init+0x180>)
 80016b0:	f003 fa82 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016ba:	f000 f99d 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016be:	483a      	ldr	r0, [pc, #232]	@ (80017a8 <MX_TIM1_Init+0x180>)
 80016c0:	f003 f8ae 	bl	8004820 <HAL_TIM_PWM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016ca:	f000 f995 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016da:	4619      	mov	r1, r3
 80016dc:	4832      	ldr	r0, [pc, #200]	@ (80017a8 <MX_TIM1_Init+0x180>)
 80016de:	f003 fe05 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016e8:	f000 f986 	bl	80019f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	@ 0x60
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4825      	ldr	r0, [pc, #148]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001712:	f003 f98f 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800171c:	f000 f96c 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001724:	2204      	movs	r2, #4
 8001726:	4619      	mov	r1, r3
 8001728:	481f      	ldr	r0, [pc, #124]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800172a:	f003 f983 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001734:	f000 f960 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	2208      	movs	r2, #8
 800173e:	4619      	mov	r1, r3
 8001740:	4819      	ldr	r0, [pc, #100]	@ (80017a8 <MX_TIM1_Init+0x180>)
 8001742:	f003 f977 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800174c:	f000 f954 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001754:	220c      	movs	r2, #12
 8001756:	4619      	mov	r1, r3
 8001758:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800175a:	f003 f96b 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001764:	f000 f948 	bl	80019f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800177c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001780:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800178c:	f003 fe1c 	bl	80053c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001796:	f000 f92f 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800179a:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <MX_TIM1_Init+0x180>)
 800179c:	f000 fa72 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 80017a0:	bf00      	nop
 80017a2:	3758      	adds	r7, #88	@ 0x58
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200001e0 	.word	0x200001e0
 80017ac:	40010000 	.word	0x40010000

080017b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017d6:	225f      	movs	r2, #95	@ 0x5f
 80017d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017e2:	f06f 0201 	mvn.w	r2, #1
 80017e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017f6:	f002 ff69 	bl	80046cc <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001800:	f000 f8fa 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <MX_TIM2_Init+0x94>)
 8001812:	f003 f9d1 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800181c:	f000 f8ec 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_TIM2_Init+0x94>)
 800182e:	f003 fd5d 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001838:	f000 f8de 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000228 	.word	0x20000228

08001848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <MX_USART1_UART_Init+0x50>)
 8001850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001880:	f003 fdf4 	bl	800546c <HAL_UART_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800188a:	f000 f8b5 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000270 	.word	0x20000270
 8001898:	40011000 	.word	0x40011000

0800189c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <MX_DMA_Init+0x4c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a0f      	ldr	r2, [pc, #60]	@ (80018e8 <MX_DMA_Init+0x4c>)
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <MX_DMA_Init+0x4c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2038      	movs	r0, #56	@ 0x38
 80018c4:	f001 fb8f 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018c8:	2038      	movs	r0, #56	@ 0x38
 80018ca:	f001 fba8 	bl	800301e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	203a      	movs	r0, #58	@ 0x3a
 80018d4:	f001 fb87 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018d8:	203a      	movs	r0, #58	@ 0x3a
 80018da:	f001 fba0 	bl	800301e <HAL_NVIC_EnableIRQ>

}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a37      	ldr	r2, [pc, #220]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a30      	ldr	r2, [pc, #192]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a29      	ldr	r2, [pc, #164]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a22      	ldr	r2, [pc, #136]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <MX_GPIO_Init+0xfc>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8001972:	2200      	movs	r2, #0
 8001974:	f24f 413e 	movw	r1, #62526	@ 0xf43e
 8001978:	481c      	ldr	r0, [pc, #112]	@ (80019ec <MX_GPIO_Init+0x100>)
 800197a:	f002 f8f1 	bl	8003b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001984:	481a      	ldr	r0, [pc, #104]	@ (80019f0 <MX_GPIO_Init+0x104>)
 8001986:	f002 f8eb 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800198a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4815      	ldr	r0, [pc, #84]	@ (80019f4 <MX_GPIO_Init+0x108>)
 80019a0:	f001 ff5a 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 80019a4:	f24f 433e 	movw	r3, #62526	@ 0xf43e
 80019a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <MX_GPIO_Init+0x100>)
 80019be:	f001 ff4b 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80019c2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_GPIO_Init+0x104>)
 80019dc:	f001 ff3c 	bl	8003858 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020800 	.word	0x40020800

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <Error_Handler+0x8>

08001a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3f      	ldr	r2, [pc, #252]	@ (8001b70 <HAL_ADC_MspInit+0x11c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d178      	bne.n	8001b68 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b3b      	ldr	r3, [pc, #236]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a36      	ldr	r2, [pc, #216]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b30      	ldr	r3, [pc, #192]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_ADC_MspInit+0x120>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001aca:	23ff      	movs	r3, #255	@ 0xff
 8001acc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4826      	ldr	r0, [pc, #152]	@ (8001b78 <HAL_ADC_MspInit+0x124>)
 8001ade:	f001 febb 	bl	8003858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4821      	ldr	r0, [pc, #132]	@ (8001b7c <HAL_ADC_MspInit+0x128>)
 8001af6:	f001 feaf 	bl	8003858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001afc:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <HAL_ADC_MspInit+0x130>)
 8001afe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b22:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b3c:	4810      	ldr	r0, [pc, #64]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b3e:	f001 fa89 	bl	8003054 <HAL_DMA_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001b48:	f7ff ff56 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b50:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b52:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <HAL_ADC_MspInit+0x12c>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2012      	movs	r0, #18
 8001b5e:	f001 fa42 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b62:	2012      	movs	r0, #18
 8001b64:	f001 fa5b 	bl	800301e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	@ 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	2000012c 	.word	0x2000012c
 8001b84:	40026410 	.word	0x40026410

08001b88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_I2C_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12c      	bne.n	8001c04 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <HAL_I2C_MspInit+0x8c>)
 8001be4:	f001 fe38 	bl	8003858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	@ 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <HAL_TIM_Base_MspInit+0x64>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10e      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a13      	ldr	r2, [pc, #76]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c46:	e012      	b.n	8001c6e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c50:	d10d      	bne.n	8001c6e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11e      	bne.n	8001ce4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001cc2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001ce0:	f001 fdba 	bl	8003858 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a34      	ldr	r2, [pc, #208]	@ (8001de8 <HAL_UART_MspInit+0xf0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d161      	bne.n	8001dde <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_UART_MspInit+0xf4>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a32      	ldr	r2, [pc, #200]	@ (8001dec <HAL_UART_MspInit+0xf4>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b30      	ldr	r3, [pc, #192]	@ (8001dec <HAL_UART_MspInit+0xf4>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <HAL_UART_MspInit+0xf4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dec <HAL_UART_MspInit+0xf4>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <HAL_UART_MspInit+0xf4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d52:	23c0      	movs	r3, #192	@ 0xc0
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4820      	ldr	r0, [pc, #128]	@ (8001df0 <HAL_UART_MspInit+0xf8>)
 8001d6e:	f001 fd73 	bl	8003858 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d74:	4a20      	ldr	r2, [pc, #128]	@ (8001df8 <HAL_UART_MspInit+0x100>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d92:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d94:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001da0:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001da6:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001db2:	4810      	ldr	r0, [pc, #64]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001db4:	f001 f94e 	bl	8003054 <HAL_DMA_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001dbe:	f7ff fe1b 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2025      	movs	r0, #37	@ 0x25
 8001dd4:	f001 f907 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd8:	2025      	movs	r0, #37	@ 0x25
 8001dda:	f001 f920 	bl	800301e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	@ 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020400 	.word	0x40020400
 8001df4:	200002b8 	.word	0x200002b8
 8001df8:	40026440 	.word	0x40026440

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <NMI_Handler+0x4>

08001e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <MemManage_Handler+0x4>

08001e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f000 f8b9 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <ADC_IRQHandler+0x10>)
 8001e62:	f000 f914 	bl	800208e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000e4 	.word	0x200000e4

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f003 fb49 	bl	800550c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000270 	.word	0x20000270

08001e84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <DMA2_Stream0_IRQHandler+0x10>)
 8001e8a:	f001 fa7b 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000012c 	.word	0x2000012c

08001e98 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <DMA2_Stream2_IRQHandler+0x10>)
 8001e9e:	f001 fa71 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002b8 	.word	0x200002b8

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed4:	f7ff ffea 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eda:	490d      	ldr	r1, [pc, #52]	@ (8001f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efe:	f004 f9ef 	bl	80062e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff f9b9 	bl	8001278 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001f14:	08006468 	.word	0x08006468
  ldr r2, =_sbss
 8001f18:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001f1c:	20000394 	.word	0x20000394

08001f20 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <DMA1_Stream0_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f001 f83f 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fd54 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f857 	bl	800303a <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa4:	f001 f81f 	bl	8002fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200000b8 	.word	0x200000b8
 8001fc0:	200000c0 	.word	0x200000c0
 8001fc4:	200000bc 	.word	0x200000bc

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200000c0 	.word	0x200000c0
 8001fec:	20000390 	.word	0x20000390

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000390 	.word	0x20000390

08002008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e033      	b.n	8002086 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fd14 	bl	8001a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800204e:	f023 0302 	bic.w	r3, r3, #2
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fbc6 	bl	80027ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
 8002076:	e001      	b.n	800207c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d049      	beq.n	8002158 <HAL_ADC_IRQHandler+0xca>
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d046      	beq.n	8002158 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d12b      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d127      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002110:	2b00      	cmp	r3, #0
 8002112:	d119      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0220 	bic.w	r2, r2, #32
 8002122:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fe73 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f06f 0212 	mvn.w	r2, #18
 8002156:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002166:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d057      	beq.n	800221e <HAL_ADC_IRQHandler+0x190>
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d054      	beq.n	800221e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d139      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d124      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11d      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d119      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fc6a 	bl	8002ae8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 020c 	mvn.w	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d017      	beq.n	8002264 <HAL_ADC_IRQHandler+0x1d6>
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10d      	bne.n	8002264 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f983 	bl	8002560 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f06f 0201 	mvn.w	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002272:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x218>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d012      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	f043 0202 	orr.w	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0220 	mvn.w	r2, #32
 8002294:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f96c 	bl	8002574 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0220 	mvn.w	r2, #32
 80022a4:	601a      	str	r2, [r3, #0]
  }
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Start_DMA+0x22>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0d0      	b.n	8002474 <HAL_ADC_Start_DMA+0x1c4>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d018      	beq.n	800231a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f8:	4b60      	ldr	r3, [pc, #384]	@ (800247c <HAL_ADC_Start_DMA+0x1cc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a60      	ldr	r2, [pc, #384]	@ (8002480 <HAL_ADC_Start_DMA+0x1d0>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9a      	lsrs	r2, r3, #18
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800230c:	e002      	b.n	8002314 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3b01      	subs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002328:	d107      	bne.n	800233a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002338:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 8088 	bne.w	800245a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002374:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002388:	d106      	bne.n	8002398 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f023 0206 	bic.w	r2, r3, #6
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	645a      	str	r2, [r3, #68]	@ 0x44
 8002396:	e002      	b.n	800239e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a6:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_ADC_Start_DMA+0x1d4>)
 80023a8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ae:	4a36      	ldr	r2, [pc, #216]	@ (8002488 <HAL_ADC_Start_DMA+0x1d8>)
 80023b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b6:	4a35      	ldr	r2, [pc, #212]	@ (800248c <HAL_ADC_Start_DMA+0x1dc>)
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023be:	4a34      	ldr	r2, [pc, #208]	@ (8002490 <HAL_ADC_Start_DMA+0x1e0>)
 80023c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023da:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	334c      	adds	r3, #76	@ 0x4c
 80023f6:	4619      	mov	r1, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f000 fed8 	bl	80031b0 <HAL_DMA_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10f      	bne.n	8002430 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d129      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	e020      	b.n	8002472 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <HAL_ADC_Start_DMA+0x1e4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11b      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c2>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d114      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e00b      	b.n	8002472 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002472:	7ffb      	ldrb	r3, [r7, #31]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200000b8 	.word	0x200000b8
 8002480:	431bde83 	.word	0x431bde83
 8002484:	40012300 	.word	0x40012300
 8002488:	080029e5 	.word	0x080029e5
 800248c:	08002a9f 	.word	0x08002a9f
 8002490:	08002abb 	.word	0x08002abb
 8002494:	40012000 	.word	0x40012000

08002498 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Stop_DMA+0x1a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e048      	b.n	8002544 <HAL_ADC_Stop_DMA+0xac>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d130      	bne.n	800253a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d10f      	bne.n	8002516 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 feb0 	bl	8003260 <HAL_DMA_Abort>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002524:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1c>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e113      	b.n	80027cc <HAL_ADC_ConfigChannel+0x244>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	d925      	bls.n	8002600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68d9      	ldr	r1, [r3, #12]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	3b1e      	subs	r3, #30
 80025ca:	2207      	movs	r2, #7
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43da      	mvns	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	400a      	ands	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4403      	add	r3, r0
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	409a      	lsls	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	e022      	b.n	8002646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	2207      	movs	r2, #7
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	400a      	ands	r2, r1
 8002622:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6919      	ldr	r1, [r3, #16]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	4603      	mov	r3, r0
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4403      	add	r3, r0
 800263c:	409a      	lsls	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d824      	bhi.n	8002698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b05      	subs	r3, #5
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b05      	subs	r3, #5
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	635a      	str	r2, [r3, #52]	@ 0x34
 8002696:	e04c      	b.n	8002732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d824      	bhi.n	80026ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b23      	subs	r3, #35	@ 0x23
 80026b2:	221f      	movs	r2, #31
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43da      	mvns	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	400a      	ands	r2, r1
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b23      	subs	r3, #35	@ 0x23
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e8:	e023      	b.n	8002732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b41      	subs	r3, #65	@ 0x41
 80026fc:	221f      	movs	r2, #31
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b41      	subs	r3, #65	@ 0x41
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002732:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <HAL_ADC_ConfigChannel+0x250>)
 8002734:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <HAL_ADC_ConfigChannel+0x254>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10f      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1d8>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b12      	cmp	r3, #18
 8002746:	d10b      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_ADC_ConfigChannel+0x254>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d12b      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x23a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	@ (80027e0 <HAL_ADC_ConfigChannel+0x258>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <HAL_ADC_ConfigChannel+0x1f4>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b11      	cmp	r3, #17
 800277a:	d122      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a11      	ldr	r2, [pc, #68]	@ (80027e0 <HAL_ADC_ConfigChannel+0x258>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279e:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_ADC_ConfigChannel+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a11      	ldr	r2, [pc, #68]	@ (80027e8 <HAL_ADC_ConfigChannel+0x260>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9a      	lsrs	r2, r3, #18
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40012300 	.word	0x40012300
 80027dc:	40012000 	.word	0x40012000
 80027e0:	10000012 	.word	0x10000012
 80027e4:	200000b8 	.word	0x200000b8
 80027e8:	431bde83 	.word	0x431bde83

080027ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f4:	4b79      	ldr	r3, [pc, #484]	@ (80029dc <ADC_Init+0x1f0>)
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	021a      	lsls	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	4a58      	ldr	r2, [pc, #352]	@ (80029e0 <ADC_Init+0x1f4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e00f      	b.n	80028ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0202 	bic.w	r2, r2, #2
 80028f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
 8002904:	005a      	lsls	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002926:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	3b01      	subs	r3, #1
 8002944:	035a      	lsls	r2, r3, #13
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	e007      	b.n	8002960 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800295e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	3b01      	subs	r3, #1
 800297c:	051a      	lsls	r2, r3, #20
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029a2:	025a      	lsls	r2, r3, #9
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	029a      	lsls	r2, r3, #10
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40012300 	.word	0x40012300
 80029e0:	0f000001 	.word	0x0f000001

080029e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d13c      	bne.n	8002a78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d12b      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d127      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d119      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0220 	bic.w	r2, r2, #32
 8002a4a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7fe f9df 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a76:	e00e      	b.n	8002a96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff fd75 	bl	8002574 <HAL_ADC_ErrorCallback>
}
 8002a8a:	e004      	b.n	8002a96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aaa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff fd4d 	bl	800254c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2240      	movs	r2, #64	@ 0x40
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff fd4a 	bl	8002574 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e17e      	b.n	8002e12 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	d925      	bls.n	8002b70 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68d9      	ldr	r1, [r3, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	3b1e      	subs	r3, #30
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43da      	mvns	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	400a      	ands	r2, r1
 8002b48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68d9      	ldr	r1, [r3, #12]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4403      	add	r3, r0
 8002b62:	3b1e      	subs	r3, #30
 8002b64:	409a      	lsls	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	e022      	b.n	8002bb6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	2207      	movs	r2, #7
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	400a      	ands	r2, r1
 8002b92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6919      	ldr	r1, [r3, #16]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4403      	add	r3, r0
 8002bac:	409a      	lsls	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	051a      	lsls	r2, r3, #20
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	221f      	movs	r2, #31
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43da      	mvns	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3303      	adds	r3, #3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d022      	beq.n	8002c94 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002c7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	e00f      	b.n	8002cb4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002cb2:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	7d5b      	ldrb	r3, [r3, #21]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	e007      	b.n	8002cde <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cdc:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7d1b      	ldrb	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e007      	b.n	8002d08 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d06:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d02e      	beq.n	8002d6e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d840      	bhi.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d014      	beq.n	8002d46 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002d1c:	e03b      	b.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002d2c:	f023 030f 	bic.w	r3, r3, #15
 8002d30:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6959      	ldr	r1, [r3, #20]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	615a      	str	r2, [r3, #20]
      break;
 8002d44:	e03b      	b.n	8002dbe <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002d54:	f023 030f 	bic.w	r3, r3, #15
 8002d58:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6999      	ldr	r1, [r3, #24]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]
      break;
 8002d6c:	e027      	b.n	8002dbe <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002d7c:	f023 030f 	bic.w	r3, r3, #15
 8002d80:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69d9      	ldr	r1, [r3, #28]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	61da      	str	r2, [r3, #28]
      break;
 8002d94:	e013      	b.n	8002dbe <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002da4:	f023 030f 	bic.w	r3, r3, #15
 8002da8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a19      	ldr	r1, [r3, #32]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	621a      	str	r2, [r3, #32]
      break;
 8002dbc:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbe:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a18      	ldr	r2, [pc, #96]	@ (8002e28 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d109      	bne.n	8002de0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b12      	cmp	r3, #18
 8002dd2:	d105      	bne.n	8002de0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10e      	bne.n	8002e08 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0f      	ldr	r2, [pc, #60]	@ (8002e2c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b11      	cmp	r3, #17
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	000f0001 	.word	0x000f0001
 8002e24:	40012300 	.word	0x40012300
 8002e28:	40012000 	.word	0x40012000
 8002e2c:	10000012 	.word	0x10000012

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f9c:	d301      	bcc.n	8002fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <SysTick_Config+0x40>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002faa:	210f      	movs	r1, #15
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb0:	f7ff ff8e 	bl	8002ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <SysTick_Config+0x40>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <SysTick_Config+0x40>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff29 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff8:	f7ff ff3e 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f7ff ff8e 	bl	8002f24 <NVIC_EncodePriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff5d 	bl	8002ed0 <__NVIC_SetPriority>
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff31 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffa2 	bl	8002f8c <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7fe ffc6 	bl	8001ff0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e099      	b.n	80031a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003090:	e00f      	b.n	80030b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003092:	f7fe ffad 	bl	8001ff0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b05      	cmp	r3, #5
 800309e:	d908      	bls.n	80030b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e078      	b.n	80031a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e8      	bne.n	8003092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <HAL_DMA_Init+0x158>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	2b04      	cmp	r3, #4
 800310a:	d107      	bne.n	800311c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	4313      	orrs	r3, r2
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	2b04      	cmp	r3, #4
 8003144:	d117      	bne.n	8003176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb01 	bl	8003760 <DMA_CheckFifoParam>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	@ 0x40
 8003168:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003172:	2301      	movs	r3, #1
 8003174:	e016      	b.n	80031a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fab8 	bl	80036f4 <DMA_CalcBaseAndBitshift>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	223f      	movs	r2, #63	@ 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	f010803f 	.word	0xf010803f

080031b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_DMA_Start_IT+0x26>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e040      	b.n	8003258 <HAL_DMA_Start_IT+0xa8>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12f      	bne.n	800324a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fa4a 	bl	8003698 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	223f      	movs	r2, #63	@ 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0216 	orr.w	r2, r2, #22
 800321e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e005      	b.n	8003256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800326e:	f7fe febf 	bl	8001ff0 <HAL_GetTick>
 8003272:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d008      	beq.n	8003292 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e052      	b.n	8003338 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0216 	bic.w	r2, r2, #22
 80032a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <HAL_DMA_Abort+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0208 	bic.w	r2, r2, #8
 80032d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e2:	e013      	b.n	800330c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e4:	f7fe fe84 	bl	8001ff0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d90c      	bls.n	800330c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2203      	movs	r2, #3
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e015      	b.n	8003338 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e4      	bne.n	80032e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331e:	223f      	movs	r2, #63	@ 0x3f
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d004      	beq.n	800335e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2280      	movs	r2, #128	@ 0x80
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00c      	b.n	8003378 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2205      	movs	r2, #5
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003390:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <HAL_DMA_IRQHandler+0x248>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a8e      	ldr	r2, [pc, #568]	@ (80035d0 <HAL_DMA_IRQHandler+0x24c>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2208      	movs	r2, #8
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01a      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0204 	bic.w	r2, r2, #4
 80033d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d012      	beq.n	8003426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	2204      	movs	r2, #4
 800342c:	409a      	lsls	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	2204      	movs	r2, #4
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	2210      	movs	r2, #16
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d043      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03c      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	2210      	movs	r2, #16
 8003480:	409a      	lsls	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d024      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
 80034b2:	e01f      	b.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e016      	b.n	80034f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0208 	bic.w	r2, r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f8:	2220      	movs	r2, #32
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 808f 	beq.w	8003624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8087 	beq.w	8003624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	2220      	movs	r2, #32
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b05      	cmp	r3, #5
 800352c:	d136      	bne.n	800359c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0216 	bic.w	r2, r2, #22
 800353c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800354c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_DMA_IRQHandler+0x1da>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	223f      	movs	r2, #63	@ 0x3f
 8003574:	409a      	lsls	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d07e      	beq.n	8003690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
        }
        return;
 800359a:	e079      	b.n	8003690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e02c      	b.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
 80035ca:	bf00      	nop
 80035cc:	200000b8 	.word	0x200000b8
 80035d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d023      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
 80035e4:	e01e      	b.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0210 	bic.w	r2, r2, #16
 8003602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	2b00      	cmp	r3, #0
 800362a:	d032      	beq.n	8003692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d022      	beq.n	800367e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3301      	adds	r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d307      	bcc.n	800366c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f2      	bne.n	8003650 <HAL_DMA_IRQHandler+0x2cc>
 800366a:	e000      	b.n	800366e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800366c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e000      	b.n	8003692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003690:	bf00      	nop
    }
  }
}
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d108      	bne.n	80036d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036d6:	e007      	b.n	80036e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3b10      	subs	r3, #16
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <DMA_CalcBaseAndBitshift+0x64>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800370e:	4a13      	ldr	r2, [pc, #76]	@ (800375c <DMA_CalcBaseAndBitshift+0x68>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d909      	bls.n	8003736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	@ 0x58
 8003734:	e007      	b.n	8003746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	aaaaaaab 	.word	0xaaaaaaab
 800375c:	08006450 	.word	0x08006450

08003760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11f      	bne.n	80037ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d856      	bhi.n	800382e <DMA_CheckFifoParam+0xce>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <DMA_CheckFifoParam+0x28>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	08003799 	.word	0x08003799
 800378c:	080037ab 	.word	0x080037ab
 8003790:	08003799 	.word	0x08003799
 8003794:	0800382f 	.word	0x0800382f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d046      	beq.n	8003832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e043      	b.n	8003832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b2:	d140      	bne.n	8003836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e03d      	b.n	8003836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c2:	d121      	bne.n	8003808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d837      	bhi.n	800383a <DMA_CheckFifoParam+0xda>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <DMA_CheckFifoParam+0x70>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037e7 	.word	0x080037e7
 80037d8:	080037e1 	.word	0x080037e1
 80037dc:	080037f9 	.word	0x080037f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e030      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d025      	beq.n	800383e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f6:	e022      	b.n	800383e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003800:	d11f      	bne.n	8003842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003806:	e01c      	b.n	8003842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d903      	bls.n	8003816 <DMA_CheckFifoParam+0xb6>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d003      	beq.n	800381c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003814:	e018      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
      break;
 800381a:	e015      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e00b      	b.n	8003846 <DMA_CheckFifoParam+0xe6>
      break;
 800382e:	bf00      	nop
 8003830:	e00a      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e008      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e006      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e004      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;   
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
    }
  } 
  
  return status; 
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop

08003858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	@ 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	e159      	b.n	8003b28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003874:	2201      	movs	r2, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	f040 8148 	bne.w	8003b22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d005      	beq.n	80038aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d130      	bne.n	800390c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e0:	2201      	movs	r2, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 0201 	and.w	r2, r3, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b03      	cmp	r3, #3
 8003916:	d017      	beq.n	8003948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d123      	bne.n	800399c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	08da      	lsrs	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3208      	adds	r2, #8
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a2 	beq.w	8003b22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b57      	ldr	r3, [pc, #348]	@ (8003b40 <HAL_GPIO_Init+0x2e8>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	4a56      	ldr	r2, [pc, #344]	@ (8003b40 <HAL_GPIO_Init+0x2e8>)
 80039e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ee:	4b54      	ldr	r3, [pc, #336]	@ (8003b40 <HAL_GPIO_Init+0x2e8>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fa:	4a52      	ldr	r2, [pc, #328]	@ (8003b44 <HAL_GPIO_Init+0x2ec>)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	3302      	adds	r3, #2
 8003a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	220f      	movs	r2, #15
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a49      	ldr	r2, [pc, #292]	@ (8003b48 <HAL_GPIO_Init+0x2f0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x202>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a48      	ldr	r2, [pc, #288]	@ (8003b4c <HAL_GPIO_Init+0x2f4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x1fe>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a47      	ldr	r2, [pc, #284]	@ (8003b50 <HAL_GPIO_Init+0x2f8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x1fa>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a46      	ldr	r2, [pc, #280]	@ (8003b54 <HAL_GPIO_Init+0x2fc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x1f6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a45      	ldr	r2, [pc, #276]	@ (8003b58 <HAL_GPIO_Init+0x300>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x1f2>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e008      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e004      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f002 0203 	and.w	r2, r2, #3
 8003a62:	0092      	lsls	r2, r2, #2
 8003a64:	4093      	lsls	r3, r2
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a6c:	4935      	ldr	r1, [pc, #212]	@ (8003b44 <HAL_GPIO_Init+0x2ec>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a7a:	4b38      	ldr	r3, [pc, #224]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac8:	4a24      	ldr	r2, [pc, #144]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ace:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af8:	4b18      	ldr	r3, [pc, #96]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f67f aea2 	bls.w	8003874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	3724      	adds	r7, #36	@ 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40013800 	.word	0x40013800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020800 	.word	0x40020800
 8003b54:	40020c00 	.word	0x40020c00
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40013c00 	.word	0x40013c00

08003b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b70:	787b      	ldrb	r3, [r7, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b7c:	e003      	b.n	8003b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e12b      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd ffe4 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	@ 0x24
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f000 fd40 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a81      	ldr	r2, [pc, #516]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d807      	bhi.n	8003c18 <HAL_I2C_Init+0x84>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a80      	ldr	r2, [pc, #512]	@ (8003e0c <HAL_I2C_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e006      	b.n	8003c26 <HAL_I2C_Init+0x92>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e10 <HAL_I2C_Init+0x27c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0e7      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a78      	ldr	r2, [pc, #480]	@ (8003e14 <HAL_I2C_Init+0x280>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0c9b      	lsrs	r3, r3, #18
 8003c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d802      	bhi.n	8003c68 <HAL_I2C_Init+0xd4>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	e009      	b.n	8003c7c <HAL_I2C_Init+0xe8>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	4a69      	ldr	r2, [pc, #420]	@ (8003e18 <HAL_I2C_Init+0x284>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	495c      	ldr	r1, [pc, #368]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d819      	bhi.n	8003cd0 <HAL_I2C_Init+0x13c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e59      	subs	r1, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_I2C_Init+0x138>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e59      	subs	r1, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	e051      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	e04f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <HAL_I2C_Init+0x168>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e012      	b.n	8003d22 <HAL_I2C_Init+0x18e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Init+0x196>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <HAL_I2C_Init+0x1bc>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e58      	subs	r0, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4e:	e00f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6809      	ldr	r1, [r1, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6911      	ldr	r1, [r2, #16]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	000186a0 	.word	0x000186a0
 8003e0c:	001e847f 	.word	0x001e847f
 8003e10:	003d08ff 	.word	0x003d08ff
 8003e14:	431bde83 	.word	0x431bde83
 8003e18:	10624dd3 	.word	0x10624dd3

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e267      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e3a:	4b88      	ldr	r3, [pc, #544]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d00c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e46:	4b85      	ldr	r3, [pc, #532]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b82      	ldr	r3, [pc, #520]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	4b7e      	ldr	r3, [pc, #504]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x108>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e242      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x74>
 8003e82:	4b76      	ldr	r3, [pc, #472]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a75      	ldr	r2, [pc, #468]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e01d      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x98>
 8003e9a:	4b70      	ldr	r3, [pc, #448]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003eb4:	4b69      	ldr	r3, [pc, #420]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a68      	ldr	r2, [pc, #416]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b66      	ldr	r3, [pc, #408]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a65      	ldr	r2, [pc, #404]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f88c 	bl	8001ff0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe f888 	bl	8001ff0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e207      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b5b      	ldr	r3, [pc, #364]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0xc0>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fe f878 	bl	8001ff0 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f874 	bl	8001ff0 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	@ 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e1f3      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	4b51      	ldr	r3, [pc, #324]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0xe8>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d063      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f32:	4b4a      	ldr	r3, [pc, #296]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3e:	4b47      	ldr	r3, [pc, #284]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d11c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4a:	4b44      	ldr	r3, [pc, #272]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d116      	bne.n	8003f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_OscConfig+0x152>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e1c7      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4937      	ldr	r1, [pc, #220]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f82:	e03a      	b.n	8003ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f8c:	4b34      	ldr	r3, [pc, #208]	@ (8004060 <HAL_RCC_OscConfig+0x244>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe f82d 	bl	8001ff0 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fe f829 	bl	8001ff0 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1a8      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	4b2b      	ldr	r3, [pc, #172]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b28      	ldr	r3, [pc, #160]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4925      	ldr	r1, [pc, #148]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
 8003fcc:	e015      	b.n	8003ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fce:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <HAL_RCC_OscConfig+0x244>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f80c 	bl	8001ff0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7fe f808 	bl	8001ff0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e187      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	4b1b      	ldr	r3, [pc, #108]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d036      	beq.n	8004074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400e:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <HAL_RCC_OscConfig+0x248>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fd ffec 	bl	8001ff0 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401c:	f7fd ffe8 	bl	8001ff0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e167      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <HAL_RCC_OscConfig+0x240>)
 8004030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x200>
 800403a:	e01b      	b.n	8004074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403c:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <HAL_RCC_OscConfig+0x248>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fd ffd5 	bl	8001ff0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004048:	e00e      	b.n	8004068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404a:	f7fd ffd1 	bl	8001ff0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d907      	bls.n	8004068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e150      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
 800405c:	40023800 	.word	0x40023800
 8004060:	42470000 	.word	0x42470000
 8004064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	4b88      	ldr	r3, [pc, #544]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 800406a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ea      	bne.n	800404a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8097 	beq.w	80041b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b81      	ldr	r3, [pc, #516]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	4b7d      	ldr	r3, [pc, #500]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	4a7c      	ldr	r2, [pc, #496]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a2:	4b7a      	ldr	r3, [pc, #488]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b77      	ldr	r3, [pc, #476]	@ (8004290 <HAL_RCC_OscConfig+0x474>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d118      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040be:	4b74      	ldr	r3, [pc, #464]	@ (8004290 <HAL_RCC_OscConfig+0x474>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a73      	ldr	r2, [pc, #460]	@ (8004290 <HAL_RCC_OscConfig+0x474>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7fd ff91 	bl	8001ff0 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7fd ff8d 	bl	8001ff0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e10c      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004290 <HAL_RCC_OscConfig+0x474>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x2ea>
 80040f8:	4b64      	ldr	r3, [pc, #400]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	4a63      	ldr	r2, [pc, #396]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6713      	str	r3, [r2, #112]	@ 0x70
 8004104:	e01c      	b.n	8004140 <HAL_RCC_OscConfig+0x324>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x30c>
 800410e:	4b5f      	ldr	r3, [pc, #380]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	4a5e      	ldr	r2, [pc, #376]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	6713      	str	r3, [r2, #112]	@ 0x70
 800411a:	4b5c      	ldr	r3, [pc, #368]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411e:	4a5b      	ldr	r2, [pc, #364]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	6713      	str	r3, [r2, #112]	@ 0x70
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0x324>
 8004128:	4b58      	ldr	r3, [pc, #352]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412c:	4a57      	ldr	r2, [pc, #348]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	@ 0x70
 8004134:	4b55      	ldr	r3, [pc, #340]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004138:	4a54      	ldr	r2, [pc, #336]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 800413a:	f023 0304 	bic.w	r3, r3, #4
 800413e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd ff52 	bl	8001ff0 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	e00a      	b.n	8004166 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fd ff4e 	bl	8001ff0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e0cb      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	4b49      	ldr	r3, [pc, #292]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0ee      	beq.n	8004150 <HAL_RCC_OscConfig+0x334>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004174:	f7fd ff3c 	bl	8001ff0 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417a:	e00a      	b.n	8004192 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7fd ff38 	bl	8001ff0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0b5      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004192:	4b3e      	ldr	r3, [pc, #248]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ee      	bne.n	800417c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a4:	4b39      	ldr	r3, [pc, #228]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	4a38      	ldr	r2, [pc, #224]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80041aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80a1 	beq.w	80042fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ba:	4b34      	ldr	r3, [pc, #208]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d05c      	beq.n	8004280 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d141      	bne.n	8004252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <HAL_RCC_OscConfig+0x478>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd ff0c 	bl	8001ff0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd ff08 	bl	8001ff0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e087      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	4b27      	ldr	r3, [pc, #156]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	491b      	ldr	r1, [pc, #108]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004224:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <HAL_RCC_OscConfig+0x478>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422a:	f7fd fee1 	bl	8001ff0 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004232:	f7fd fedd 	bl	8001ff0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e05c      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004244:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x416>
 8004250:	e054      	b.n	80042fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004252:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <HAL_RCC_OscConfig+0x478>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd feca 	bl	8001ff0 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd fec6 	bl	8001ff0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e045      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_RCC_OscConfig+0x470>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x444>
 800427e:	e03d      	b.n	80042fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d107      	bne.n	8004298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e038      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
 800428c:	40023800 	.word	0x40023800
 8004290:	40007000 	.word	0x40007000
 8004294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004298:	4b1b      	ldr	r3, [pc, #108]	@ (8004308 <HAL_RCC_OscConfig+0x4ec>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d028      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d121      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d11a      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d111      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	3b01      	subs	r3, #1
 80042e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0cc      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b68      	ldr	r3, [pc, #416]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d90c      	bls.n	8004348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b63      	ldr	r3, [pc, #396]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0b8      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004360:	4b59      	ldr	r3, [pc, #356]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a58      	ldr	r2, [pc, #352]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800436a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004378:	4b53      	ldr	r3, [pc, #332]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a52      	ldr	r2, [pc, #328]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004384:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	494d      	ldr	r1, [pc, #308]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d044      	beq.n	800442c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d119      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e067      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4934      	ldr	r1, [pc, #208]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043fc:	f7fd fdf8 	bl	8001ff0 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fd fdf4 	bl	8001ff0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b25      	ldr	r3, [pc, #148]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d20c      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b20      	ldr	r3, [pc, #128]	@ (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e032      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4916      	ldr	r1, [pc, #88]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	490e      	ldr	r1, [pc, #56]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004492:	f000 f821 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	490a      	ldr	r1, [pc, #40]	@ (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	5ccb      	ldrb	r3, [r1, r3]
 80044a6:	fa22 f303 	lsr.w	r3, r2, r3
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <HAL_RCC_ClockConfig+0x1c8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fd58 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023c00 	.word	0x40023c00
 80044c8:	40023800 	.word	0x40023800
 80044cc:	08006438 	.word	0x08006438
 80044d0:	200000b8 	.word	0x200000b8
 80044d4:	200000bc 	.word	0x200000bc

080044d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044dc:	b090      	sub	sp, #64	@ 0x40
 80044de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f0:	4b59      	ldr	r3, [pc, #356]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d00d      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x40>
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	f200 80a1 	bhi.w	8004644 <HAL_RCC_GetSysClockFreq+0x16c>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x34>
 8004506:	2b04      	cmp	r3, #4
 8004508:	d003      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x3a>
 800450a:	e09b      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b53      	ldr	r3, [pc, #332]	@ (800465c <HAL_RCC_GetSysClockFreq+0x184>)
 800450e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004510:	e09b      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004512:	4b53      	ldr	r3, [pc, #332]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x188>)
 8004514:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004516:	e098      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004518:	4b4f      	ldr	r3, [pc, #316]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004520:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004522:	4b4d      	ldr	r3, [pc, #308]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d028      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b4a      	ldr	r3, [pc, #296]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	2200      	movs	r2, #0
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	627a      	str	r2, [r7, #36]	@ 0x24
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004540:	2100      	movs	r1, #0
 8004542:	4b47      	ldr	r3, [pc, #284]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x188>)
 8004544:	fb03 f201 	mul.w	r2, r3, r1
 8004548:	2300      	movs	r3, #0
 800454a:	fb00 f303 	mul.w	r3, r0, r3
 800454e:	4413      	add	r3, r2
 8004550:	4a43      	ldr	r2, [pc, #268]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x188>)
 8004552:	fba0 1202 	umull	r1, r2, r0, r2
 8004556:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004558:	460a      	mov	r2, r1
 800455a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800455c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800455e:	4413      	add	r3, r2
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	2200      	movs	r2, #0
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004572:	f7fc faaf 	bl	8000ad4 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4613      	mov	r3, r2
 800457c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800457e:	e053      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004580:	4b35      	ldr	r3, [pc, #212]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	099b      	lsrs	r3, r3, #6
 8004586:	2200      	movs	r2, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	617a      	str	r2, [r7, #20]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004592:	f04f 0b00 	mov.w	fp, #0
 8004596:	4652      	mov	r2, sl
 8004598:	465b      	mov	r3, fp
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	0159      	lsls	r1, r3, #5
 80045a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a8:	0150      	lsls	r0, r2, #5
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	ebb2 080a 	subs.w	r8, r2, sl
 80045b2:	eb63 090b 	sbc.w	r9, r3, fp
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045ca:	ebb2 0408 	subs.w	r4, r2, r8
 80045ce:	eb63 0509 	sbc.w	r5, r3, r9
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	00eb      	lsls	r3, r5, #3
 80045dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e0:	00e2      	lsls	r2, r4, #3
 80045e2:	4614      	mov	r4, r2
 80045e4:	461d      	mov	r5, r3
 80045e6:	eb14 030a 	adds.w	r3, r4, sl
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	eb45 030b 	adc.w	r3, r5, fp
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045fe:	4629      	mov	r1, r5
 8004600:	028b      	lsls	r3, r1, #10
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004608:	4621      	mov	r1, r4
 800460a:	028a      	lsls	r2, r1, #10
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004612:	2200      	movs	r2, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	60fa      	str	r2, [r7, #12]
 8004618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461c:	f7fc fa5a 	bl	8000ad4 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004638:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004642:	e002      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <HAL_RCC_GetSysClockFreq+0x184>)
 8004646:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800464c:	4618      	mov	r0, r3
 800464e:	3740      	adds	r7, #64	@ 0x40
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	00f42400 	.word	0x00f42400
 8004660:	017d7840 	.word	0x017d7840

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b03      	ldr	r3, [pc, #12]	@ (8004678 <HAL_RCC_GetHCLKFreq+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200000b8 	.word	0x200000b8

0800467c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004680:	f7ff fff0 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b05      	ldr	r3, [pc, #20]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	0a9b      	lsrs	r3, r3, #10
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4903      	ldr	r1, [pc, #12]	@ (80046a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40023800 	.word	0x40023800
 80046a0:	08006448 	.word	0x08006448

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a8:	f7ff ffdc 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0b5b      	lsrs	r3, r3, #13
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	08006448 	.word	0x08006448

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e041      	b.n	8004762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd fa90 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fb1c 	bl	8004d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e03c      	b.n	80047fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_TIM_Base_Start+0xa0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479e:	d013      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004810 <HAL_TIM_Base_Start+0xa4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a19      	ldr	r2, [pc, #100]	@ (8004814 <HAL_TIM_Base_Start+0xa8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <HAL_TIM_Base_Start+0xac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_Base_Start+0x5c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a16      	ldr	r2, [pc, #88]	@ (800481c <HAL_TIM_Base_Start+0xb0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d111      	bne.n	80047ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d010      	beq.n	80047fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e007      	b.n	80047fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40014000 	.word	0x40014000

08004820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e041      	b.n	80048b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f839 	bl	80048be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 fa72 	bl	8004d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_TIM_PWM_Start+0x24>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e022      	b.n	800493e <HAL_TIM_PWM_Start+0x6a>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d109      	bne.n	8004912 <HAL_TIM_PWM_Start+0x3e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e015      	b.n	800493e <HAL_TIM_PWM_Start+0x6a>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d109      	bne.n	800492c <HAL_TIM_PWM_Start+0x58>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e008      	b.n	800493e <HAL_TIM_PWM_Start+0x6a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e068      	b.n	8004a18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0x82>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004954:	e013      	b.n	800497e <HAL_TIM_PWM_Start+0xaa>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0x92>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004964:	e00b      	b.n	800497e <HAL_TIM_PWM_Start+0xaa>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004974:	e003      	b.n	800497e <HAL_TIM_PWM_Start+0xaa>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fc8a 	bl	80052a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_TIM_PWM_Start+0x14c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_TIM_PWM_Start+0x14c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x10e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b8:	d013      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x10e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a19      	ldr	r2, [pc, #100]	@ (8004a24 <HAL_TIM_PWM_Start+0x150>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x10e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <HAL_TIM_PWM_Start+0x154>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x10e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a16      	ldr	r2, [pc, #88]	@ (8004a2c <HAL_TIM_PWM_Start+0x158>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x10e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <HAL_TIM_PWM_Start+0x15c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d111      	bne.n	8004a06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b06      	cmp	r3, #6
 80049f2:	d010      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a04:	e007      	b.n	8004a16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40014000 	.word	0x40014000

08004a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e0ae      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	f200 809f 	bhi.w	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a62:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004ba1 	.word	0x08004ba1
 8004a70:	08004ba1 	.word	0x08004ba1
 8004a74:	08004ba1 	.word	0x08004ba1
 8004a78:	08004add 	.word	0x08004add
 8004a7c:	08004ba1 	.word	0x08004ba1
 8004a80:	08004ba1 	.word	0x08004ba1
 8004a84:	08004ba1 	.word	0x08004ba1
 8004a88:	08004b1f 	.word	0x08004b1f
 8004a8c:	08004ba1 	.word	0x08004ba1
 8004a90:	08004ba1 	.word	0x08004ba1
 8004a94:	08004ba1 	.word	0x08004ba1
 8004a98:	08004b5f 	.word	0x08004b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f9d6 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0208 	orr.w	r2, r2, #8
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	619a      	str	r2, [r3, #24]
      break;
 8004ada:	e064      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa1c 	bl	8004f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	619a      	str	r2, [r3, #24]
      break;
 8004b1c:	e043      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fa67 	bl	8004ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0208 	orr.w	r2, r2, #8
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0204 	bic.w	r2, r2, #4
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
      break;
 8004b5c:	e023      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fab1 	bl	80050cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0b4      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x186>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c0c:	d03e      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0xd4>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c12:	f200 8087 	bhi.w	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1a:	f000 8086 	beq.w	8004d2a <HAL_TIM_ConfigClockSource+0x172>
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c22:	d87f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b70      	cmp	r3, #112	@ 0x70
 8004c26:	d01a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xa6>
 8004c28:	2b70      	cmp	r3, #112	@ 0x70
 8004c2a:	d87b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b60      	cmp	r3, #96	@ 0x60
 8004c2e:	d050      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c30:	2b60      	cmp	r3, #96	@ 0x60
 8004c32:	d877      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b50      	cmp	r3, #80	@ 0x50
 8004c36:	d03c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c38:	2b50      	cmp	r3, #80	@ 0x50
 8004c3a:	d873      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d058      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d86f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d064      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b30      	cmp	r3, #48	@ 0x30
 8004c4a:	d86b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d060      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d867      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05c      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d05a      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	e062      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c6e:	f000 faf7 	bl	8005260 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
      break;
 8004c8a:	e04f      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c9c:	f000 fae0 	bl	8005260 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e03c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fa54 	bl	800516c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2150      	movs	r1, #80	@ 0x50
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 faad 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e02c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 fa73 	bl	80051ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2160      	movs	r1, #96	@ 0x60
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fa9d 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e01c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fa34 	bl	800516c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2140      	movs	r1, #64	@ 0x40
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fa8d 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004d10:	e00c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 fa84 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004d22:	e003      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a37      	ldr	r2, [pc, #220]	@ (8004e38 <TIM_Base_SetConfig+0xf0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <TIM_Base_SetConfig+0xf4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <TIM_Base_SetConfig+0xf8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a32      	ldr	r2, [pc, #200]	@ (8004e44 <TIM_Base_SetConfig+0xfc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a28      	ldr	r2, [pc, #160]	@ (8004e38 <TIM_Base_SetConfig+0xf0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da0:	d017      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a25      	ldr	r2, [pc, #148]	@ (8004e3c <TIM_Base_SetConfig+0xf4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a24      	ldr	r2, [pc, #144]	@ (8004e40 <TIM_Base_SetConfig+0xf8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <TIM_Base_SetConfig+0xfc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <TIM_Base_SetConfig+0x100>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <TIM_Base_SetConfig+0x104>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	@ (8004e50 <TIM_Base_SetConfig+0x108>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a0c      	ldr	r2, [pc, #48]	@ (8004e38 <TIM_Base_SetConfig+0xf0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d103      	bne.n	8004e12 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f023 0201 	bic.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0302 	bic.w	r3, r3, #2
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004f1c <TIM_OC1_SetConfig+0xc8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10c      	bne.n	8004eca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0308 	bic.w	r3, r3, #8
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	@ (8004f1c <TIM_OC1_SetConfig+0xc8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d111      	bne.n	8004ef6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40010000 	.word	0x40010000

08004f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f023 0210 	bic.w	r2, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0320 	bic.w	r3, r3, #32
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff4 <TIM_OC2_SetConfig+0xd4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10d      	bne.n	8004f9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ff4 <TIM_OC2_SetConfig+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d113      	bne.n	8004fcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000

08004ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <TIM_OC3_SetConfig+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10d      	bne.n	8005072 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a14      	ldr	r2, [pc, #80]	@ (80050c8 <TIM_OC3_SetConfig+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d113      	bne.n	80050a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010000 	.word	0x40010000

080050cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a10      	ldr	r2, [pc, #64]	@ (8005168 <TIM_OC4_SetConfig+0x9c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d109      	bne.n	8005140 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000

0800516c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 030a 	bic.w	r3, r3, #10
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f023 0210 	bic.w	r2, r3, #16
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	f043 0307 	orr.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800527a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	431a      	orrs	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2201      	movs	r2, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005300:	2302      	movs	r3, #2
 8005302:	e050      	b.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d018      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d013      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00e      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d10c      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4313      	orrs	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40000c00 	.word	0x40000c00
 80053c4:	40014000 	.word	0x40014000

080053c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e03d      	b.n	8005460 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e042      	b.n	8005504 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fc fc30 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2224      	movs	r2, #36	@ 0x24
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fc99 	bl	8005de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0ba      	sub	sp, #232	@ 0xe8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005538:	2300      	movs	r3, #0
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800554a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_UART_IRQHandler+0x66>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb7e 	bl	8005c6c <UART_Receive_IT>
      return;
 8005570:	e273      	b.n	8005a5a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80de 	beq.w	8005738 <HAL_UART_IRQHandler+0x22c>
 800557c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800558c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80d1 	beq.w	8005738 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_UART_IRQHandler+0xae>
 80055a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	f043 0201 	orr.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xd2>
 80055c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d6:	f043 0202 	orr.w	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xf6>
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d011      	beq.n	8005632 <HAL_UART_IRQHandler+0x126>
 800560e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800561a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 820a 	beq.w	8005a50 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_UART_IRQHandler+0x14e>
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fb09 	bl	8005c6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b40      	cmp	r3, #64	@ 0x40
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <HAL_UART_IRQHandler+0x17a>
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04f      	beq.n	8005726 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa14 	bl	8005ab4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005696:	2b40      	cmp	r3, #64	@ 0x40
 8005698:	d141      	bne.n	800571e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1d9      	bne.n	800569a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d013      	beq.n	8005716 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f2:	4a8a      	ldr	r2, [pc, #552]	@ (800591c <HAL_UART_IRQHandler+0x410>)
 80056f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fd fe20 	bl	8003340 <HAL_DMA_Abort_IT>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e00e      	b.n	8005734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9b6 	bl	8005a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	e00a      	b.n	8005734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9b2 	bl	8005a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	e006      	b.n	8005734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9ae 	bl	8005a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005732:	e18d      	b.n	8005a50 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	bf00      	nop
    return;
 8005736:	e18b      	b.n	8005a50 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 8167 	bne.w	8005a10 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8160 	beq.w	8005a10 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8159 	beq.w	8005a10 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577e:	2b40      	cmp	r3, #64	@ 0x40
 8005780:	f040 80ce 	bne.w	8005920 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a9 	beq.w	80058ec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800579e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f080 80a2 	bcs.w	80058ec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ba:	f000 8088 	beq.w	80058ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1d9      	bne.n	80057be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3314      	adds	r3, #20
 8005810:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800581a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800582e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005832:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005836:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e1      	bne.n	800580a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800585c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800586a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800586c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005870:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e3      	bne.n	8005846 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800589c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800589e:	f023 0310 	bic.w	r3, r3, #16
 80058a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e3      	bne.n	800588c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd fcc9 	bl	8003260 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8d9 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058ea:	e0b3      	b.n	8005a54 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f4:	429a      	cmp	r2, r3
 80058f6:	f040 80ad 	bne.w	8005a54 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005904:	f040 80a6 	bne.w	8005a54 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8c1 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
      return;
 800591a:	e09b      	b.n	8005a54 <HAL_UART_IRQHandler+0x548>
 800591c:	08005b7b 	.word	0x08005b7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005928:	b29b      	uxth	r3, r3
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 808e 	beq.w	8005a58 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800593c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8089 	beq.w	8005a58 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800595c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800596a:	647a      	str	r2, [r7, #68]	@ 0x44
 800596c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005970:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e3      	bne.n	8005946 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3314      	adds	r3, #20
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	623b      	str	r3, [r7, #32]
   return(result);
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3314      	adds	r3, #20
 800599e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e3      	bne.n	800597e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0310 	bic.w	r3, r3, #16
 80059da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059e8:	61fa      	str	r2, [r7, #28]
 80059ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	69b9      	ldr	r1, [r7, #24]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	617b      	str	r3, [r7, #20]
   return(result);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e3      	bne.n	80059c4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f847 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a0e:	e023      	b.n	8005a58 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d009      	beq.n	8005a30 <HAL_UART_IRQHandler+0x524>
 8005a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8b7 	bl	8005b9c <UART_Transmit_IT>
    return;
 8005a2e:	e014      	b.n	8005a5a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00e      	beq.n	8005a5a <HAL_UART_IRQHandler+0x54e>
 8005a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f8f7 	bl	8005c3c <UART_EndTransmit_IT>
    return;
 8005a4e:	e004      	b.n	8005a5a <HAL_UART_IRQHandler+0x54e>
    return;
 8005a50:	bf00      	nop
 8005a52:	e002      	b.n	8005a5a <HAL_UART_IRQHandler+0x54e>
      return;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <HAL_UART_IRQHandler+0x54e>
      return;
 8005a58:	bf00      	nop
  }
}
 8005a5a:	37e8      	adds	r7, #232	@ 0xe8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b095      	sub	sp, #84	@ 0x54
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005adc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d119      	bne.n	8005b60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f023 0310 	bic.w	r3, r3, #16
 8005b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4c:	61ba      	str	r2, [r7, #24]
 8005b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b6e:	bf00      	nop
 8005b70:	3754      	adds	r7, #84	@ 0x54
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff ff7a 	bl	8005a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b21      	cmp	r3, #33	@ 0x21
 8005bae:	d13e      	bne.n	8005c2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb8:	d114      	bne.n	8005be4 <UART_Transmit_IT+0x48>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]
 8005be2:	e008      	b.n	8005bf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6211      	str	r1, [r2, #32]
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4619      	mov	r1, r3
 8005c04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e000      	b.n	8005c30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff feff 	bl	8005a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08c      	sub	sp, #48	@ 0x30
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b22      	cmp	r3, #34	@ 0x22
 8005c86:	f040 80aa 	bne.w	8005dde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c92:	d115      	bne.n	8005cc0 <UART_Receive_IT+0x54>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cbe:	e024      	b.n	8005d0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cce:	d007      	beq.n	8005ce0 <UART_Receive_IT+0x74>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <UART_Receive_IT+0x82>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e008      	b.n	8005d00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4619      	mov	r1, r3
 8005d18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d15d      	bne.n	8005dda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0220 	bic.w	r2, r2, #32
 8005d2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d135      	bne.n	8005dd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f023 0310 	bic.w	r3, r3, #16
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8a:	623a      	str	r2, [r7, #32]
 8005d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	69f9      	ldr	r1, [r7, #28]
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e5      	bne.n	8005d6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d10a      	bne.n	8005dc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe67 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
 8005dce:	e002      	b.n	8005dd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fe4f 	bl	8005a74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e002      	b.n	8005de0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e000      	b.n	8005de0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
  }
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3730      	adds	r7, #48	@ 0x30
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b0c0      	sub	sp, #256	@ 0x100
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	68d9      	ldr	r1, [r3, #12]
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	ea40 0301 	orr.w	r3, r0, r1
 8005e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e40:	f021 010c 	bic.w	r1, r1, #12
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	6999      	ldr	r1, [r3, #24]
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	ea40 0301 	orr.w	r3, r0, r1
 8005e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b8f      	ldr	r3, [pc, #572]	@ (80060b4 <UART_SetConfig+0x2cc>)
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d005      	beq.n	8005e88 <UART_SetConfig+0xa0>
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b8d      	ldr	r3, [pc, #564]	@ (80060b8 <UART_SetConfig+0x2d0>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d104      	bne.n	8005e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e88:	f7fe fc0c 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8005e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e90:	e003      	b.n	8005e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e92:	f7fe fbf3 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8005e96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea4:	f040 810c 	bne.w	80060c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eba:	4622      	mov	r2, r4
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	1891      	adds	r1, r2, r2
 8005ec0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ec2:	415b      	adcs	r3, r3
 8005ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005eca:	4621      	mov	r1, r4
 8005ecc:	eb12 0801 	adds.w	r8, r2, r1
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	eb43 0901 	adc.w	r9, r3, r1
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eea:	4690      	mov	r8, r2
 8005eec:	4699      	mov	r9, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	eb18 0303 	adds.w	r3, r8, r3
 8005ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	462b      	mov	r3, r5
 8005efa:	eb49 0303 	adc.w	r3, r9, r3
 8005efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f16:	460b      	mov	r3, r1
 8005f18:	18db      	adds	r3, r3, r3
 8005f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	eb42 0303 	adc.w	r3, r2, r3
 8005f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f2c:	f7fa fdd2 	bl	8000ad4 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b61      	ldr	r3, [pc, #388]	@ (80060bc <UART_SetConfig+0x2d4>)
 8005f36:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	011c      	lsls	r4, r3, #4
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f60:	4641      	mov	r1, r8
 8005f62:	eb12 0a01 	adds.w	sl, r2, r1
 8005f66:	4649      	mov	r1, r9
 8005f68:	eb43 0b01 	adc.w	fp, r3, r1
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f80:	4692      	mov	sl, r2
 8005f82:	469b      	mov	fp, r3
 8005f84:	4643      	mov	r3, r8
 8005f86:	eb1a 0303 	adds.w	r3, sl, r3
 8005f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	eb4b 0303 	adc.w	r3, fp, r3
 8005f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fac:	460b      	mov	r3, r1
 8005fae:	18db      	adds	r3, r3, r3
 8005fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fc2:	f7fa fd87 	bl	8000ad4 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80060bc <UART_SetConfig+0x2d4>)
 8005fce:	fba3 2301 	umull	r2, r3, r3, r1
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	2264      	movs	r2, #100	@ 0x64
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	1acb      	subs	r3, r1, r3
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fe2:	4b36      	ldr	r3, [pc, #216]	@ (80060bc <UART_SetConfig+0x2d4>)
 8005fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ff0:	441c      	add	r4, r3
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800600c:	415b      	adcs	r3, r3
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006014:	4641      	mov	r1, r8
 8006016:	1851      	adds	r1, r2, r1
 8006018:	6339      	str	r1, [r7, #48]	@ 0x30
 800601a:	4649      	mov	r1, r9
 800601c:	414b      	adcs	r3, r1
 800601e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800602c:	4659      	mov	r1, fp
 800602e:	00cb      	lsls	r3, r1, #3
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006036:	4651      	mov	r1, sl
 8006038:	00ca      	lsls	r2, r1, #3
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	4603      	mov	r3, r0
 8006040:	4642      	mov	r2, r8
 8006042:	189b      	adds	r3, r3, r2
 8006044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006048:	464b      	mov	r3, r9
 800604a:	460a      	mov	r2, r1
 800604c:	eb42 0303 	adc.w	r3, r2, r3
 8006050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006060:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006068:	460b      	mov	r3, r1
 800606a:	18db      	adds	r3, r3, r3
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800606e:	4613      	mov	r3, r2
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800607a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800607e:	f7fa fd29 	bl	8000ad4 <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <UART_SetConfig+0x2d4>)
 8006088:	fba3 1302 	umull	r1, r3, r3, r2
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	2164      	movs	r1, #100	@ 0x64
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	3332      	adds	r3, #50	@ 0x32
 800609a:	4a08      	ldr	r2, [pc, #32]	@ (80060bc <UART_SetConfig+0x2d4>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f003 0207 	and.w	r2, r3, #7
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4422      	add	r2, r4
 80060ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060b0:	e106      	b.n	80062c0 <UART_SetConfig+0x4d8>
 80060b2:	bf00      	nop
 80060b4:	40011000 	.word	0x40011000
 80060b8:	40011400 	.word	0x40011400
 80060bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060d2:	4642      	mov	r2, r8
 80060d4:	464b      	mov	r3, r9
 80060d6:	1891      	adds	r1, r2, r2
 80060d8:	6239      	str	r1, [r7, #32]
 80060da:	415b      	adcs	r3, r3
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e2:	4641      	mov	r1, r8
 80060e4:	1854      	adds	r4, r2, r1
 80060e6:	4649      	mov	r1, r9
 80060e8:	eb43 0501 	adc.w	r5, r3, r1
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	00eb      	lsls	r3, r5, #3
 80060f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fa:	00e2      	lsls	r2, r4, #3
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	4643      	mov	r3, r8
 8006102:	18e3      	adds	r3, r4, r3
 8006104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006108:	464b      	mov	r3, r9
 800610a:	eb45 0303 	adc.w	r3, r5, r3
 800610e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800611e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800612e:	4629      	mov	r1, r5
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	4621      	mov	r1, r4
 8006134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006138:	4621      	mov	r1, r4
 800613a:	008a      	lsls	r2, r1, #2
 800613c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006140:	f7fa fcc8 	bl	8000ad4 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b60      	ldr	r3, [pc, #384]	@ (80062cc <UART_SetConfig+0x4e4>)
 800614a:	fba3 2302 	umull	r2, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	011c      	lsls	r4, r3, #4
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800615c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	61b9      	str	r1, [r7, #24]
 800616c:	415b      	adcs	r3, r3
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006174:	4641      	mov	r1, r8
 8006176:	1851      	adds	r1, r2, r1
 8006178:	6139      	str	r1, [r7, #16]
 800617a:	4649      	mov	r1, r9
 800617c:	414b      	adcs	r3, r1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800618c:	4659      	mov	r1, fp
 800618e:	00cb      	lsls	r3, r1, #3
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006196:	4651      	mov	r1, sl
 8006198:	00ca      	lsls	r2, r1, #3
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	4642      	mov	r2, r8
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a8:	464b      	mov	r3, r9
 80061aa:	460a      	mov	r2, r1
 80061ac:	eb42 0303 	adc.w	r3, r2, r3
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061cc:	4649      	mov	r1, r9
 80061ce:	008b      	lsls	r3, r1, #2
 80061d0:	4641      	mov	r1, r8
 80061d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d6:	4641      	mov	r1, r8
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061de:	f7fa fc79 	bl	8000ad4 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	4b38      	ldr	r3, [pc, #224]	@ (80062cc <UART_SetConfig+0x4e4>)
 80061ea:	fba3 2301 	umull	r2, r3, r3, r1
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	2264      	movs	r2, #100	@ 0x64
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	1acb      	subs	r3, r1, r3
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	3332      	adds	r3, #50	@ 0x32
 80061fc:	4a33      	ldr	r2, [pc, #204]	@ (80062cc <UART_SetConfig+0x4e4>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006208:	441c      	add	r4, r3
 800620a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620e:	2200      	movs	r2, #0
 8006210:	673b      	str	r3, [r7, #112]	@ 0x70
 8006212:	677a      	str	r2, [r7, #116]	@ 0x74
 8006214:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	415b      	adcs	r3, r3
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006228:	4641      	mov	r1, r8
 800622a:	1851      	adds	r1, r2, r1
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	4649      	mov	r1, r9
 8006230:	414b      	adcs	r3, r1
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006240:	4659      	mov	r1, fp
 8006242:	00cb      	lsls	r3, r1, #3
 8006244:	4651      	mov	r1, sl
 8006246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624a:	4651      	mov	r1, sl
 800624c:	00ca      	lsls	r2, r1, #3
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	4603      	mov	r3, r0
 8006254:	4642      	mov	r2, r8
 8006256:	189b      	adds	r3, r3, r2
 8006258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800625a:	464b      	mov	r3, r9
 800625c:	460a      	mov	r2, r1
 800625e:	eb42 0303 	adc.w	r3, r2, r3
 8006262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	663b      	str	r3, [r7, #96]	@ 0x60
 800626e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800627c:	4649      	mov	r1, r9
 800627e:	008b      	lsls	r3, r1, #2
 8006280:	4641      	mov	r1, r8
 8006282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006286:	4641      	mov	r1, r8
 8006288:	008a      	lsls	r2, r1, #2
 800628a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800628e:	f7fa fc21 	bl	8000ad4 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4b0d      	ldr	r3, [pc, #52]	@ (80062cc <UART_SetConfig+0x4e4>)
 8006298:	fba3 1302 	umull	r1, r3, r3, r2
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	2164      	movs	r1, #100	@ 0x64
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	3332      	adds	r3, #50	@ 0x32
 80062aa:	4a08      	ldr	r2, [pc, #32]	@ (80062cc <UART_SetConfig+0x4e4>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f003 020f 	and.w	r2, r3, #15
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4422      	add	r2, r4
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062c6:	46bd      	mov	sp, r7
 80062c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062cc:	51eb851f 	.word	0x51eb851f

080062d0 <memset>:
 80062d0:	4402      	add	r2, r0
 80062d2:	4603      	mov	r3, r0
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d100      	bne.n	80062da <memset+0xa>
 80062d8:	4770      	bx	lr
 80062da:	f803 1b01 	strb.w	r1, [r3], #1
 80062de:	e7f9      	b.n	80062d4 <memset+0x4>

080062e0 <__libc_init_array>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006318 <__libc_init_array+0x38>)
 80062e4:	4c0d      	ldr	r4, [pc, #52]	@ (800631c <__libc_init_array+0x3c>)
 80062e6:	1b64      	subs	r4, r4, r5
 80062e8:	10a4      	asrs	r4, r4, #2
 80062ea:	2600      	movs	r6, #0
 80062ec:	42a6      	cmp	r6, r4
 80062ee:	d109      	bne.n	8006304 <__libc_init_array+0x24>
 80062f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006320 <__libc_init_array+0x40>)
 80062f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006324 <__libc_init_array+0x44>)
 80062f4:	f000 f894 	bl	8006420 <_init>
 80062f8:	1b64      	subs	r4, r4, r5
 80062fa:	10a4      	asrs	r4, r4, #2
 80062fc:	2600      	movs	r6, #0
 80062fe:	42a6      	cmp	r6, r4
 8006300:	d105      	bne.n	800630e <__libc_init_array+0x2e>
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	f855 3b04 	ldr.w	r3, [r5], #4
 8006308:	4798      	blx	r3
 800630a:	3601      	adds	r6, #1
 800630c:	e7ee      	b.n	80062ec <__libc_init_array+0xc>
 800630e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006312:	4798      	blx	r3
 8006314:	3601      	adds	r6, #1
 8006316:	e7f2      	b.n	80062fe <__libc_init_array+0x1e>
 8006318:	08006460 	.word	0x08006460
 800631c:	08006460 	.word	0x08006460
 8006320:	08006460 	.word	0x08006460
 8006324:	08006464 	.word	0x08006464

08006328 <floor>:
 8006328:	ec51 0b10 	vmov	r0, r1, d0
 800632c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006334:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006338:	2e13      	cmp	r6, #19
 800633a:	460c      	mov	r4, r1
 800633c:	4605      	mov	r5, r0
 800633e:	4680      	mov	r8, r0
 8006340:	dc34      	bgt.n	80063ac <floor+0x84>
 8006342:	2e00      	cmp	r6, #0
 8006344:	da17      	bge.n	8006376 <floor+0x4e>
 8006346:	a332      	add	r3, pc, #200	@ (adr r3, 8006410 <floor+0xe8>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff4a 	bl	80001e4 <__adddf3>
 8006350:	2200      	movs	r2, #0
 8006352:	2300      	movs	r3, #0
 8006354:	f7fa fb8c 	bl	8000a70 <__aeabi_dcmpgt>
 8006358:	b150      	cbz	r0, 8006370 <floor+0x48>
 800635a:	2c00      	cmp	r4, #0
 800635c:	da55      	bge.n	800640a <floor+0xe2>
 800635e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006362:	432c      	orrs	r4, r5
 8006364:	2500      	movs	r5, #0
 8006366:	42ac      	cmp	r4, r5
 8006368:	4c2b      	ldr	r4, [pc, #172]	@ (8006418 <floor+0xf0>)
 800636a:	bf08      	it	eq
 800636c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	e023      	b.n	80063be <floor+0x96>
 8006376:	4f29      	ldr	r7, [pc, #164]	@ (800641c <floor+0xf4>)
 8006378:	4137      	asrs	r7, r6
 800637a:	ea01 0307 	and.w	r3, r1, r7
 800637e:	4303      	orrs	r3, r0
 8006380:	d01d      	beq.n	80063be <floor+0x96>
 8006382:	a323      	add	r3, pc, #140	@ (adr r3, 8006410 <floor+0xe8>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7f9 ff2c 	bl	80001e4 <__adddf3>
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	f7fa fb6e 	bl	8000a70 <__aeabi_dcmpgt>
 8006394:	2800      	cmp	r0, #0
 8006396:	d0eb      	beq.n	8006370 <floor+0x48>
 8006398:	2c00      	cmp	r4, #0
 800639a:	bfbe      	ittt	lt
 800639c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80063a0:	4133      	asrlt	r3, r6
 80063a2:	18e4      	addlt	r4, r4, r3
 80063a4:	ea24 0407 	bic.w	r4, r4, r7
 80063a8:	2500      	movs	r5, #0
 80063aa:	e7e1      	b.n	8006370 <floor+0x48>
 80063ac:	2e33      	cmp	r6, #51	@ 0x33
 80063ae:	dd0a      	ble.n	80063c6 <floor+0x9e>
 80063b0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80063b4:	d103      	bne.n	80063be <floor+0x96>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	f7f9 ff13 	bl	80001e4 <__adddf3>
 80063be:	ec41 0b10 	vmov	d0, r0, r1
 80063c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80063ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80063ce:	40df      	lsrs	r7, r3
 80063d0:	4207      	tst	r7, r0
 80063d2:	d0f4      	beq.n	80063be <floor+0x96>
 80063d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006410 <floor+0xe8>)
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f7f9 ff03 	bl	80001e4 <__adddf3>
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	f7fa fb45 	bl	8000a70 <__aeabi_dcmpgt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d0c2      	beq.n	8006370 <floor+0x48>
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	da0a      	bge.n	8006404 <floor+0xdc>
 80063ee:	2e14      	cmp	r6, #20
 80063f0:	d101      	bne.n	80063f6 <floor+0xce>
 80063f2:	3401      	adds	r4, #1
 80063f4:	e006      	b.n	8006404 <floor+0xdc>
 80063f6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80063fa:	2301      	movs	r3, #1
 80063fc:	40b3      	lsls	r3, r6
 80063fe:	441d      	add	r5, r3
 8006400:	4545      	cmp	r5, r8
 8006402:	d3f6      	bcc.n	80063f2 <floor+0xca>
 8006404:	ea25 0507 	bic.w	r5, r5, r7
 8006408:	e7b2      	b.n	8006370 <floor+0x48>
 800640a:	2500      	movs	r5, #0
 800640c:	462c      	mov	r4, r5
 800640e:	e7af      	b.n	8006370 <floor+0x48>
 8006410:	8800759c 	.word	0x8800759c
 8006414:	7e37e43c 	.word	0x7e37e43c
 8006418:	bff00000 	.word	0xbff00000
 800641c:	000fffff 	.word	0x000fffff

08006420 <_init>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

0800642c <_fini>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr
