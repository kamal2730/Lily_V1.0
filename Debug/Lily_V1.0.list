
Lily_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080064b8  080064b8  000074b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d8  080064d8  000080c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e0  080064e0  000080c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  080064e8  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200000c8  080065ac  000080c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080065ac  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cb0  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023cf  00000000  00000000  00019da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0001d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e92  00000000  00000000  0001df8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138fe  00000000  00000000  00035e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cab9  00000000  00000000  0004971a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e61d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  000e6218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c8 	.word	0x200000c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080064a0 	.word	0x080064a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000cc 	.word	0x200000cc
 80001d4:	080064a0 	.word	0x080064a0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ae8:	f000 b988 	b.w	8000dfc <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	468e      	mov	lr, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	4688      	mov	r8, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d14a      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4617      	mov	r7, r2
 8000b18:	d962      	bls.n	8000be0 <__udivmoddi4+0xdc>
 8000b1a:	fab2 f682 	clz	r6, r2
 8000b1e:	b14e      	cbz	r6, 8000b34 <__udivmoddi4+0x30>
 8000b20:	f1c6 0320 	rsb	r3, r6, #32
 8000b24:	fa01 f806 	lsl.w	r8, r1, r6
 8000b28:	fa20 f303 	lsr.w	r3, r0, r3
 8000b2c:	40b7      	lsls	r7, r6
 8000b2e:	ea43 0808 	orr.w	r8, r3, r8
 8000b32:	40b4      	lsls	r4, r6
 8000b34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b38:	fa1f fc87 	uxth.w	ip, r7
 8000b3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b40:	0c23      	lsrs	r3, r4, #16
 8000b42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d909      	bls.n	8000b66 <__udivmoddi4+0x62>
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b58:	f080 80ea 	bcs.w	8000d30 <__udivmoddi4+0x22c>
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	f240 80e7 	bls.w	8000d30 <__udivmoddi4+0x22c>
 8000b62:	3902      	subs	r1, #2
 8000b64:	443b      	add	r3, r7
 8000b66:	1a9a      	subs	r2, r3, r2
 8000b68:	b2a3      	uxth	r3, r4
 8000b6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b7a:	459c      	cmp	ip, r3
 8000b7c:	d909      	bls.n	8000b92 <__udivmoddi4+0x8e>
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b84:	f080 80d6 	bcs.w	8000d34 <__udivmoddi4+0x230>
 8000b88:	459c      	cmp	ip, r3
 8000b8a:	f240 80d3 	bls.w	8000d34 <__udivmoddi4+0x230>
 8000b8e:	443b      	add	r3, r7
 8000b90:	3802      	subs	r0, #2
 8000b92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b96:	eba3 030c 	sub.w	r3, r3, ip
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	b11d      	cbz	r5, 8000ba6 <__udivmoddi4+0xa2>
 8000b9e:	40f3      	lsrs	r3, r6
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d905      	bls.n	8000bba <__udivmoddi4+0xb6>
 8000bae:	b10d      	cbz	r5, 8000bb4 <__udivmoddi4+0xb0>
 8000bb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	e7f5      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000bba:	fab3 f183 	clz	r1, r3
 8000bbe:	2900      	cmp	r1, #0
 8000bc0:	d146      	bne.n	8000c50 <__udivmoddi4+0x14c>
 8000bc2:	4573      	cmp	r3, lr
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xc8>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 8105 	bhi.w	8000dd6 <__udivmoddi4+0x2d2>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4690      	mov	r8, r2
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0e5      	beq.n	8000ba6 <__udivmoddi4+0xa2>
 8000bda:	e9c5 4800 	strd	r4, r8, [r5]
 8000bde:	e7e2      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f000 8090 	beq.w	8000d06 <__udivmoddi4+0x202>
 8000be6:	fab2 f682 	clz	r6, r2
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f040 80a4 	bne.w	8000d38 <__udivmoddi4+0x234>
 8000bf0:	1a8a      	subs	r2, r1, r2
 8000bf2:	0c03      	lsrs	r3, r0, #16
 8000bf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf8:	b280      	uxth	r0, r0
 8000bfa:	b2bc      	uxth	r4, r7
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c02:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <__udivmoddi4+0x11e>
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x11c>
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	f200 80e0 	bhi.w	8000de0 <__udivmoddi4+0x2dc>
 8000c20:	46c4      	mov	ip, r8
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c28:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c30:	fb02 f404 	mul.w	r4, r2, r4
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x144>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x142>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f200 80ca 	bhi.w	8000dda <__udivmoddi4+0x2d6>
 8000c46:	4602      	mov	r2, r0
 8000c48:	1b1b      	subs	r3, r3, r4
 8000c4a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c4e:	e7a5      	b.n	8000b9c <__udivmoddi4+0x98>
 8000c50:	f1c1 0620 	rsb	r6, r1, #32
 8000c54:	408b      	lsls	r3, r1
 8000c56:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5a:	431f      	orrs	r7, r3
 8000c5c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c60:	fa20 f306 	lsr.w	r3, r0, r6
 8000c64:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c68:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c6c:	4323      	orrs	r3, r4
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	fa1f fc87 	uxth.w	ip, r7
 8000c76:	fbbe f0f9 	udiv	r0, lr, r9
 8000c7a:	0c1c      	lsrs	r4, r3, #16
 8000c7c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c84:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x1a0>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c96:	f080 809c 	bcs.w	8000dd2 <__udivmoddi4+0x2ce>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8099 	bls.w	8000dd2 <__udivmoddi4+0x2ce>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	eba4 040e 	sub.w	r4, r4, lr
 8000ca8:	fa1f fe83 	uxth.w	lr, r3
 8000cac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cb8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cbc:	45a4      	cmp	ip, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x1ce>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cc6:	f080 8082 	bcs.w	8000dce <__udivmoddi4+0x2ca>
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d97f      	bls.n	8000dce <__udivmoddi4+0x2ca>
 8000cce:	3b02      	subs	r3, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cde:	4564      	cmp	r4, ip
 8000ce0:	4673      	mov	r3, lr
 8000ce2:	46e1      	mov	r9, ip
 8000ce4:	d362      	bcc.n	8000dac <__udivmoddi4+0x2a8>
 8000ce6:	d05f      	beq.n	8000da8 <__udivmoddi4+0x2a4>
 8000ce8:	b15d      	cbz	r5, 8000d02 <__udivmoddi4+0x1fe>
 8000cea:	ebb8 0203 	subs.w	r2, r8, r3
 8000cee:	eb64 0409 	sbc.w	r4, r4, r9
 8000cf2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cfa:	431e      	orrs	r6, r3
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000d02:	2100      	movs	r1, #0
 8000d04:	e74f      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000d06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d0a:	0c01      	lsrs	r1, r0, #16
 8000d0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d10:	b280      	uxth	r0, r0
 8000d12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d16:	463b      	mov	r3, r7
 8000d18:	4638      	mov	r0, r7
 8000d1a:	463c      	mov	r4, r7
 8000d1c:	46b8      	mov	r8, r7
 8000d1e:	46be      	mov	lr, r7
 8000d20:	2620      	movs	r6, #32
 8000d22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d26:	eba2 0208 	sub.w	r2, r2, r8
 8000d2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d2e:	e766      	b.n	8000bfe <__udivmoddi4+0xfa>
 8000d30:	4601      	mov	r1, r0
 8000d32:	e718      	b.n	8000b66 <__udivmoddi4+0x62>
 8000d34:	4610      	mov	r0, r2
 8000d36:	e72c      	b.n	8000b92 <__udivmoddi4+0x8e>
 8000d38:	f1c6 0220 	rsb	r2, r6, #32
 8000d3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	40b1      	lsls	r1, r6
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d52:	b2bc      	uxth	r4, r7
 8000d54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d58:	0c11      	lsrs	r1, r2, #16
 8000d5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5e:	fb08 f904 	mul.w	r9, r8, r4
 8000d62:	40b0      	lsls	r0, r6
 8000d64:	4589      	cmp	r9, r1
 8000d66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d6a:	b280      	uxth	r0, r0
 8000d6c:	d93e      	bls.n	8000dec <__udivmoddi4+0x2e8>
 8000d6e:	1879      	adds	r1, r7, r1
 8000d70:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d74:	d201      	bcs.n	8000d7a <__udivmoddi4+0x276>
 8000d76:	4589      	cmp	r9, r1
 8000d78:	d81f      	bhi.n	8000dba <__udivmoddi4+0x2b6>
 8000d7a:	eba1 0109 	sub.w	r1, r1, r9
 8000d7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d82:	fb09 f804 	mul.w	r8, r9, r4
 8000d86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d90:	4542      	cmp	r2, r8
 8000d92:	d229      	bcs.n	8000de8 <__udivmoddi4+0x2e4>
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d9a:	d2c4      	bcs.n	8000d26 <__udivmoddi4+0x222>
 8000d9c:	4542      	cmp	r2, r8
 8000d9e:	d2c2      	bcs.n	8000d26 <__udivmoddi4+0x222>
 8000da0:	f1a9 0102 	sub.w	r1, r9, #2
 8000da4:	443a      	add	r2, r7
 8000da6:	e7be      	b.n	8000d26 <__udivmoddi4+0x222>
 8000da8:	45f0      	cmp	r8, lr
 8000daa:	d29d      	bcs.n	8000ce8 <__udivmoddi4+0x1e4>
 8000dac:	ebbe 0302 	subs.w	r3, lr, r2
 8000db0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000db4:	3801      	subs	r0, #1
 8000db6:	46e1      	mov	r9, ip
 8000db8:	e796      	b.n	8000ce8 <__udivmoddi4+0x1e4>
 8000dba:	eba7 0909 	sub.w	r9, r7, r9
 8000dbe:	4449      	add	r1, r9
 8000dc0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dc4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc8:	fb09 f804 	mul.w	r8, r9, r4
 8000dcc:	e7db      	b.n	8000d86 <__udivmoddi4+0x282>
 8000dce:	4673      	mov	r3, lr
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1ce>
 8000dd2:	4650      	mov	r0, sl
 8000dd4:	e766      	b.n	8000ca4 <__udivmoddi4+0x1a0>
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e6fd      	b.n	8000bd6 <__udivmoddi4+0xd2>
 8000dda:	443b      	add	r3, r7
 8000ddc:	3a02      	subs	r2, #2
 8000dde:	e733      	b.n	8000c48 <__udivmoddi4+0x144>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	e71c      	b.n	8000c22 <__udivmoddi4+0x11e>
 8000de8:	4649      	mov	r1, r9
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x222>
 8000dec:	eba1 0109 	sub.w	r1, r1, r9
 8000df0:	46c4      	mov	ip, r8
 8000df2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df6:	fb09 f804 	mul.w	r8, r9, r4
 8000dfa:	e7c4      	b.n	8000d86 <__udivmoddi4+0x282>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <delay_us>:
void setMotorSpeed(uint8_t motor, int32_t speed);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t us){
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <delay_us+0x30>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us);
 8000e10:	bf00      	nop
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <delay_us+0x30>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d8f7      	bhi.n	8000e12 <delay_us+0x12>
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000228 	.word	0x20000228

08000e34 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <HAL_ADC_ConvCpltCallback+0x18>
		ADC_DONE = 1;
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_ADC_ConvCpltCallback+0x28>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
	}

}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	2000031c 	.word	0x2000031c

08000e60 <ReadSensors>:
void ReadSensors(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
	for(SensorIndex=0;SensorIndex<9;SensorIndex++){
 8000e66:	4b50      	ldr	r3, [pc, #320]	@ (8000fa8 <ReadSensors+0x148>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e092      	b.n	8000f94 <ReadSensors+0x134>
		ADC_ChannelConfTypeDef ADC_Config;
		ADC_Config.Channel=SensorAdcChannel[SensorIndex];
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa8 <ReadSensors+0x148>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a4e      	ldr	r2, [pc, #312]	@ (8000fac <ReadSensors+0x14c>)
 8000e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e78:	603b      	str	r3, [r7, #0]
		ADC_Config.Rank=1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
		ADC_Config.SamplingTime=ADC_SAMPLETIME_480CYCLES;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc1, &ADC_Config);
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	484a      	ldr	r0, [pc, #296]	@ (8000fb0 <ReadSensors+0x150>)
 8000e88:	f001 fbbe 	bl	8002608 <HAL_ADC_ConfigChannel>

		HAL_GPIO_WritePin(IR_LED_PORTS[SensorIndex], IR_LED_PINS[SensorIndex], RESET);
 8000e8c:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <ReadSensors+0x148>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a48      	ldr	r2, [pc, #288]	@ (8000fb4 <ReadSensors+0x154>)
 8000e92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e96:	4b44      	ldr	r3, [pc, #272]	@ (8000fa8 <ReadSensors+0x148>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a47      	ldr	r2, [pc, #284]	@ (8000fb8 <ReadSensors+0x158>)
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f002 fe9b 	bl	8003be0 <HAL_GPIO_WritePin>
		delay_us(50);
 8000eaa:	2032      	movs	r0, #50	@ 0x32
 8000eac:	f7ff ffa8 	bl	8000e00 <delay_us>
		HAL_ADC_Stop_DMA(&hadc1);
 8000eb0:	483f      	ldr	r0, [pc, #252]	@ (8000fb0 <ReadSensors+0x150>)
 8000eb2:	f001 fb31 	bl	8002518 <HAL_ADC_Stop_DMA>
		ADC_DONE=0;
 8000eb6:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <ReadSensors+0x15c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_buf, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4940      	ldr	r1, [pc, #256]	@ (8000fc0 <ReadSensors+0x160>)
 8000ec0:	483b      	ldr	r0, [pc, #236]	@ (8000fb0 <ReadSensors+0x150>)
 8000ec2:	f001 fa35 	bl	8002330 <HAL_ADC_Start_DMA>
		while(ADC_DONE==0);
 8000ec6:	bf00      	nop
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fbc <ReadSensors+0x15c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0fb      	beq.n	8000ec8 <ReadSensors+0x68>
		IR_OFF[SensorIndex]=adc_buf;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <ReadSensors+0x148>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc0 <ReadSensors+0x160>)
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	493a      	ldr	r1, [pc, #232]	@ (8000fc4 <ReadSensors+0x164>)
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR)){__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_OVR);}
 8000ede:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <ReadSensors+0x150>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0320 	and.w	r3, r3, #32
 8000ee8:	2b20      	cmp	r3, #32
 8000eea:	d104      	bne.n	8000ef6 <ReadSensors+0x96>
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <ReadSensors+0x150>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f06f 0220 	mvn.w	r2, #32
 8000ef4:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(IR_LED_PORTS[SensorIndex], IR_LED_PINS[SensorIndex], SET);
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <ReadSensors+0x148>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb4 <ReadSensors+0x154>)
 8000efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f00:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <ReadSensors+0x148>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb8 <ReadSensors+0x158>)
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f002 fe66 	bl	8003be0 <HAL_GPIO_WritePin>
		delay_us(50);
 8000f14:	2032      	movs	r0, #50	@ 0x32
 8000f16:	f7ff ff73 	bl	8000e00 <delay_us>
		HAL_ADC_Stop_DMA(&hadc1);
 8000f1a:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <ReadSensors+0x150>)
 8000f1c:	f001 fafc 	bl	8002518 <HAL_ADC_Stop_DMA>
		ADC_DONE=0;
 8000f20:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <ReadSensors+0x15c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_buf, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4925      	ldr	r1, [pc, #148]	@ (8000fc0 <ReadSensors+0x160>)
 8000f2a:	4821      	ldr	r0, [pc, #132]	@ (8000fb0 <ReadSensors+0x150>)
 8000f2c:	f001 fa00 	bl	8002330 <HAL_ADC_Start_DMA>
		while(ADC_DONE==0);
 8000f30:	bf00      	nop
 8000f32:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <ReadSensors+0x15c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0fb      	beq.n	8000f32 <ReadSensors+0xd2>
		IR_ON[SensorIndex]=adc_buf;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <ReadSensors+0x148>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a20      	ldr	r2, [pc, #128]	@ (8000fc0 <ReadSensors+0x160>)
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	4921      	ldr	r1, [pc, #132]	@ (8000fc8 <ReadSensors+0x168>)
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR)){__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_OVR);}
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <ReadSensors+0x150>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	d104      	bne.n	8000f60 <ReadSensors+0x100>
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <ReadSensors+0x150>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f06f 0220 	mvn.w	r2, #32
 8000f5e:	601a      	str	r2, [r3, #0]

		SensorValues[SensorIndex]=abs(IR_OFF[SensorIndex]-IR_ON[SensorIndex]);
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <ReadSensors+0x148>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	@ (8000fc4 <ReadSensors+0x164>)
 8000f66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <ReadSensors+0x148>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4916      	ldr	r1, [pc, #88]	@ (8000fc8 <ReadSensors+0x168>)
 8000f70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f7a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <ReadSensors+0x148>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <ReadSensors+0x16c>)
 8000f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(SensorIndex=0;SensorIndex<9;SensorIndex++){
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <ReadSensors+0x148>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <ReadSensors+0x148>)
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <ReadSensors+0x148>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	f77f af68 	ble.w	8000e6e <ReadSensors+0xe>

	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000318 	.word	0x20000318
 8000fac:	20000048 	.word	0x20000048
 8000fb0:	200000e4 	.word	0x200000e4
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000024 	.word	0x20000024
 8000fbc:	2000031c 	.word	0x2000031c
 8000fc0:	20000320 	.word	0x20000320
 8000fc4:	20000348 	.word	0x20000348
 8000fc8:	20000324 	.word	0x20000324
 8000fcc:	2000036c 	.word	0x2000036c

08000fd0 <line_data>:
int line_data(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
	int sum = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
	double weighted_sum = 0;
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int onLine = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
	for(int i=0;i<9;i++){
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	e01f      	b.n	8001030 <line_data+0x60>
		if(SensorValues[i]< thresh){
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8001068 <line_data+0x98>)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	22c3      	movs	r2, #195	@ 0xc3
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d215      	bcs.n	800102a <line_data+0x5a>
			weighted_sum += weights[i];
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <line_data+0x9c>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa38 	bl	800047c <__aeabi_i2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001014:	f7ff f8e6 	bl	80001e4 <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			sum += 1;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
            onLine = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
	for(int i=0;i<9;i++){
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b08      	cmp	r3, #8
 8001034:	dddc      	ble.n	8000ff0 <line_data+0x20>
		}
	}
	 if (!onLine) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <line_data+0x70>
		 return 255;  // Line lost condition
 800103c:	23ff      	movs	r3, #255	@ 0xff
 800103e:	e00f      	b.n	8001060 <line_data+0x90>
	 }

	 return (int)(weighted_sum/sum);
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff fa1b 	bl	800047c <__aeabi_i2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800104e:	f7ff fba9 	bl	80007a4 <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd13 	bl	8000a84 <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0

}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000036c 	.word	0x2000036c
 800106c:	2000006c 	.word	0x2000006c

08001070 <computePID>:
void computePID(int32_t input) {
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	P = Kp * error;
 8001078:	4b72      	ldr	r3, [pc, #456]	@ (8001244 <computePID+0x1d4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9fd 	bl	800047c <__aeabi_i2d>
 8001082:	4b71      	ldr	r3, [pc, #452]	@ (8001248 <computePID+0x1d8>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fa62 	bl	8000550 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	496e      	ldr	r1, [pc, #440]	@ (800124c <computePID+0x1dc>)
 8001092:	e9c1 2300 	strd	r2, r3, [r1]
	I += Ki * error * (HAL_GetTick()-LastPIDTime);
 8001096:	4b6b      	ldr	r3, [pc, #428]	@ (8001244 <computePID+0x1d4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9ee 	bl	800047c <__aeabi_i2d>
 80010a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001250 <computePID+0x1e0>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff fa53 	bl	8000550 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4614      	mov	r4, r2
 80010b0:	461d      	mov	r5, r3
 80010b2:	f000 ffdd 	bl	8002070 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b66      	ldr	r3, [pc, #408]	@ (8001254 <computePID+0x1e4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9cc 	bl	800045c <__aeabi_ui2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff fa40 	bl	8000550 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001258 <computePID+0x1e8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff f881 	bl	80001e4 <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	495c      	ldr	r1, [pc, #368]	@ (8001258 <computePID+0x1e8>)
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
	if (I > integralMax) I = integralMax;
 80010ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001258 <computePID+0x1e8>)
 80010ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f2:	4b5a      	ldr	r3, [pc, #360]	@ (800125c <computePID+0x1ec>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fcba 	bl	8000a70 <__aeabi_dcmpgt>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <computePID+0x9e>
 8001102:	4b56      	ldr	r3, [pc, #344]	@ (800125c <computePID+0x1ec>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	4953      	ldr	r1, [pc, #332]	@ (8001258 <computePID+0x1e8>)
 800110a:	e9c1 2300 	strd	r2, r3, [r1]
	if (I < integralMin) I = integralMin;
 800110e:	4b52      	ldr	r3, [pc, #328]	@ (8001258 <computePID+0x1e8>)
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	4b52      	ldr	r3, [pc, #328]	@ (8001260 <computePID+0x1f0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fc8b 	bl	8000a34 <__aeabi_dcmplt>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <computePID+0xc0>
 8001124:	4b4e      	ldr	r3, [pc, #312]	@ (8001260 <computePID+0x1f0>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	494b      	ldr	r1, [pc, #300]	@ (8001258 <computePID+0x1e8>)
 800112c:	e9c1 2300 	strd	r2, r3, [r1]
	D = Kd * (input - lastInput) / (HAL_GetTick()-LastPIDTime);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f9a3 	bl	800047c <__aeabi_i2d>
 8001136:	4b4b      	ldr	r3, [pc, #300]	@ (8001264 <computePID+0x1f4>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff f850 	bl	80001e0 <__aeabi_dsub>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <computePID+0x1f8>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff f9ff 	bl	8000550 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4614      	mov	r4, r2
 8001158:	461d      	mov	r5, r3
 800115a:	f000 ff89 	bl	8002070 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <computePID+0x1e4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f978 	bl	800045c <__aeabi_ui2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff fb16 	bl	80007a4 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	493b      	ldr	r1, [pc, #236]	@ (800126c <computePID+0x1fc>)
 800117e:	e9c1 2300 	strd	r2, r3, [r1]

	correction = P + I + D;
 8001182:	4b32      	ldr	r3, [pc, #200]	@ (800124c <computePID+0x1dc>)
 8001184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001188:	4b33      	ldr	r3, [pc, #204]	@ (8001258 <computePID+0x1e8>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff f829 	bl	80001e4 <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	4b34      	ldr	r3, [pc, #208]	@ (800126c <computePID+0x1fc>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff f820 	bl	80001e4 <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4931      	ldr	r1, [pc, #196]	@ (8001270 <computePID+0x200>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
	lastInput = input;
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff f964 	bl	800047c <__aeabi_i2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	492a      	ldr	r1, [pc, #168]	@ (8001264 <computePID+0x1f4>)
 80011ba:	e9c1 2300 	strd	r2, r3, [r1]
	LastPIDTime = HAL_GetTick();
 80011be:	f000 ff57 	bl	8002070 <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <computePID+0x1e4>)
 80011c6:	6013      	str	r3, [r2, #0]
	correction = floor(correction);
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <computePID+0x200>)
 80011ca:	ed93 7b00 	vldr	d7, [r3]
 80011ce:	eeb0 0a47 	vmov.f32	s0, s14
 80011d2:	eef0 0a67 	vmov.f32	s1, s15
 80011d6:	f005 f8e7 	bl	80063a8 <floor>
 80011da:	eeb0 7a40 	vmov.f32	s14, s0
 80011de:	eef0 7a60 	vmov.f32	s15, s1
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <computePID+0x200>)
 80011e4:	ed83 7b00 	vstr	d7, [r3]
	setMotorSpeed(0, base_speed - correction);
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <computePID+0x204>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f945 	bl	800047c <__aeabi_i2d>
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <computePID+0x200>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7fe fff2 	bl	80001e0 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc3e 	bl	8000a84 <__aeabi_d2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f833 	bl	8001278 <setMotorSpeed>
	setMotorSpeed(1, base_speed + correction);
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <computePID+0x204>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f930 	bl	800047c <__aeabi_i2d>
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <computePID+0x200>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7fe ffdf 	bl	80001e4 <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fc29 	bl	8000a84 <__aeabi_d2iz>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	2001      	movs	r0, #1
 8001238:	f000 f81e 	bl	8001278 <setMotorSpeed>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}
 8001244:	200003ac 	.word	0x200003ac
 8001248:	20000090 	.word	0x20000090
 800124c:	200003b0 	.word	0x200003b0
 8001250:	200003a0 	.word	0x200003a0
 8001254:	20000398 	.word	0x20000398
 8001258:	200003b8 	.word	0x200003b8
 800125c:	200000b0 	.word	0x200000b0
 8001260:	200000a8 	.word	0x200000a8
 8001264:	200003d0 	.word	0x200003d0
 8001268:	20000098 	.word	0x20000098
 800126c:	200003c0 	.word	0x200003c0
 8001270:	200003c8 	.word	0x200003c8
 8001274:	200000a0 	.word	0x200000a0

08001278 <setMotorSpeed>:
void setMotorSpeed(uint8_t motor, int32_t speed)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
	// tim1 ch1- left front, ch2- left back, ch3-right front, ch4- right back
    uint16_t pwm = abs(speed);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	81fb      	strh	r3, [r7, #14]
    if (pwm > 200) pwm = 200;  // Limit max speed
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	2bc8      	cmp	r3, #200	@ 0xc8
 8001292:	d901      	bls.n	8001298 <setMotorSpeed+0x20>
 8001294:	23c8      	movs	r3, #200	@ 0xc8
 8001296:	81fb      	strh	r3, [r7, #14]

    if (motor == 0) {  // Left motor
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d110      	bne.n	80012c0 <setMotorSpeed+0x48>
        if (speed < 0) {
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da06      	bge.n	80012b2 <setMotorSpeed+0x3a>
            TIM1->CCR3 = pwm;
 80012a4:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            TIM1->CCR4 = 0;
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
        } else {
            TIM1->CCR2 = 0;
            TIM1->CCR1 = pwm;
        }
    }
}
 80012b0:	e019      	b.n	80012e6 <setMotorSpeed+0x6e>
            TIM1->CCR3 = 0;
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	63da      	str	r2, [r3, #60]	@ 0x3c
            TIM1->CCR4 = pwm;
 80012b8:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012be:	e012      	b.n	80012e6 <setMotorSpeed+0x6e>
    else if (motor == 1) {  // Right motor
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10f      	bne.n	80012e6 <setMotorSpeed+0x6e>
        if (speed < 0) {
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da06      	bge.n	80012da <setMotorSpeed+0x62>
            TIM1->CCR2 = pwm;
 80012cc:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	6393      	str	r3, [r2, #56]	@ 0x38
            TIM1->CCR1 = 0;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012d8:	e005      	b.n	80012e6 <setMotorSpeed+0x6e>
            TIM1->CCR2 = 0;
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCR1 = pwm;
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <setMotorSpeed+0x7c>)
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40010000 	.word	0x40010000

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fe51 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f8c3 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 fb31 	bl	800196c <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f000 fb07 	bl	800191c <MX_DMA_Init>
  MX_ADC1_Init();
 800130e:	f000 f925 	bl	800155c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001312:	f000 f9c9 	bl	80016a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001316:	f000 fa8b 	bl	8001830 <MX_TIM2_Init>
  MX_I2C1_Init();
 800131a:	f000 f997 	bl	800164c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800131e:	f000 fad3 	bl	80018c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001322:	4850      	ldr	r0, [pc, #320]	@ (8001464 <main+0x16c>)
 8001324:	f003 fa62 	bl	80047ec <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800132e:	484e      	ldr	r0, [pc, #312]	@ (8001468 <main+0x170>)
 8001330:	f002 fc56 	bl	8003be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2102      	movs	r1, #2
 8001338:	484b      	ldr	r0, [pc, #300]	@ (8001468 <main+0x170>)
 800133a:	f002 fc51 	bl	8003be0 <HAL_GPIO_WritePin>

  // Start PWM for motors
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800133e:	2100      	movs	r1, #0
 8001340:	484a      	ldr	r0, [pc, #296]	@ (800146c <main+0x174>)
 8001342:	f003 fb07 	bl	8004954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001346:	2104      	movs	r1, #4
 8001348:	4848      	ldr	r0, [pc, #288]	@ (800146c <main+0x174>)
 800134a:	f003 fb03 	bl	8004954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800134e:	2108      	movs	r1, #8
 8001350:	4846      	ldr	r0, [pc, #280]	@ (800146c <main+0x174>)
 8001352:	f003 faff 	bl	8004954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001356:	210c      	movs	r1, #12
 8001358:	4844      	ldr	r0, [pc, #272]	@ (800146c <main+0x174>)
 800135a:	f003 fafb 	bl	8004954 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t start_time = HAL_GetTick();
 800135e:	f000 fe87 	bl	8002070 <HAL_GetTick>
 8001362:	6078      	str	r0, [r7, #4]
	  ReadSensors();
 8001364:	f7ff fd7c 	bl	8000e60 <ReadSensors>
	  sensors_time = HAL_GetTick()-start_time;
 8001368:	f000 fe82 	bl	8002070 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4a3f      	ldr	r2, [pc, #252]	@ (8001470 <main+0x178>)
 8001374:	6013      	str	r3, [r2, #0]

	  position=line_data();
 8001376:	f7ff fe2b 	bl	8000fd0 <line_data>
 800137a:	4603      	mov	r3, r0
 800137c:	4a3d      	ldr	r2, [pc, #244]	@ (8001474 <main+0x17c>)
 800137e:	6013      	str	r3, [r2, #0]
	  if(position>20 && position!=255){turn=1;
 8001380:	4b3c      	ldr	r3, [pc, #240]	@ (8001474 <main+0x17c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b14      	cmp	r3, #20
 8001386:	dd07      	ble.n	8001398 <main+0xa0>
 8001388:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <main+0x17c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2bff      	cmp	r3, #255	@ 0xff
 800138e:	d003      	beq.n	8001398 <main+0xa0>
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <main+0x180>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e008      	b.n	80013aa <main+0xb2>
	  }else if(position<-20){turn=-1;}
 8001398:	4b36      	ldr	r3, [pc, #216]	@ (8001474 <main+0x17c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f113 0f14 	cmn.w	r3, #20
 80013a0:	da34      	bge.n	800140c <main+0x114>
 80013a2:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <main+0x180>)
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013a8:	601a      	str	r2, [r3, #0]

	  while (position ==255){
 80013aa:	e02f      	b.n	800140c <main+0x114>
		  LastPIDTime=HAL_GetTick();
 80013ac:	f000 fe60 	bl	8002070 <HAL_GetTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <main+0x184>)
 80013b4:	6013      	str	r3, [r2, #0]
		  ReadSensors();
 80013b6:	f7ff fd53 	bl	8000e60 <ReadSensors>
		  position=line_data();
 80013ba:	f7ff fe09 	bl	8000fd0 <line_data>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001474 <main+0x17c>)
 80013c2:	6013      	str	r3, [r2, #0]
		  if (turn == 1) { // We were heading into a right turn
 80013c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001478 <main+0x180>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10d      	bne.n	80013e8 <main+0xf0>
			  setMotorSpeed(0, turn_speed);
 80013cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <main+0x188>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff50 	bl	8001278 <setMotorSpeed>
			  setMotorSpeed(1, -turn_speed);
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <main+0x188>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	425b      	negs	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff ff49 	bl	8001278 <setMotorSpeed>
 80013e6:	e011      	b.n	800140c <main+0x114>
		  } else if (turn == -1) { // We were heading into a left turn
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <main+0x180>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013f0:	d10c      	bne.n	800140c <main+0x114>
			  setMotorSpeed(0, -turn_speed);
 80013f2:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <main+0x188>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	425b      	negs	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff ff3c 	bl	8001278 <setMotorSpeed>
			  setMotorSpeed(1, turn_speed);
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <main+0x188>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff ff36 	bl	8001278 <setMotorSpeed>
	  while (position ==255){
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <main+0x17c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2bff      	cmp	r3, #255	@ 0xff
 8001412:	d0cb      	beq.n	80013ac <main+0xb4>
		  }
	  }
	  if(position>20 && position!=255){turn=1;
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <main+0x17c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b14      	cmp	r3, #20
 800141a:	dd07      	ble.n	800142c <main+0x134>
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <main+0x17c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2bff      	cmp	r3, #255	@ 0xff
 8001422:	d003      	beq.n	800142c <main+0x134>
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <main+0x180>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e008      	b.n	800143e <main+0x146>
	  }else if(position<-20){turn=-1;}
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <main+0x17c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f113 0f14 	cmn.w	r3, #20
 8001434:	da03      	bge.n	800143e <main+0x146>
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <main+0x180>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800143c:	601a      	str	r2, [r3, #0]

	  error = -(position);
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <main+0x17c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	425b      	negs	r3, r3
 8001444:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <main+0x18c>)
 8001446:	6013      	str	r3, [r2, #0]
	  computePID(position);
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <main+0x17c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe0f 	bl	8001070 <computePID>
	  run_time=HAL_GetTick()-start_time;
 8001452:	f000 fe0d 	bl	8002070 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <main+0x190>)
 800145e:	6013      	str	r3, [r2, #0]
  {
 8001460:	e77d      	b.n	800135e <main+0x66>
 8001462:	bf00      	nop
 8001464:	20000228 	.word	0x20000228
 8001468:	40020400 	.word	0x40020400
 800146c:	200001e0 	.word	0x200001e0
 8001470:	20000390 	.word	0x20000390
 8001474:	200003a8 	.word	0x200003a8
 8001478:	200000a4 	.word	0x200000a4
 800147c:	20000398 	.word	0x20000398
 8001480:	200000a1 	.word	0x200000a1
 8001484:	200003ac 	.word	0x200003ac
 8001488:	20000394 	.word	0x20000394

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	@ 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	@ 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f004 ff58 	bl	8006350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <SystemClock_Config+0xc8>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	4a26      	ldr	r2, [pc, #152]	@ (8001554 <SystemClock_Config+0xc8>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <SystemClock_Config+0xc8>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <SystemClock_Config+0xcc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <SystemClock_Config+0xcc>)
 80014d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <SystemClock_Config+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014fc:	2319      	movs	r3, #25
 80014fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001500:	23c0      	movs	r3, #192	@ 0xc0
 8001502:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001508:	2304      	movs	r3, #4
 800150a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fcc3 	bl	8003e9c <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800151c:	f000 faac 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001530:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2103      	movs	r1, #3
 800153c:	4618      	mov	r0, r3
 800153e:	f002 ff25 	bl	800438c <HAL_RCC_ClockConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001548:	f000 fa96 	bl	8001a78 <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	3750      	adds	r7, #80	@ 0x50
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2220      	movs	r2, #32
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f004 feea 	bl	8006350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800157c:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <MX_ADC1_Init+0xe0>)
 800157e:	4a30      	ldr	r2, [pc, #192]	@ (8001640 <MX_ADC1_Init+0xe4>)
 8001580:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <MX_ADC1_Init+0xe0>)
 8001584:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800158a:	4b2c      	ldr	r3, [pc, #176]	@ (800163c <MX_ADC1_Init+0xe0>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001590:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <MX_ADC1_Init+0xe0>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <MX_ADC1_Init+0xe0>)
 8001598:	2200      	movs	r2, #0
 800159a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <MX_ADC1_Init+0xe0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015ac:	4a25      	ldr	r2, [pc, #148]	@ (8001644 <MX_ADC1_Init+0xe8>)
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b0:	4b22      	ldr	r3, [pc, #136]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015b6:	4b21      	ldr	r3, [pc, #132]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ca:	481c      	ldr	r0, [pc, #112]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015cc:	f000 fd5c 	bl	8002088 <HAL_ADC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80015d6:	f000 fa4f 	bl	8001a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015e2:	2307      	movs	r3, #7
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	4619      	mov	r1, r3
 80015ec:	4813      	ldr	r0, [pc, #76]	@ (800163c <MX_ADC1_Init+0xe0>)
 80015ee:	f001 f80b 	bl	8002608 <HAL_ADC_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80015f8:	f000 fa3e 	bl	8001a78 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <MX_ADC1_Init+0xec>)
 8001612:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_ADC1_Init+0xe0>)
 8001626:	f001 faa9 	bl	8002b7c <HAL_ADCEx_InjectedConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001630:	f000 fa22 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200000e4 	.word	0x200000e4
 8001640:	40012000 	.word	0x40012000
 8001644:	0f000001 	.word	0x0f000001
 8001648:	000f0001 	.word	0x000f0001

0800164c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <MX_I2C1_Init+0x50>)
 8001652:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <MX_I2C1_Init+0x54>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_I2C1_Init+0x50>)
 8001658:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <MX_I2C1_Init+0x58>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_I2C1_Init+0x50>)
 800166a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800166e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_I2C1_Init+0x50>)
 800168a:	f002 fac3 	bl	8003c14 <HAL_I2C_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001694:	f000 f9f0 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000018c 	.word	0x2000018c
 80016a0:	40005400 	.word	0x40005400
 80016a4:	000186a0 	.word	0x000186a0

080016a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b096      	sub	sp, #88	@ 0x58
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2220      	movs	r2, #32
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fe35 	bl	8006350 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016e6:	4b50      	ldr	r3, [pc, #320]	@ (8001828 <MX_TIM1_Init+0x180>)
 80016e8:	4a50      	ldr	r2, [pc, #320]	@ (800182c <MX_TIM1_Init+0x184>)
 80016ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 960-1;
 80016ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001828 <MX_TIM1_Init+0x180>)
 80016ee:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80016f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <MX_TIM1_Init+0x180>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 80016fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001828 <MX_TIM1_Init+0x180>)
 80016fc:	22c7      	movs	r2, #199	@ 0xc7
 80016fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <MX_TIM1_Init+0x180>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001706:	4b48      	ldr	r3, [pc, #288]	@ (8001828 <MX_TIM1_Init+0x180>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b46      	ldr	r3, [pc, #280]	@ (8001828 <MX_TIM1_Init+0x180>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001712:	4845      	ldr	r0, [pc, #276]	@ (8001828 <MX_TIM1_Init+0x180>)
 8001714:	f003 f81a 	bl	800474c <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800171e:	f000 f9ab 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001728:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800172c:	4619      	mov	r1, r3
 800172e:	483e      	ldr	r0, [pc, #248]	@ (8001828 <MX_TIM1_Init+0x180>)
 8001730:	f003 fa82 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800173a:	f000 f99d 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800173e:	483a      	ldr	r0, [pc, #232]	@ (8001828 <MX_TIM1_Init+0x180>)
 8001740:	f003 f8ae 	bl	80048a0 <HAL_TIM_PWM_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800174a:	f000 f995 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001756:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800175a:	4619      	mov	r1, r3
 800175c:	4832      	ldr	r0, [pc, #200]	@ (8001828 <MX_TIM1_Init+0x180>)
 800175e:	f003 fe05 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001768:	f000 f986 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176c:	2360      	movs	r3, #96	@ 0x60
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4825      	ldr	r0, [pc, #148]	@ (8001828 <MX_TIM1_Init+0x180>)
 8001792:	f003 f98f 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800179c:	f000 f96c 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	2204      	movs	r2, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	481f      	ldr	r0, [pc, #124]	@ (8001828 <MX_TIM1_Init+0x180>)
 80017aa:	f003 f983 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017b4:	f000 f960 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	2208      	movs	r2, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_TIM1_Init+0x180>)
 80017c2:	f003 f977 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017cc:	f000 f954 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	220c      	movs	r2, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	4813      	ldr	r0, [pc, #76]	@ (8001828 <MX_TIM1_Init+0x180>)
 80017da:	f003 f96b 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017e4:	f000 f948 	bl	8001a78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <MX_TIM1_Init+0x180>)
 800180c:	f003 fe1c 	bl	8005448 <HAL_TIMEx_ConfigBreakDeadTime>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001816:	f000 f92f 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181a:	4803      	ldr	r0, [pc, #12]	@ (8001828 <MX_TIM1_Init+0x180>)
 800181c:	f000 fa72 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001820:	bf00      	nop
 8001822:	3758      	adds	r7, #88	@ 0x58
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200001e0 	.word	0x200001e0
 800182c:	40010000 	.word	0x40010000

08001830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_TIM2_Init+0x94>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001856:	225f      	movs	r2, #95	@ 0x5f
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM2_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001862:	f06f 0201 	mvn.w	r2, #1
 8001866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <MX_TIM2_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001874:	4813      	ldr	r0, [pc, #76]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001876:	f002 ff69 	bl	800474c <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001880:	f000 f8fa 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001892:	f003 f9d1 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800189c:	f000 f8ec 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_TIM2_Init+0x94>)
 80018ae:	f003 fd5d 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018b8:	f000 f8de 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000228 	.word	0x20000228

080018c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART1_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 8001900:	f003 fdf4 	bl	80054ec <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f000 f8b5 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000270 	.word	0x20000270
 8001918:	40011000 	.word	0x40011000

0800191c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_DMA_Init+0x4c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <MX_DMA_Init+0x4c>)
 800192c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <MX_DMA_Init+0x4c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2038      	movs	r0, #56	@ 0x38
 8001944:	f001 fb8f 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001948:	2038      	movs	r0, #56	@ 0x38
 800194a:	f001 fba8 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	203a      	movs	r0, #58	@ 0x3a
 8001954:	f001 fb87 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001958:	203a      	movs	r0, #58	@ 0x3a
 800195a:	f001 fba0 	bl	800309e <HAL_NVIC_EnableIRQ>

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a37      	ldr	r2, [pc, #220]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a30      	ldr	r2, [pc, #192]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a29      	ldr	r2, [pc, #164]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <MX_GPIO_Init+0xfc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 80019f2:	2200      	movs	r2, #0
 80019f4:	f24f 413e 	movw	r1, #62526	@ 0xf43e
 80019f8:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <MX_GPIO_Init+0x100>)
 80019fa:	f002 f8f1 	bl	8003be0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001a04:	481a      	ldr	r0, [pc, #104]	@ (8001a70 <MX_GPIO_Init+0x104>)
 8001a06:	f002 f8eb 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a0a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4815      	ldr	r0, [pc, #84]	@ (8001a74 <MX_GPIO_Init+0x108>)
 8001a20:	f001 ff5a 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8001a24:	f24f 433e 	movw	r3, #62526	@ 0xf43e
 8001a28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480b      	ldr	r0, [pc, #44]	@ (8001a6c <MX_GPIO_Init+0x100>)
 8001a3e:	f001 ff4b 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001a42:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <MX_GPIO_Init+0x104>)
 8001a5c:	f001 ff3c 	bl	80038d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	@ 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020800 	.word	0x40020800

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <Error_Handler+0x8>

08001a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf0 <HAL_ADC_MspInit+0x11c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d178      	bne.n	8001be8 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a36      	ldr	r2, [pc, #216]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b30      	ldr	r3, [pc, #192]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_ADC_MspInit+0x120>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b4a:	23ff      	movs	r3, #255	@ 0xff
 8001b4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4826      	ldr	r0, [pc, #152]	@ (8001bf8 <HAL_ADC_MspInit+0x124>)
 8001b5e:	f001 febb 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b66:	2303      	movs	r3, #3
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4821      	ldr	r0, [pc, #132]	@ (8001bfc <HAL_ADC_MspInit+0x128>)
 8001b76:	f001 feaf 	bl	80038d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001b7c:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_ADC_MspInit+0x130>)
 8001b7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001b94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001b9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ba0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bbc:	4810      	ldr	r0, [pc, #64]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001bbe:	f001 fa89 	bl	80030d4 <HAL_DMA_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001bc8:	f7ff ff56 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001bd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c00 <HAL_ADC_MspInit+0x12c>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2012      	movs	r0, #18
 8001bde:	f001 fa42 	bl	8003066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001be2:	2012      	movs	r0, #18
 8001be4:	f001 fa5b 	bl	800309e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	2000012c 	.word	0x2000012c
 8001c04:	40026410 	.word	0x40026410

08001c08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_I2C_MspInit+0x84>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12c      	bne.n	8001c84 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_I2C_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <HAL_I2C_MspInit+0x88>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_I2C_MspInit+0x88>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4c:	2312      	movs	r3, #18
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <HAL_I2C_MspInit+0x8c>)
 8001c64:	f001 fe38 	bl	80038d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_I2C_MspInit+0x88>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	4a07      	ldr	r2, [pc, #28]	@ (8001c90 <HAL_I2C_MspInit+0x88>)
 8001c72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_I2C_MspInit+0x88>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	@ 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400

08001c98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <HAL_TIM_Base_MspInit+0x64>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a13      	ldr	r2, [pc, #76]	@ (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cc6:	e012      	b.n	8001cee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd0:	d10d      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a09      	ldr	r2, [pc, #36]	@ (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <HAL_TIM_MspPostInit+0x68>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d11e      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_TIM_MspPostInit+0x6c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_TIM_MspPostInit+0x6c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d42:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <HAL_TIM_MspPostInit+0x70>)
 8001d60:	f001 fdba 	bl	80038d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000

08001d78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a34      	ldr	r2, [pc, #208]	@ (8001e68 <HAL_UART_MspInit+0xf0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d161      	bne.n	8001e5e <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <HAL_UART_MspInit+0xf4>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a32      	ldr	r2, [pc, #200]	@ (8001e6c <HAL_UART_MspInit+0xf4>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <HAL_UART_MspInit+0xf4>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_UART_MspInit+0xf4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001e6c <HAL_UART_MspInit+0xf4>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <HAL_UART_MspInit+0xf4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd2:	23c0      	movs	r3, #192	@ 0xc0
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de2:	2307      	movs	r3, #7
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4820      	ldr	r0, [pc, #128]	@ (8001e70 <HAL_UART_MspInit+0xf8>)
 8001dee:	f001 fd73 	bl	80038d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001df4:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <HAL_UART_MspInit+0x100>)
 8001df6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e14:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e32:	4810      	ldr	r0, [pc, #64]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e34:	f001 f94e 	bl	80030d4 <HAL_DMA_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001e3e:	f7ff fe1b 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a0b      	ldr	r2, [pc, #44]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2025      	movs	r0, #37	@ 0x25
 8001e54:	f001 f907 	bl	8003066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e58:	2025      	movs	r0, #37	@ 0x25
 8001e5a:	f001 f920 	bl	800309e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400
 8001e74:	200002b8 	.word	0x200002b8
 8001e78:	40026440 	.word	0x40026440

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 f8b9 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <ADC_IRQHandler+0x10>)
 8001ee2:	f000 f914 	bl	800210e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200000e4 	.word	0x200000e4

08001ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <USART1_IRQHandler+0x10>)
 8001ef6:	f003 fb49 	bl	800558c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000270 	.word	0x20000270

08001f04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA2_Stream0_IRQHandler+0x10>)
 8001f0a:	f001 fa7b 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000012c 	.word	0x2000012c

08001f18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DMA2_Stream2_IRQHandler+0x10>)
 8001f1e:	f001 fa71 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200002b8 	.word	0x200002b8

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f54:	f7ff ffea 	bl	8001f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5a:	490d      	ldr	r1, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f70:	4c0a      	ldr	r4, [pc, #40]	@ (8001f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f004 f9ef 	bl	8006360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff f9b9 	bl	80012f8 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001f94:	080064e8 	.word	0x080064e8
  ldr r2, =_sbss
 8001f98:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001f9c:	200003dc 	.word	0x200003dc

08001fa0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <DMA1_Stream0_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_Init+0x40>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <HAL_Init+0x40>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_Init+0x40>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f001 f83f 	bl	8003050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fd54 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f857 	bl	80030ba <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002024:	f001 f81f 	bl	8003066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200000b8 	.word	0x200000b8
 8002040:	200000c0 	.word	0x200000c0
 8002044:	200000bc 	.word	0x200000bc

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200000c0 	.word	0x200000c0
 800206c:	200003d8 	.word	0x200003d8

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	200003d8 	.word	0x200003d8

08002088 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e033      	b.n	8002106 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fd14 	bl	8001ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020ce:	f023 0302 	bic.w	r3, r3, #2
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fbc6 	bl	800286c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d049      	beq.n	80021d8 <HAL_ADC_IRQHandler+0xca>
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d046      	beq.n	80021d8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d12b      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d127      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002190:	2b00      	cmp	r3, #0
 8002192:	d119      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0220 	bic.w	r2, r2, #32
 80021a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe fe33 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0212 	mvn.w	r2, #18
 80021d6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d057      	beq.n	800229e <HAL_ADC_IRQHandler+0x190>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d054      	beq.n	800229e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d139      	bne.n	800228e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002220:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002232:	2b00      	cmp	r3, #0
 8002234:	d12b      	bne.n	800228e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d124      	bne.n	800228e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11d      	bne.n	800228e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d119      	bne.n	800228e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002268:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fc6a 	bl	8002b68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 020c 	mvn.w	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d017      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x1d6>
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d014      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10d      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f983 	bl	80025e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0201 	mvn.w	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022f2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <HAL_ADC_IRQHandler+0x218>
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002304:	f043 0202 	orr.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0220 	mvn.w	r2, #32
 8002314:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f96c 	bl	80025f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0220 	mvn.w	r2, #32
 8002324:	601a      	str	r2, [r3, #0]
  }
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Start_DMA+0x22>
 800234e:	2302      	movs	r3, #2
 8002350:	e0d0      	b.n	80024f4 <HAL_ADC_Start_DMA+0x1c4>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d018      	beq.n	800239a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002378:	4b60      	ldr	r3, [pc, #384]	@ (80024fc <HAL_ADC_Start_DMA+0x1cc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a60      	ldr	r2, [pc, #384]	@ (8002500 <HAL_ADC_Start_DMA+0x1d0>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0c9a      	lsrs	r2, r3, #18
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800238c:	e002      	b.n	8002394 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3b01      	subs	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f9      	bne.n	800238e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 8088 	bne.w	80024da <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002408:	d106      	bne.n	8002418 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f023 0206 	bic.w	r2, r3, #6
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
 8002416:	e002      	b.n	800241e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002426:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_ADC_Start_DMA+0x1d4>)
 8002428:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242e:	4a36      	ldr	r2, [pc, #216]	@ (8002508 <HAL_ADC_Start_DMA+0x1d8>)
 8002430:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002436:	4a35      	ldr	r2, [pc, #212]	@ (800250c <HAL_ADC_Start_DMA+0x1dc>)
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243e:	4a34      	ldr	r2, [pc, #208]	@ (8002510 <HAL_ADC_Start_DMA+0x1e0>)
 8002440:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800244a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800245a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	334c      	adds	r3, #76	@ 0x4c
 8002476:	4619      	mov	r1, r3
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f000 fed8 	bl	8003230 <HAL_DMA_Start_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d129      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	e020      	b.n	80024f2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_ADC_Start_DMA+0x1e4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d11b      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x1c2>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d114      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e00b      	b.n	80024f2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200000b8 	.word	0x200000b8
 8002500:	431bde83 	.word	0x431bde83
 8002504:	40012300 	.word	0x40012300
 8002508:	08002a65 	.word	0x08002a65
 800250c:	08002b1f 	.word	0x08002b1f
 8002510:	08002b3b 	.word	0x08002b3b
 8002514:	40012000 	.word	0x40012000

08002518 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADC_Stop_DMA+0x1a>
 800252e:	2302      	movs	r3, #2
 8002530:	e048      	b.n	80025c4 <HAL_ADC_Stop_DMA+0xac>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d130      	bne.n	80025ba <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002566:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d10f      	bne.n	8002596 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	4618      	mov	r0, r3
 800257c:	f000 feb0 	bl	80032e0 <HAL_DMA_Abort>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80025a4:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e113      	b.n	800284c <HAL_ADC_ConfigChannel+0x244>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b09      	cmp	r3, #9
 8002632:	d925      	bls.n	8002680 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68d9      	ldr	r1, [r3, #12]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	3b1e      	subs	r3, #30
 800264a:	2207      	movs	r2, #7
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43da      	mvns	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	400a      	ands	r2, r1
 8002658:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	4603      	mov	r3, r0
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4403      	add	r3, r0
 8002672:	3b1e      	subs	r3, #30
 8002674:	409a      	lsls	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	e022      	b.n	80026c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	2207      	movs	r2, #7
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	400a      	ands	r2, r1
 80026a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4403      	add	r3, r0
 80026bc:	409a      	lsls	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d824      	bhi.n	8002718 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b05      	subs	r3, #5
 80026e0:	221f      	movs	r2, #31
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	400a      	ands	r2, r1
 80026ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b05      	subs	r3, #5
 800270a:	fa00 f203 	lsl.w	r2, r0, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34
 8002716:	e04c      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d824      	bhi.n	800276a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b23      	subs	r3, #35	@ 0x23
 8002732:	221f      	movs	r2, #31
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43da      	mvns	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	400a      	ands	r2, r1
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	4618      	mov	r0, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3b23      	subs	r3, #35	@ 0x23
 800275c:	fa00 f203 	lsl.w	r2, r0, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
 8002768:	e023      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b41      	subs	r3, #65	@ 0x41
 800277c:	221f      	movs	r2, #31
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b41      	subs	r3, #65	@ 0x41
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b2:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_ADC_ConfigChannel+0x250>)
 80027b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_ADC_ConfigChannel+0x254>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d8>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b12      	cmp	r3, #18
 80027c6:	d10b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <HAL_ADC_ConfigChannel+0x254>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12b      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002860 <HAL_ADC_ConfigChannel+0x258>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x1f4>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b11      	cmp	r3, #17
 80027fa:	d122      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a11      	ldr	r2, [pc, #68]	@ (8002860 <HAL_ADC_ConfigChannel+0x258>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d111      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_ADC_ConfigChannel+0x25c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_ADC_ConfigChannel+0x260>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0c9a      	lsrs	r2, r3, #18
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002834:	e002      	b.n	800283c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3b01      	subs	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f9      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40012300 	.word	0x40012300
 800285c:	40012000 	.word	0x40012000
 8002860:	10000012 	.word	0x10000012
 8002864:	200000b8 	.word	0x200000b8
 8002868:	431bde83 	.word	0x431bde83

0800286c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002874:	4b79      	ldr	r3, [pc, #484]	@ (8002a5c <ADC_Init+0x1f0>)
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	021a      	lsls	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	4a58      	ldr	r2, [pc, #352]	@ (8002a60 <ADC_Init+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	e00f      	b.n	800296a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0202 	bic.w	r2, r2, #2
 8002978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e1b      	ldrb	r3, [r3, #24]
 8002984:	005a      	lsls	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	3b01      	subs	r3, #1
 80029c4:	035a      	lsls	r2, r3, #13
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	e007      	b.n	80029e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	051a      	lsls	r2, r3, #20
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a22:	025a      	lsls	r2, r3, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	029a      	lsls	r2, r3, #10
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	0f000001 	.word	0x0f000001

08002a64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d13c      	bne.n	8002af8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d12b      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d127      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d119      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0220 	bic.w	r2, r2, #32
 8002aca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7fe f99f 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002af6:	e00e      	b.n	8002b16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fd75 	bl	80025f4 <HAL_ADC_ErrorCallback>
}
 8002b0a:	e004      	b.n	8002b16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fd4d 	bl	80025cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	@ 0x40
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff fd4a 	bl	80025f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e17e      	b.n	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d925      	bls.n	8002bf0 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68d9      	ldr	r1, [r3, #12]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4403      	add	r3, r0
 8002be2:	3b1e      	subs	r3, #30
 8002be4:	409a      	lsls	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	e022      	b.n	8002c36 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6919      	ldr	r1, [r3, #16]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	2207      	movs	r2, #7
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6919      	ldr	r1, [r3, #16]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4618      	mov	r0, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4403      	add	r3, r0
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002c44:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	051a      	lsls	r2, r3, #20
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3303      	adds	r3, #3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	221f      	movs	r2, #31
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43da      	mvns	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3303      	adds	r3, #3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a75      	ldr	r2, [pc, #468]	@ (8002ea0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d022      	beq.n	8002d14 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002cfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	e00f      	b.n	8002d34 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002d32:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7d5b      	ldrb	r3, [r3, #21]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	e007      	b.n	8002d5e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5c:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	7d1b      	ldrb	r3, [r3, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	e007      	b.n	8002d88 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d86:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d02e      	beq.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d840      	bhi.n	8002e16 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d014      	beq.n	8002dc6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002d9c:	e03b      	b.n	8002e16 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002dac:	f023 030f 	bic.w	r3, r3, #15
 8002db0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6959      	ldr	r1, [r3, #20]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	615a      	str	r2, [r3, #20]
      break;
 8002dc4:	e03b      	b.n	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002dd4:	f023 030f 	bic.w	r3, r3, #15
 8002dd8:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6999      	ldr	r1, [r3, #24]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	619a      	str	r2, [r3, #24]
      break;
 8002dec:	e027      	b.n	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002dfc:	f023 030f 	bic.w	r3, r3, #15
 8002e00:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69d9      	ldr	r1, [r3, #28]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
      break;
 8002e14:	e013      	b.n	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002e24:	f023 030f 	bic.w	r3, r3, #15
 8002e28:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a19      	ldr	r1, [r3, #32]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	621a      	str	r2, [r3, #32]
      break;
 8002e3c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002e40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a18      	ldr	r2, [pc, #96]	@ (8002ea8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d109      	bne.n	8002e60 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b12      	cmp	r3, #18
 8002e52:	d105      	bne.n	8002e60 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a10      	ldr	r2, [pc, #64]	@ (8002ea8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10e      	bne.n	8002e88 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002eac <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b11      	cmp	r3, #17
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	000f0001 	.word	0x000f0001
 8002ea4:	40012300 	.word	0x40012300
 8002ea8:	40012000 	.word	0x40012000
 8002eac:	10000012 	.word	0x10000012

08002eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee2:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60d3      	str	r3, [r2, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002efc:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <__NVIC_GetPriorityGrouping+0x18>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 0307 	and.w	r3, r3, #7
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db0b      	blt.n	8002f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4907      	ldr	r1, [pc, #28]	@ (8002f4c <__NVIC_EnableIRQ+0x38>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2001      	movs	r0, #1
 8002f36:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	@ (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	@ (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	@ 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	@ (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	210f      	movs	r1, #15
 800302c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003030:	f7ff ff8e 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	@ (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	@ (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff29 	bl	8002eb0 <__NVIC_SetPriorityGrouping>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003078:	f7ff ff3e 	bl	8002ef8 <__NVIC_GetPriorityGrouping>
 800307c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7ff ff8e 	bl	8002fa4 <NVIC_EncodePriority>
 8003088:	4602      	mov	r2, r0
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff5d 	bl	8002f50 <__NVIC_SetPriority>
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff31 	bl	8002f14 <__NVIC_EnableIRQ>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ffa2 	bl	800300c <SysTick_Config>
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7fe ffc6 	bl	8002070 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e099      	b.n	8003224 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003110:	e00f      	b.n	8003132 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003112:	f7fe ffad 	bl	8002070 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b05      	cmp	r3, #5
 800311e:	d908      	bls.n	8003132 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e078      	b.n	8003224 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e8      	bne.n	8003112 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4b38      	ldr	r3, [pc, #224]	@ (800322c <HAL_DMA_Init+0x158>)
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	2b04      	cmp	r3, #4
 800318a:	d107      	bne.n	800319c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	4313      	orrs	r3, r2
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d117      	bne.n	80031f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb01 	bl	80037e0 <DMA_CheckFifoParam>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2240      	movs	r2, #64	@ 0x40
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031f2:	2301      	movs	r3, #1
 80031f4:	e016      	b.n	8003224 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fab8 	bl	8003774 <DMA_CalcBaseAndBitshift>
 8003204:	4603      	mov	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	223f      	movs	r2, #63	@ 0x3f
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	f010803f 	.word	0xf010803f

08003230 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Start_IT+0x26>
 8003252:	2302      	movs	r3, #2
 8003254:	e040      	b.n	80032d8 <HAL_DMA_Start_IT+0xa8>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d12f      	bne.n	80032ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa4a 	bl	8003718 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	223f      	movs	r2, #63	@ 0x3f
 800328a:	409a      	lsls	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0216 	orr.w	r2, r2, #22
 800329e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e005      	b.n	80032d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032ee:	f7fe febf 	bl	8002070 <HAL_GetTick>
 80032f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d008      	beq.n	8003312 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	@ 0x80
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e052      	b.n	80033b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0216 	bic.w	r2, r2, #22
 8003320:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003330:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_DMA_Abort+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003362:	e013      	b.n	800338c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003364:	f7fe fe84 	bl	8002070 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b05      	cmp	r3, #5
 8003370:	d90c      	bls.n	800338c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e015      	b.n	80033b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e4      	bne.n	8003364 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	223f      	movs	r2, #63	@ 0x3f
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	@ 0x80
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e00c      	b.n	80033f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2205      	movs	r2, #5
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003410:	4b8e      	ldr	r3, [pc, #568]	@ (800364c <HAL_DMA_IRQHandler+0x248>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a8e      	ldr	r2, [pc, #568]	@ (8003650 <HAL_DMA_IRQHandler+0x24c>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	2208      	movs	r2, #8
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01a      	beq.n	8003470 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0204 	bic.w	r2, r2, #4
 8003456:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	2208      	movs	r2, #8
 800345e:	409a      	lsls	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	f043 0202 	orr.w	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	2204      	movs	r2, #4
 80034ac:	409a      	lsls	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d012      	beq.n	80034dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	2204      	movs	r2, #4
 80034ca:	409a      	lsls	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	2210      	movs	r2, #16
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d043      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d03c      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	2210      	movs	r2, #16
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d018      	beq.n	8003546 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d024      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	e01f      	b.n	8003574 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e016      	b.n	8003574 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0208 	bic.w	r2, r2, #8
 8003562:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	2220      	movs	r2, #32
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 808f 	beq.w	80036a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8087 	beq.w	80036a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	2220      	movs	r2, #32
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d136      	bne.n	800361c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0216 	bic.w	r2, r2, #22
 80035bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_DMA_IRQHandler+0x1da>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f2:	223f      	movs	r2, #63	@ 0x3f
 80035f4:	409a      	lsls	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d07e      	beq.n	8003710 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
        }
        return;
 800361a:	e079      	b.n	8003710 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01d      	beq.n	8003666 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	2b00      	cmp	r3, #0
 800363e:	d031      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
 8003648:	e02c      	b.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
 800364a:	bf00      	nop
 800364c:	200000b8 	.word	0x200000b8
 8003650:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d023      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
 8003664:	e01e      	b.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10f      	bne.n	8003694 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0210 	bic.w	r2, r2, #16
 8003682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d032      	beq.n	8003712 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2205      	movs	r2, #5
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d307      	bcc.n	80036ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f2      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x2cc>
 80036ea:	e000      	b.n	80036ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e000      	b.n	8003712 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003710:	bf00      	nop
    }
  }
}
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003734:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b40      	cmp	r3, #64	@ 0x40
 8003744:	d108      	bne.n	8003758 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003756:	e007      	b.n	8003768 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3b10      	subs	r3, #16
 8003784:	4a14      	ldr	r2, [pc, #80]	@ (80037d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800378e:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <DMA_CalcBaseAndBitshift+0x68>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d909      	bls.n	80037b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80037b4:	e007      	b.n	80037c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	aaaaaaab 	.word	0xaaaaaaab
 80037dc:	080064d0 	.word	0x080064d0

080037e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11f      	bne.n	800383a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d856      	bhi.n	80038ae <DMA_CheckFifoParam+0xce>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <DMA_CheckFifoParam+0x28>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	0800382b 	.word	0x0800382b
 8003810:	08003819 	.word	0x08003819
 8003814:	080038af 	.word	0x080038af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d046      	beq.n	80038b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e043      	b.n	80038b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003832:	d140      	bne.n	80038b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e03d      	b.n	80038b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003842:	d121      	bne.n	8003888 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d837      	bhi.n	80038ba <DMA_CheckFifoParam+0xda>
 800384a:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <DMA_CheckFifoParam+0x70>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003861 	.word	0x08003861
 8003854:	08003867 	.word	0x08003867
 8003858:	08003861 	.word	0x08003861
 800385c:	08003879 	.word	0x08003879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e030      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d025      	beq.n	80038be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003876:	e022      	b.n	80038be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003886:	e01c      	b.n	80038c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d903      	bls.n	8003896 <DMA_CheckFifoParam+0xb6>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d003      	beq.n	800389c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003894:	e018      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      break;
 800389a:	e015      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      break;
 80038ac:	e00b      	b.n	80038c6 <DMA_CheckFifoParam+0xe6>
      break;
 80038ae:	bf00      	nop
 80038b0:	e00a      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e008      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
 80038b8:	e006      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
    }
  } 
  
  return status; 
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	@ 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e159      	b.n	8003ba8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f4:	2201      	movs	r2, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	429a      	cmp	r2, r3
 800390e:	f040 8148 	bne.w	8003ba2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d005      	beq.n	800392a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003926:	2b02      	cmp	r3, #2
 8003928:	d130      	bne.n	800398c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003960:	2201      	movs	r2, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0201 	and.w	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b03      	cmp	r3, #3
 8003996:	d017      	beq.n	80039c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d123      	bne.n	8003a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	220f      	movs	r2, #15
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0203 	and.w	r2, r3, #3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a2 	beq.w	8003ba2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4b57      	ldr	r3, [pc, #348]	@ (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	4a56      	ldr	r2, [pc, #344]	@ (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a6e:	4b54      	ldr	r3, [pc, #336]	@ (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7a:	4a52      	ldr	r2, [pc, #328]	@ (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	@ (8003bc8 <HAL_GPIO_Init+0x2f0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x202>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a48      	ldr	r2, [pc, #288]	@ (8003bcc <HAL_GPIO_Init+0x2f4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x1fe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a47      	ldr	r2, [pc, #284]	@ (8003bd0 <HAL_GPIO_Init+0x2f8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a46      	ldr	r2, [pc, #280]	@ (8003bd4 <HAL_GPIO_Init+0x2fc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x1f6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a45      	ldr	r2, [pc, #276]	@ (8003bd8 <HAL_GPIO_Init+0x300>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x1f2>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	e008      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e004      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ada:	2300      	movs	r3, #0
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f002 0203 	and.w	r2, r2, #3
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	4093      	lsls	r3, r2
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aec:	4935      	ldr	r1, [pc, #212]	@ (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	3302      	adds	r3, #2
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afa:	4b38      	ldr	r3, [pc, #224]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b24:	4b2d      	ldr	r3, [pc, #180]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b48:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b4e:	4b23      	ldr	r3, [pc, #140]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b72:	4a1a      	ldr	r2, [pc, #104]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b78:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	f67f aea2 	bls.w	80038f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3724      	adds	r7, #36	@ 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bfc:	e003      	b.n	8003c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e12b      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd ffe4 	bl	8001c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c78:	f000 fd40 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a81      	ldr	r2, [pc, #516]	@ (8003e88 <HAL_I2C_Init+0x274>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d807      	bhi.n	8003c98 <HAL_I2C_Init+0x84>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a80      	ldr	r2, [pc, #512]	@ (8003e8c <HAL_I2C_Init+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e006      	b.n	8003ca6 <HAL_I2C_Init+0x92>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e90 <HAL_I2C_Init+0x27c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf94      	ite	ls
 8003ca0:	2301      	movls	r3, #1
 8003ca2:	2300      	movhi	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0e7      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a78      	ldr	r2, [pc, #480]	@ (8003e94 <HAL_I2C_Init+0x280>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0c9b      	lsrs	r3, r3, #18
 8003cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8003e88 <HAL_I2C_Init+0x274>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d802      	bhi.n	8003ce8 <HAL_I2C_Init+0xd4>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	e009      	b.n	8003cfc <HAL_I2C_Init+0xe8>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a69      	ldr	r2, [pc, #420]	@ (8003e98 <HAL_I2C_Init+0x284>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	495c      	ldr	r1, [pc, #368]	@ (8003e88 <HAL_I2C_Init+0x274>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d819      	bhi.n	8003d50 <HAL_I2C_Init+0x13c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e59      	subs	r1, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d30:	400b      	ands	r3, r1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_I2C_Init+0x138>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e59      	subs	r1, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	e051      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e04f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d111      	bne.n	8003d7c <HAL_I2C_Init+0x168>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e012      	b.n	8003da2 <HAL_I2C_Init+0x18e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	0099      	lsls	r1, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Init+0x196>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <HAL_I2C_Init+0x1bc>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e58      	subs	r0, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	440b      	add	r3, r1
 8003dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dce:	e00f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	6809      	ldr	r1, [r1, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6911      	ldr	r1, [r2, #16]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	000186a0 	.word	0x000186a0
 8003e8c:	001e847f 	.word	0x001e847f
 8003e90:	003d08ff 	.word	0x003d08ff
 8003e94:	431bde83 	.word	0x431bde83
 8003e98:	10624dd3 	.word	0x10624dd3

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e267      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d075      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003eba:	4b88      	ldr	r3, [pc, #544]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec6:	4b85      	ldr	r3, [pc, #532]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d112      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed2:	4b82      	ldr	r3, [pc, #520]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05b      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x108>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d157      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e242      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f00:	d106      	bne.n	8003f10 <HAL_RCC_OscConfig+0x74>
 8003f02:	4b76      	ldr	r3, [pc, #472]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a75      	ldr	r2, [pc, #468]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x98>
 8003f1a:	4b70      	ldr	r3, [pc, #448]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6f      	ldr	r2, [pc, #444]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b6d      	ldr	r3, [pc, #436]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6c      	ldr	r2, [pc, #432]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f34:	4b69      	ldr	r3, [pc, #420]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a68      	ldr	r2, [pc, #416]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b66      	ldr	r3, [pc, #408]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a65      	ldr	r2, [pc, #404]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe f88c 	bl	8002070 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fe f888 	bl	8002070 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	@ 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e207      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xc0>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe f878 	bl	8002070 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe f874 	bl	8002070 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	@ 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1f3      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	4b51      	ldr	r3, [pc, #324]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0xe8>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fbe:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11c      	bne.n	8004004 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fca:	4b44      	ldr	r3, [pc, #272]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d116      	bne.n	8004004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	4b41      	ldr	r3, [pc, #260]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x152>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e1c7      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fee:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4937      	ldr	r1, [pc, #220]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	e03a      	b.n	800407a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400c:	4b34      	ldr	r3, [pc, #208]	@ (80040e0 <HAL_RCC_OscConfig+0x244>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fe f82d 	bl	8002070 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401a:	f7fe f829 	bl	8002070 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e1a8      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4925      	ldr	r1, [pc, #148]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404e:	4b24      	ldr	r3, [pc, #144]	@ (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe f80c 	bl	8002070 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405c:	f7fe f808 	bl	8002070 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e187      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d036      	beq.n	80040f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_RCC_OscConfig+0x248>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd ffec 	bl	8002070 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fd ffe8 	bl	8002070 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e167      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 80040b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x200>
 80040ba:	e01b      	b.n	80040f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040bc:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RCC_OscConfig+0x248>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c2:	f7fd ffd5 	bl	8002070 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c8:	e00e      	b.n	80040e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ca:	f7fd ffd1 	bl	8002070 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d907      	bls.n	80040e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e150      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
 80040dc:	40023800 	.word	0x40023800
 80040e0:	42470000 	.word	0x42470000
 80040e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	4b88      	ldr	r3, [pc, #544]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ea      	bne.n	80040ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8097 	beq.w	8004230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004106:	4b81      	ldr	r3, [pc, #516]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	4b7d      	ldr	r3, [pc, #500]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	4a7c      	ldr	r2, [pc, #496]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	@ 0x40
 8004122:	4b7a      	ldr	r3, [pc, #488]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b77      	ldr	r3, [pc, #476]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d118      	bne.n	8004170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413e:	4b74      	ldr	r3, [pc, #464]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a73      	ldr	r2, [pc, #460]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414a:	f7fd ff91 	bl	8002070 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fd ff8d 	bl	8002070 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e10c      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	4b6a      	ldr	r3, [pc, #424]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x2ea>
 8004178:	4b64      	ldr	r3, [pc, #400]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a63      	ldr	r2, [pc, #396]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	@ 0x70
 8004184:	e01c      	b.n	80041c0 <HAL_RCC_OscConfig+0x324>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x30c>
 800418e:	4b5f      	ldr	r3, [pc, #380]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a5e      	ldr	r2, [pc, #376]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
 800419a:	4b5c      	ldr	r3, [pc, #368]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	4a5b      	ldr	r2, [pc, #364]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0x324>
 80041a8:	4b58      	ldr	r3, [pc, #352]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a57      	ldr	r2, [pc, #348]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b4:	4b55      	ldr	r3, [pc, #340]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	4a54      	ldr	r2, [pc, #336]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041ba:	f023 0304 	bic.w	r3, r3, #4
 80041be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd ff52 	bl	8002070 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd ff4e 	bl	8002070 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0cb      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e6:	4b49      	ldr	r3, [pc, #292]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ee      	beq.n	80041d0 <HAL_RCC_OscConfig+0x334>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f4:	f7fd ff3c 	bl	8002070 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fd ff38 	bl	8002070 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0b5      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004212:	4b3e      	ldr	r3, [pc, #248]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ee      	bne.n	80041fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004224:	4b39      	ldr	r3, [pc, #228]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	4a38      	ldr	r2, [pc, #224]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800422a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a1 	beq.w	800437c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423a:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b08      	cmp	r3, #8
 8004244:	d05c      	beq.n	8004300 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d141      	bne.n	80042d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCC_OscConfig+0x478>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd ff0c 	bl	8002070 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fd ff08 	bl	8002070 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e087      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	4b27      	ldr	r3, [pc, #156]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	491b      	ldr	r1, [pc, #108]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <HAL_RCC_OscConfig+0x478>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fd fee1 	bl	8002070 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fedd 	bl	8002070 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e05c      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x416>
 80042d0:	e054      	b.n	800437c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <HAL_RCC_OscConfig+0x478>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fd feca 	bl	8002070 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fd fec6 	bl	8002070 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e045      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x444>
 80042fe:	e03d      	b.n	800437c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e038      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000
 8004314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <HAL_RCC_OscConfig+0x4ec>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d028      	beq.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004330:	429a      	cmp	r2, r3
 8004332:	d121      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d11a      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800434e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004350:	4293      	cmp	r3, r2
 8004352:	d111      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	3b01      	subs	r3, #1
 8004362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0cc      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a0:	4b68      	ldr	r3, [pc, #416]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d90c      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b65      	ldr	r3, [pc, #404]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b63      	ldr	r3, [pc, #396]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0b8      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e0:	4b59      	ldr	r3, [pc, #356]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a58      	ldr	r2, [pc, #352]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f8:	4b53      	ldr	r3, [pc, #332]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4a52      	ldr	r2, [pc, #328]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004404:	4b50      	ldr	r3, [pc, #320]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	494d      	ldr	r1, [pc, #308]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d044      	beq.n	80044ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b47      	ldr	r3, [pc, #284]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d119      	bne.n	800446a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07f      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d003      	beq.n	800444a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004446:	2b03      	cmp	r3, #3
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444a:	4b3f      	ldr	r3, [pc, #252]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e06f      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445a:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e067      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446a:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 0203 	bic.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4934      	ldr	r1, [pc, #208]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800447c:	f7fd fdf8 	bl	8002070 <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004482:	e00a      	b.n	800449a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004484:	f7fd fdf4 	bl	8002070 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e04f      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	4b2b      	ldr	r3, [pc, #172]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 020c 	and.w	r2, r3, #12
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d1eb      	bne.n	8004484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ac:	4b25      	ldr	r3, [pc, #148]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d20c      	bcs.n	80044d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b22      	ldr	r3, [pc, #136]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b20      	ldr	r3, [pc, #128]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e032      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e0:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4916      	ldr	r1, [pc, #88]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fe:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	490e      	ldr	r1, [pc, #56]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004512:	f000 f821 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8004516:	4602      	mov	r2, r0
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	490a      	ldr	r1, [pc, #40]	@ (800454c <HAL_RCC_ClockConfig+0x1c0>)
 8004524:	5ccb      	ldrb	r3, [r1, r3]
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fd58 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023c00 	.word	0x40023c00
 8004548:	40023800 	.word	0x40023800
 800454c:	080064b8 	.word	0x080064b8
 8004550:	200000b8 	.word	0x200000b8
 8004554:	200000bc 	.word	0x200000bc

08004558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b090      	sub	sp, #64	@ 0x40
 800455e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004570:	4b59      	ldr	r3, [pc, #356]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b08      	cmp	r3, #8
 800457a:	d00d      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x40>
 800457c:	2b08      	cmp	r3, #8
 800457e:	f200 80a1 	bhi.w	80046c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x34>
 8004586:	2b04      	cmp	r3, #4
 8004588:	d003      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0x3a>
 800458a:	e09b      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800458c:	4b53      	ldr	r3, [pc, #332]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x184>)
 800458e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004590:	e09b      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004592:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004594:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004596:	e098      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004598:	4b4f      	ldr	r3, [pc, #316]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a2:	4b4d      	ldr	r3, [pc, #308]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d028      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ae:	4b4a      	ldr	r3, [pc, #296]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	099b      	lsrs	r3, r3, #6
 80045b4:	2200      	movs	r2, #0
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045c0:	2100      	movs	r1, #0
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045c4:	fb03 f201 	mul.w	r2, r3, r1
 80045c8:	2300      	movs	r3, #0
 80045ca:	fb00 f303 	mul.w	r3, r0, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	4a43      	ldr	r2, [pc, #268]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045d2:	fba0 1202 	umull	r1, r2, r0, r2
 80045d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d8:	460a      	mov	r2, r1
 80045da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045de:	4413      	add	r3, r2
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e4:	2200      	movs	r2, #0
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	61fa      	str	r2, [r7, #28]
 80045ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045f2:	f7fc fa6f 	bl	8000ad4 <__aeabi_uldivmod>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4613      	mov	r3, r2
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045fe:	e053      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004600:	4b35      	ldr	r3, [pc, #212]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	2200      	movs	r2, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	617a      	str	r2, [r7, #20]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004612:	f04f 0b00 	mov.w	fp, #0
 8004616:	4652      	mov	r2, sl
 8004618:	465b      	mov	r3, fp
 800461a:	f04f 0000 	mov.w	r0, #0
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	0159      	lsls	r1, r3, #5
 8004624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004628:	0150      	lsls	r0, r2, #5
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	ebb2 080a 	subs.w	r8, r2, sl
 8004632:	eb63 090b 	sbc.w	r9, r3, fp
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004642:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004646:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800464a:	ebb2 0408 	subs.w	r4, r2, r8
 800464e:	eb63 0509 	sbc.w	r5, r3, r9
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	00eb      	lsls	r3, r5, #3
 800465c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004660:	00e2      	lsls	r2, r4, #3
 8004662:	4614      	mov	r4, r2
 8004664:	461d      	mov	r5, r3
 8004666:	eb14 030a 	adds.w	r3, r4, sl
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	eb45 030b 	adc.w	r3, r5, fp
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800467e:	4629      	mov	r1, r5
 8004680:	028b      	lsls	r3, r1, #10
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004688:	4621      	mov	r1, r4
 800468a:	028a      	lsls	r2, r1, #10
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	2200      	movs	r2, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	60fa      	str	r2, [r7, #12]
 8004698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800469c:	f7fc fa1a 	bl	8000ad4 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	3301      	adds	r3, #1
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046c2:	e002      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x184>)
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3740      	adds	r7, #64	@ 0x40
 80046d0:	46bd      	mov	sp, r7
 80046d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	00f42400 	.word	0x00f42400
 80046e0:	017d7840 	.word	0x017d7840

080046e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e8:	4b03      	ldr	r3, [pc, #12]	@ (80046f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	200000b8 	.word	0x200000b8

080046fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004700:	f7ff fff0 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8004704:	4602      	mov	r2, r0
 8004706:	4b05      	ldr	r3, [pc, #20]	@ (800471c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	0a9b      	lsrs	r3, r3, #10
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	4903      	ldr	r1, [pc, #12]	@ (8004720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004712:	5ccb      	ldrb	r3, [r1, r3]
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40023800 	.word	0x40023800
 8004720:	080064c8 	.word	0x080064c8

08004724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004728:	f7ff ffdc 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 800472c:	4602      	mov	r2, r0
 800472e:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	0b5b      	lsrs	r3, r3, #13
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	4903      	ldr	r1, [pc, #12]	@ (8004748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800473a:	5ccb      	ldrb	r3, [r1, r3]
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40023800 	.word	0x40023800
 8004748:	080064c8 	.word	0x080064c8

0800474c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fa90 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 fb1c 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e03c      	b.n	800487e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <HAL_TIM_Base_Start+0xa0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_TIM_Base_Start+0x5c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481e:	d013      	beq.n	8004848 <HAL_TIM_Base_Start+0x5c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1a      	ldr	r2, [pc, #104]	@ (8004890 <HAL_TIM_Base_Start+0xa4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_TIM_Base_Start+0x5c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <HAL_TIM_Base_Start+0xa8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_TIM_Base_Start+0x5c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <HAL_TIM_Base_Start+0xac>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_Base_Start+0x5c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a16      	ldr	r2, [pc, #88]	@ (800489c <HAL_TIM_Base_Start+0xb0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d111      	bne.n	800486c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d010      	beq.n	800487c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	e007      	b.n	800487c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f839 	bl	800493e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 fa72 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_TIM_PWM_Start+0x24>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e022      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d109      	bne.n	8004992 <HAL_TIM_PWM_Start+0x3e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e015      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start+0x58>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e008      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e068      	b.n	8004a98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0x82>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d4:	e013      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x92>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e4:	e00b      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xa2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	e003      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fc8a 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a23      	ldr	r2, [pc, #140]	@ (8004aa0 <HAL_TIM_PWM_Start+0x14c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d107      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <HAL_TIM_PWM_Start+0x14c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d013      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a19      	ldr	r2, [pc, #100]	@ (8004aa4 <HAL_TIM_PWM_Start+0x150>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <HAL_TIM_PWM_Start+0x154>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <HAL_TIM_PWM_Start+0x158>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <HAL_TIM_PWM_Start+0x15c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d010      	beq.n	8004a96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	e007      	b.n	8004a96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40014000 	.word	0x40014000

08004ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0ae      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	f200 809f 	bhi.w	8004c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004c21 	.word	0x08004c21
 8004af0:	08004c21 	.word	0x08004c21
 8004af4:	08004c21 	.word	0x08004c21
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004c21 	.word	0x08004c21
 8004b00:	08004c21 	.word	0x08004c21
 8004b04:	08004c21 	.word	0x08004c21
 8004b08:	08004b9f 	.word	0x08004b9f
 8004b0c:	08004c21 	.word	0x08004c21
 8004b10:	08004c21 	.word	0x08004c21
 8004b14:	08004c21 	.word	0x08004c21
 8004b18:	08004bdf 	.word	0x08004bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f9d6 	bl	8004ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e064      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa1c 	bl	8004fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e043      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fa67 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e023      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fab1 	bl	800514c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_ConfigClockSource+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0b4      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x186>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8c:	d03e      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xd4>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c92:	f200 8087 	bhi.w	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_TIM_ConfigClockSource+0x172>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	d87f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d01a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0xa6>
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d87b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d050      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d877      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d03c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xfa>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d873      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d058      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d86f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d064      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d86b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d060      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d867      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d05a      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	e062      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	f000 faf7 	bl	80052e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 fae0 	bl	80052e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d2e:	609a      	str	r2, [r3, #8]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fa54 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2150      	movs	r1, #80	@ 0x50
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 faad 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d50:	e02c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fa73 	bl	800524a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2160      	movs	r1, #96	@ 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa9d 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d70:	e01c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fa34 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2140      	movs	r1, #64	@ 0x40
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fa8d 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fa84 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004da2:	e003      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a37      	ldr	r2, [pc, #220]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a34      	ldr	r2, [pc, #208]	@ (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	@ (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ec8 <TIM_Base_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a21      	ldr	r2, [pc, #132]	@ (8004ecc <TIM_Base_SetConfig+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ed0 <TIM_Base_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d103      	bne.n	8004e92 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f023 0201 	bic.w	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0302 	bic.w	r3, r3, #2
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10c      	bne.n	8004f4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0308 	bic.w	r3, r3, #8
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	@ (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d111      	bne.n	8004f76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000

08004fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f023 0210 	bic.w	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0320 	bic.w	r3, r3, #32
 8004fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8005074 <TIM_OC2_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10d      	bne.n	800501c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a15      	ldr	r2, [pc, #84]	@ (8005074 <TIM_OC2_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010000 	.word	0x40010000

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10d      	bne.n	80050f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d113      	bne.n	8005122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a10      	ldr	r2, [pc, #64]	@ (80051e8 <TIM_OC4_SetConfig+0x9c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d109      	bne.n	80051c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 030a 	bic.w	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f023 0210 	bic.w	r2, r3, #16
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f043 0307 	orr.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e050      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005460:	2302      	movs	r3, #2
 8005462:	e03d      	b.n	80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e042      	b.n	8005584 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc fc30 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	@ 0x24
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800552e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fc99 	bl	8005e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b0ba      	sub	sp, #232	@ 0xe8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_UART_IRQHandler+0x66>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fb7e 	bl	8005cec <UART_Receive_IT>
      return;
 80055f0:	e273      	b.n	8005ada <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80de 	beq.w	80057b8 <HAL_UART_IRQHandler+0x22c>
 80055fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80d1 	beq.w	80057b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <HAL_UART_IRQHandler+0xae>
 8005622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005632:	f043 0201 	orr.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <HAL_UART_IRQHandler+0xd2>
 8005646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	f043 0202 	orr.w	r2, r3, #2
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_UART_IRQHandler+0xf6>
 800566a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f043 0204 	orr.w	r2, r3, #4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d011      	beq.n	80056b2 <HAL_UART_IRQHandler+0x126>
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800569a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056aa:	f043 0208 	orr.w	r2, r3, #8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 820a 	beq.w	8005ad0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_UART_IRQHandler+0x14e>
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fb09 	bl	8005cec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <HAL_UART_IRQHandler+0x17a>
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d04f      	beq.n	80057a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa14 	bl	8005b34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b40      	cmp	r3, #64	@ 0x40
 8005718:	d141      	bne.n	800579e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005746:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800574a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800575e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1d9      	bne.n	800571a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d013      	beq.n	8005796 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005772:	4a8a      	ldr	r2, [pc, #552]	@ (800599c <HAL_UART_IRQHandler+0x410>)
 8005774:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd fe20 	bl	80033c0 <HAL_DMA_Abort_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	e00e      	b.n	80057b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f9b6 	bl	8005b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	e00a      	b.n	80057b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9b2 	bl	8005b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	e006      	b.n	80057b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f9ae 	bl	8005b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057b2:	e18d      	b.n	8005ad0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	bf00      	nop
    return;
 80057b6:	e18b      	b.n	8005ad0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	2b01      	cmp	r3, #1
 80057be:	f040 8167 	bne.w	8005a90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 8160 	beq.w	8005a90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80057d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8159 	beq.w	8005a90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fe:	2b40      	cmp	r3, #64	@ 0x40
 8005800:	f040 80ce 	bne.w	80059a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80a9 	beq.w	800596c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800581e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005822:	429a      	cmp	r2, r3
 8005824:	f080 80a2 	bcs.w	800596c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800582e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800583a:	f000 8088 	beq.w	800594e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800585c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800586a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800586e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1d9      	bne.n	800583e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800589a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3314      	adds	r3, #20
 80058aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e1      	bne.n	800588a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3314      	adds	r3, #20
 80058cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e3      	bne.n	80058c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800591c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800591e:	f023 0310 	bic.w	r3, r3, #16
 8005922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005930:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005932:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800593e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e3      	bne.n	800590c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005948:	4618      	mov	r0, r3
 800594a:	f7fd fcc9 	bl	80032e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800595c:	b29b      	uxth	r3, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8d9 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800596a:	e0b3      	b.n	8005ad4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005974:	429a      	cmp	r2, r3
 8005976:	f040 80ad 	bne.w	8005ad4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005984:	f040 80a6 	bne.w	8005ad4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f8c1 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
      return;
 800599a:	e09b      	b.n	8005ad4 <HAL_UART_IRQHandler+0x548>
 800599c:	08005bfb 	.word	0x08005bfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 808e 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80059bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8089 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80059ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e3      	bne.n	80059c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3314      	adds	r3, #20
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e3      	bne.n	80059fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0310 	bic.w	r3, r3, #16
 8005a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a68:	61fa      	str	r2, [r7, #28]
 8005a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	69b9      	ldr	r1, [r7, #24]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	617b      	str	r3, [r7, #20]
   return(result);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e3      	bne.n	8005a44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f847 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a8e:	e023      	b.n	8005ad8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x524>
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8b7 	bl	8005c1c <UART_Transmit_IT>
    return;
 8005aae:	e014      	b.n	8005ada <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00e      	beq.n	8005ada <HAL_UART_IRQHandler+0x54e>
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8f7 	bl	8005cbc <UART_EndTransmit_IT>
    return;
 8005ace:	e004      	b.n	8005ada <HAL_UART_IRQHandler+0x54e>
    return;
 8005ad0:	bf00      	nop
 8005ad2:	e002      	b.n	8005ada <HAL_UART_IRQHandler+0x54e>
      return;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <HAL_UART_IRQHandler+0x54e>
      return;
 8005ad8:	bf00      	nop
  }
}
 8005ada:	37e8      	adds	r7, #232	@ 0xe8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b095      	sub	sp, #84	@ 0x54
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3314      	adds	r3, #20
 8005b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d119      	bne.n	8005be0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bcc:	61ba      	str	r2, [r7, #24]
 8005bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	@ 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff ff7a 	bl	8005b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b21      	cmp	r3, #33	@ 0x21
 8005c2e:	d13e      	bne.n	8005cae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c38:	d114      	bne.n	8005c64 <UART_Transmit_IT+0x48>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d110      	bne.n	8005c64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]
 8005c62:	e008      	b.n	8005c76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6211      	str	r1, [r2, #32]
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4619      	mov	r1, r3
 8005c84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10f      	bne.n	8005caa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ca8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff feff 	bl	8005ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	@ 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b22      	cmp	r3, #34	@ 0x22
 8005d06:	f040 80aa 	bne.w	8005e5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d12:	d115      	bne.n	8005d40 <UART_Receive_IT+0x54>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d111      	bne.n	8005d40 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d3e:	e024      	b.n	8005d8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4e:	d007      	beq.n	8005d60 <UART_Receive_IT+0x74>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <UART_Receive_IT+0x82>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	e008      	b.n	8005d80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4619      	mov	r1, r3
 8005d98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d15d      	bne.n	8005e5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0220 	bic.w	r2, r2, #32
 8005dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0201 	bic.w	r2, r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d135      	bne.n	8005e50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f023 0310 	bic.w	r3, r3, #16
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e0a:	623a      	str	r2, [r7, #32]
 8005e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	69f9      	ldr	r1, [r7, #28]
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d10a      	bne.n	8005e42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fe67 	bl	8005b1c <HAL_UARTEx_RxEventCallback>
 8005e4e:	e002      	b.n	8005e56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fe4f 	bl	8005af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e002      	b.n	8005e60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3730      	adds	r7, #48	@ 0x30
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e6c:	b0c0      	sub	sp, #256	@ 0x100
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e84:	68d9      	ldr	r1, [r3, #12]
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	ea40 0301 	orr.w	r3, r0, r1
 8005e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ec0:	f021 010c 	bic.w	r1, r1, #12
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee2:	6999      	ldr	r1, [r3, #24]
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	ea40 0301 	orr.w	r3, r0, r1
 8005eee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b8f      	ldr	r3, [pc, #572]	@ (8006134 <UART_SetConfig+0x2cc>)
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d005      	beq.n	8005f08 <UART_SetConfig+0xa0>
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b8d      	ldr	r3, [pc, #564]	@ (8006138 <UART_SetConfig+0x2d0>)
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d104      	bne.n	8005f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f08:	f7fe fc0c 	bl	8004724 <HAL_RCC_GetPCLK2Freq>
 8005f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f10:	e003      	b.n	8005f1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f12:	f7fe fbf3 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8005f16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f24:	f040 810c 	bne.w	8006140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	1891      	adds	r1, r2, r2
 8005f40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f42:	415b      	adcs	r3, r3
 8005f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	eb12 0801 	adds.w	r8, r2, r1
 8005f50:	4629      	mov	r1, r5
 8005f52:	eb43 0901 	adc.w	r9, r3, r1
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f6a:	4690      	mov	r8, r2
 8005f6c:	4699      	mov	r9, r3
 8005f6e:	4623      	mov	r3, r4
 8005f70:	eb18 0303 	adds.w	r3, r8, r3
 8005f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f78:	462b      	mov	r3, r5
 8005f7a:	eb49 0303 	adc.w	r3, r9, r3
 8005f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f96:	460b      	mov	r3, r1
 8005f98:	18db      	adds	r3, r3, r3
 8005f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	eb42 0303 	adc.w	r3, r2, r3
 8005fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fac:	f7fa fd92 	bl	8000ad4 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4b61      	ldr	r3, [pc, #388]	@ (800613c <UART_SetConfig+0x2d4>)
 8005fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	011c      	lsls	r4, r3, #4
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	1891      	adds	r1, r2, r2
 8005fd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006000:	4692      	mov	sl, r2
 8006002:	469b      	mov	fp, r3
 8006004:	4643      	mov	r3, r8
 8006006:	eb1a 0303 	adds.w	r3, sl, r3
 800600a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800600e:	464b      	mov	r3, r9
 8006010:	eb4b 0303 	adc.w	r3, fp, r3
 8006014:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006024:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800602c:	460b      	mov	r3, r1
 800602e:	18db      	adds	r3, r3, r3
 8006030:	643b      	str	r3, [r7, #64]	@ 0x40
 8006032:	4613      	mov	r3, r2
 8006034:	eb42 0303 	adc.w	r3, r2, r3
 8006038:	647b      	str	r3, [r7, #68]	@ 0x44
 800603a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800603e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006042:	f7fa fd47 	bl	8000ad4 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4611      	mov	r1, r2
 800604c:	4b3b      	ldr	r3, [pc, #236]	@ (800613c <UART_SetConfig+0x2d4>)
 800604e:	fba3 2301 	umull	r2, r3, r3, r1
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2264      	movs	r2, #100	@ 0x64
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006062:	4b36      	ldr	r3, [pc, #216]	@ (800613c <UART_SetConfig+0x2d4>)
 8006064:	fba3 2302 	umull	r2, r3, r3, r2
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006070:	441c      	add	r4, r3
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006076:	2200      	movs	r2, #0
 8006078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800607c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	1891      	adds	r1, r2, r2
 800608a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800608c:	415b      	adcs	r3, r3
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006094:	4641      	mov	r1, r8
 8006096:	1851      	adds	r1, r2, r1
 8006098:	6339      	str	r1, [r7, #48]	@ 0x30
 800609a:	4649      	mov	r1, r9
 800609c:	414b      	adcs	r3, r1
 800609e:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060ac:	4659      	mov	r1, fp
 80060ae:	00cb      	lsls	r3, r1, #3
 80060b0:	4651      	mov	r1, sl
 80060b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b6:	4651      	mov	r1, sl
 80060b8:	00ca      	lsls	r2, r1, #3
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	4642      	mov	r2, r8
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060c8:	464b      	mov	r3, r9
 80060ca:	460a      	mov	r2, r1
 80060cc:	eb42 0303 	adc.w	r3, r2, r3
 80060d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060e8:	460b      	mov	r3, r1
 80060ea:	18db      	adds	r3, r3, r3
 80060ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ee:	4613      	mov	r3, r2
 80060f0:	eb42 0303 	adc.w	r3, r2, r3
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060fe:	f7fa fce9 	bl	8000ad4 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4b0d      	ldr	r3, [pc, #52]	@ (800613c <UART_SetConfig+0x2d4>)
 8006108:	fba3 1302 	umull	r1, r3, r3, r2
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	2164      	movs	r1, #100	@ 0x64
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	3332      	adds	r3, #50	@ 0x32
 800611a:	4a08      	ldr	r2, [pc, #32]	@ (800613c <UART_SetConfig+0x2d4>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f003 0207 	and.w	r2, r3, #7
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4422      	add	r2, r4
 800612e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006130:	e106      	b.n	8006340 <UART_SetConfig+0x4d8>
 8006132:	bf00      	nop
 8006134:	40011000 	.word	0x40011000
 8006138:	40011400 	.word	0x40011400
 800613c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800614a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800614e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006152:	4642      	mov	r2, r8
 8006154:	464b      	mov	r3, r9
 8006156:	1891      	adds	r1, r2, r2
 8006158:	6239      	str	r1, [r7, #32]
 800615a:	415b      	adcs	r3, r3
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
 800615e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006162:	4641      	mov	r1, r8
 8006164:	1854      	adds	r4, r2, r1
 8006166:	4649      	mov	r1, r9
 8006168:	eb43 0501 	adc.w	r5, r3, r1
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	00eb      	lsls	r3, r5, #3
 8006176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800617a:	00e2      	lsls	r2, r4, #3
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	4643      	mov	r3, r8
 8006182:	18e3      	adds	r3, r4, r3
 8006184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006188:	464b      	mov	r3, r9
 800618a:	eb45 0303 	adc.w	r3, r5, r3
 800618e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800619e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061ae:	4629      	mov	r1, r5
 80061b0:	008b      	lsls	r3, r1, #2
 80061b2:	4621      	mov	r1, r4
 80061b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b8:	4621      	mov	r1, r4
 80061ba:	008a      	lsls	r2, r1, #2
 80061bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061c0:	f7fa fc88 	bl	8000ad4 <__aeabi_uldivmod>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4b60      	ldr	r3, [pc, #384]	@ (800634c <UART_SetConfig+0x4e4>)
 80061ca:	fba3 2302 	umull	r2, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	011c      	lsls	r4, r3, #4
 80061d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	1891      	adds	r1, r2, r2
 80061ea:	61b9      	str	r1, [r7, #24]
 80061ec:	415b      	adcs	r3, r3
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061f4:	4641      	mov	r1, r8
 80061f6:	1851      	adds	r1, r2, r1
 80061f8:	6139      	str	r1, [r7, #16]
 80061fa:	4649      	mov	r1, r9
 80061fc:	414b      	adcs	r3, r1
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800620c:	4659      	mov	r1, fp
 800620e:	00cb      	lsls	r3, r1, #3
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006216:	4651      	mov	r1, sl
 8006218:	00ca      	lsls	r2, r1, #3
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	4603      	mov	r3, r0
 8006220:	4642      	mov	r2, r8
 8006222:	189b      	adds	r3, r3, r2
 8006224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006228:	464b      	mov	r3, r9
 800622a:	460a      	mov	r2, r1
 800622c:	eb42 0303 	adc.w	r3, r2, r3
 8006230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800623e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800624c:	4649      	mov	r1, r9
 800624e:	008b      	lsls	r3, r1, #2
 8006250:	4641      	mov	r1, r8
 8006252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006256:	4641      	mov	r1, r8
 8006258:	008a      	lsls	r2, r1, #2
 800625a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800625e:	f7fa fc39 	bl	8000ad4 <__aeabi_uldivmod>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4611      	mov	r1, r2
 8006268:	4b38      	ldr	r3, [pc, #224]	@ (800634c <UART_SetConfig+0x4e4>)
 800626a:	fba3 2301 	umull	r2, r3, r3, r1
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2264      	movs	r2, #100	@ 0x64
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	1acb      	subs	r3, r1, r3
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	3332      	adds	r3, #50	@ 0x32
 800627c:	4a33      	ldr	r2, [pc, #204]	@ (800634c <UART_SetConfig+0x4e4>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006288:	441c      	add	r4, r3
 800628a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628e:	2200      	movs	r2, #0
 8006290:	673b      	str	r3, [r7, #112]	@ 0x70
 8006292:	677a      	str	r2, [r7, #116]	@ 0x74
 8006294:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	1891      	adds	r1, r2, r2
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	415b      	adcs	r3, r3
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062a8:	4641      	mov	r1, r8
 80062aa:	1851      	adds	r1, r2, r1
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	4649      	mov	r1, r9
 80062b0:	414b      	adcs	r3, r1
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062c0:	4659      	mov	r1, fp
 80062c2:	00cb      	lsls	r3, r1, #3
 80062c4:	4651      	mov	r1, sl
 80062c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ca:	4651      	mov	r1, sl
 80062cc:	00ca      	lsls	r2, r1, #3
 80062ce:	4610      	mov	r0, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	4642      	mov	r2, r8
 80062d6:	189b      	adds	r3, r3, r2
 80062d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062da:	464b      	mov	r3, r9
 80062dc:	460a      	mov	r2, r1
 80062de:	eb42 0303 	adc.w	r3, r2, r3
 80062e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062fc:	4649      	mov	r1, r9
 80062fe:	008b      	lsls	r3, r1, #2
 8006300:	4641      	mov	r1, r8
 8006302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006306:	4641      	mov	r1, r8
 8006308:	008a      	lsls	r2, r1, #2
 800630a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800630e:	f7fa fbe1 	bl	8000ad4 <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <UART_SetConfig+0x4e4>)
 8006318:	fba3 1302 	umull	r1, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	2164      	movs	r1, #100	@ 0x64
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	3332      	adds	r3, #50	@ 0x32
 800632a:	4a08      	ldr	r2, [pc, #32]	@ (800634c <UART_SetConfig+0x4e4>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 020f 	and.w	r2, r3, #15
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4422      	add	r2, r4
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006346:	46bd      	mov	sp, r7
 8006348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800634c:	51eb851f 	.word	0x51eb851f

08006350 <memset>:
 8006350:	4402      	add	r2, r0
 8006352:	4603      	mov	r3, r0
 8006354:	4293      	cmp	r3, r2
 8006356:	d100      	bne.n	800635a <memset+0xa>
 8006358:	4770      	bx	lr
 800635a:	f803 1b01 	strb.w	r1, [r3], #1
 800635e:	e7f9      	b.n	8006354 <memset+0x4>

08006360 <__libc_init_array>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4d0d      	ldr	r5, [pc, #52]	@ (8006398 <__libc_init_array+0x38>)
 8006364:	4c0d      	ldr	r4, [pc, #52]	@ (800639c <__libc_init_array+0x3c>)
 8006366:	1b64      	subs	r4, r4, r5
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	2600      	movs	r6, #0
 800636c:	42a6      	cmp	r6, r4
 800636e:	d109      	bne.n	8006384 <__libc_init_array+0x24>
 8006370:	4d0b      	ldr	r5, [pc, #44]	@ (80063a0 <__libc_init_array+0x40>)
 8006372:	4c0c      	ldr	r4, [pc, #48]	@ (80063a4 <__libc_init_array+0x44>)
 8006374:	f000 f894 	bl	80064a0 <_init>
 8006378:	1b64      	subs	r4, r4, r5
 800637a:	10a4      	asrs	r4, r4, #2
 800637c:	2600      	movs	r6, #0
 800637e:	42a6      	cmp	r6, r4
 8006380:	d105      	bne.n	800638e <__libc_init_array+0x2e>
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	f855 3b04 	ldr.w	r3, [r5], #4
 8006388:	4798      	blx	r3
 800638a:	3601      	adds	r6, #1
 800638c:	e7ee      	b.n	800636c <__libc_init_array+0xc>
 800638e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006392:	4798      	blx	r3
 8006394:	3601      	adds	r6, #1
 8006396:	e7f2      	b.n	800637e <__libc_init_array+0x1e>
 8006398:	080064e0 	.word	0x080064e0
 800639c:	080064e0 	.word	0x080064e0
 80063a0:	080064e0 	.word	0x080064e0
 80063a4:	080064e4 	.word	0x080064e4

080063a8 <floor>:
 80063a8:	ec51 0b10 	vmov	r0, r1, d0
 80063ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80063b8:	2e13      	cmp	r6, #19
 80063ba:	460c      	mov	r4, r1
 80063bc:	4605      	mov	r5, r0
 80063be:	4680      	mov	r8, r0
 80063c0:	dc34      	bgt.n	800642c <floor+0x84>
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	da17      	bge.n	80063f6 <floor+0x4e>
 80063c6:	a332      	add	r3, pc, #200	@ (adr r3, 8006490 <floor+0xe8>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7f9 ff0a 	bl	80001e4 <__adddf3>
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	f7fa fb4c 	bl	8000a70 <__aeabi_dcmpgt>
 80063d8:	b150      	cbz	r0, 80063f0 <floor+0x48>
 80063da:	2c00      	cmp	r4, #0
 80063dc:	da55      	bge.n	800648a <floor+0xe2>
 80063de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80063e2:	432c      	orrs	r4, r5
 80063e4:	2500      	movs	r5, #0
 80063e6:	42ac      	cmp	r4, r5
 80063e8:	4c2b      	ldr	r4, [pc, #172]	@ (8006498 <floor+0xf0>)
 80063ea:	bf08      	it	eq
 80063ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80063f0:	4621      	mov	r1, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	e023      	b.n	800643e <floor+0x96>
 80063f6:	4f29      	ldr	r7, [pc, #164]	@ (800649c <floor+0xf4>)
 80063f8:	4137      	asrs	r7, r6
 80063fa:	ea01 0307 	and.w	r3, r1, r7
 80063fe:	4303      	orrs	r3, r0
 8006400:	d01d      	beq.n	800643e <floor+0x96>
 8006402:	a323      	add	r3, pc, #140	@ (adr r3, 8006490 <floor+0xe8>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7f9 feec 	bl	80001e4 <__adddf3>
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	f7fa fb2e 	bl	8000a70 <__aeabi_dcmpgt>
 8006414:	2800      	cmp	r0, #0
 8006416:	d0eb      	beq.n	80063f0 <floor+0x48>
 8006418:	2c00      	cmp	r4, #0
 800641a:	bfbe      	ittt	lt
 800641c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006420:	4133      	asrlt	r3, r6
 8006422:	18e4      	addlt	r4, r4, r3
 8006424:	ea24 0407 	bic.w	r4, r4, r7
 8006428:	2500      	movs	r5, #0
 800642a:	e7e1      	b.n	80063f0 <floor+0x48>
 800642c:	2e33      	cmp	r6, #51	@ 0x33
 800642e:	dd0a      	ble.n	8006446 <floor+0x9e>
 8006430:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006434:	d103      	bne.n	800643e <floor+0x96>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	f7f9 fed3 	bl	80001e4 <__adddf3>
 800643e:	ec41 0b10 	vmov	d0, r0, r1
 8006442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006446:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800644a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800644e:	40df      	lsrs	r7, r3
 8006450:	4207      	tst	r7, r0
 8006452:	d0f4      	beq.n	800643e <floor+0x96>
 8006454:	a30e      	add	r3, pc, #56	@ (adr r3, 8006490 <floor+0xe8>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7f9 fec3 	bl	80001e4 <__adddf3>
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	f7fa fb05 	bl	8000a70 <__aeabi_dcmpgt>
 8006466:	2800      	cmp	r0, #0
 8006468:	d0c2      	beq.n	80063f0 <floor+0x48>
 800646a:	2c00      	cmp	r4, #0
 800646c:	da0a      	bge.n	8006484 <floor+0xdc>
 800646e:	2e14      	cmp	r6, #20
 8006470:	d101      	bne.n	8006476 <floor+0xce>
 8006472:	3401      	adds	r4, #1
 8006474:	e006      	b.n	8006484 <floor+0xdc>
 8006476:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800647a:	2301      	movs	r3, #1
 800647c:	40b3      	lsls	r3, r6
 800647e:	441d      	add	r5, r3
 8006480:	4545      	cmp	r5, r8
 8006482:	d3f6      	bcc.n	8006472 <floor+0xca>
 8006484:	ea25 0507 	bic.w	r5, r5, r7
 8006488:	e7b2      	b.n	80063f0 <floor+0x48>
 800648a:	2500      	movs	r5, #0
 800648c:	462c      	mov	r4, r5
 800648e:	e7af      	b.n	80063f0 <floor+0x48>
 8006490:	8800759c 	.word	0x8800759c
 8006494:	7e37e43c 	.word	0x7e37e43c
 8006498:	bff00000 	.word	0xbff00000
 800649c:	000fffff 	.word	0x000fffff

080064a0 <_init>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	bf00      	nop
 80064a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a6:	bc08      	pop	{r3}
 80064a8:	469e      	mov	lr, r3
 80064aa:	4770      	bx	lr

080064ac <_fini>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr
