
Lily_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a40  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08009be0  08009be0  0000abe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ff0  08009ff0  0000b2bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ff0  08009ff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ff8  08009ff8  0000b2bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff8  08009ff8  0000aff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ffc  08009ffc  0000affc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002bc  20000000  0800a000  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200002c0  0800a2bc  0000b2c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800a2bc  0000b760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b2bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012995  00000000  00000000  0000b2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002689  00000000  00000000  0001dc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00020310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dff  00000000  00000000  000214c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019019  00000000  00000000  000222bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148db  00000000  00000000  0003b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f365  00000000  00000000  0004fbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eef18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  000eef5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f4d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bc8 	.word	0x08009bc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	08009bc8 	.word	0x08009bc8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c90:	f000 b9be 	b.w	8001010 <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f83c 	bl	8000d18 <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__aeabi_d2lz>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	460d      	mov	r5, r1
 8000cb6:	f7ff ff21 	bl	8000afc <__aeabi_dcmplt>
 8000cba:	b928      	cbnz	r0, 8000cc8 <__aeabi_d2lz+0x1c>
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	4629      	mov	r1, r5
 8000cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc4:	f000 b80a 	b.w	8000cdc <__aeabi_d2ulz>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cce:	f000 f805 	bl	8000cdc <__aeabi_d2ulz>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	bd38      	pop	{r3, r4, r5, pc}
 8000cda:	bf00      	nop

08000cdc <__aeabi_d2ulz>:
 8000cdc:	b5d0      	push	{r4, r6, r7, lr}
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__aeabi_d2ulz+0x34>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4606      	mov	r6, r0
 8000ce4:	460f      	mov	r7, r1
 8000ce6:	f7ff fc97 	bl	8000618 <__aeabi_dmul>
 8000cea:	f7ff ff57 	bl	8000b9c <__aeabi_d2uiz>
 8000cee:	4604      	mov	r4, r0
 8000cf0:	f7ff fc18 	bl	8000524 <__aeabi_ui2d>
 8000cf4:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <__aeabi_d2ulz+0x38>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f7ff fc8e 	bl	8000618 <__aeabi_dmul>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4630      	mov	r0, r6
 8000d02:	4639      	mov	r1, r7
 8000d04:	f7ff fad0 	bl	80002a8 <__aeabi_dsub>
 8000d08:	f7ff ff48 	bl	8000b9c <__aeabi_d2uiz>
 8000d0c:	4621      	mov	r1, r4
 8000d0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d10:	3df00000 	.word	0x3df00000
 8000d14:	41f00000 	.word	0x41f00000

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d962      	bls.n	8000df4 <__udivmoddi4+0xdc>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	b14e      	cbz	r6, 8000d48 <__udivmoddi4+0x30>
 8000d34:	f1c6 0320 	rsb	r3, r6, #32
 8000d38:	fa01 f806 	lsl.w	r8, r1, r6
 8000d3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	ea43 0808 	orr.w	r8, r3, r8
 8000d46:	40b4      	lsls	r4, r6
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d54:	0c23      	lsrs	r3, r4, #16
 8000d56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d6c:	f080 80ea 	bcs.w	8000f44 <__udivmoddi4+0x22c>
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f240 80e7 	bls.w	8000f44 <__udivmoddi4+0x22c>
 8000d76:	3902      	subs	r1, #2
 8000d78:	443b      	add	r3, r7
 8000d7a:	1a9a      	subs	r2, r3, r2
 8000d7c:	b2a3      	uxth	r3, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8e:	459c      	cmp	ip, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x8e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d98:	f080 80d6 	bcs.w	8000f48 <__udivmoddi4+0x230>
 8000d9c:	459c      	cmp	ip, r3
 8000d9e:	f240 80d3 	bls.w	8000f48 <__udivmoddi4+0x230>
 8000da2:	443b      	add	r3, r7
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000daa:	eba3 030c 	sub.w	r3, r3, ip
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40f3      	lsrs	r3, r6
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xb6>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb0>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x14c>
 8000dd6:	4573      	cmp	r3, lr
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xc8>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 8105 	bhi.w	8000fea <__udivmoddi4+0x2d2>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	4690      	mov	r8, r2
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e5      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000dee:	e9c5 4800 	strd	r4, r8, [r5]
 8000df2:	e7e2      	b.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8090 	beq.w	8000f1a <__udivmoddi4+0x202>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f040 80a4 	bne.w	8000f4c <__udivmoddi4+0x234>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x11e>
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x11c>
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f200 80e0 	bhi.w	8000ff4 <__udivmoddi4+0x2dc>
 8000e34:	46c4      	mov	ip, r8
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e44:	fb02 f404 	mul.w	r4, r2, r4
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x144>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x142>
 8000e54:	429c      	cmp	r4, r3
 8000e56:	f200 80ca 	bhi.w	8000fee <__udivmoddi4+0x2d6>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa0e f401 	lsl.w	r4, lr, r1
 8000e74:	fa20 f306 	lsr.w	r3, r0, r6
 8000e78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e80:	4323      	orrs	r3, r4
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	fa1f fc87 	uxth.w	ip, r7
 8000e8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8e:	0c1c      	lsrs	r4, r3, #16
 8000e90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x1a0>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 809c 	bcs.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8099 	bls.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	eba4 040e 	sub.w	r4, r4, lr
 8000ebc:	fa1f fe83 	uxth.w	lr, r3
 8000ec0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ecc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed0:	45a4      	cmp	ip, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1ce>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eda:	f080 8082 	bcs.w	8000fe2 <__udivmoddi4+0x2ca>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d97f      	bls.n	8000fe2 <__udivmoddi4+0x2ca>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eea:	eba4 040c 	sub.w	r4, r4, ip
 8000eee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ef2:	4564      	cmp	r4, ip
 8000ef4:	4673      	mov	r3, lr
 8000ef6:	46e1      	mov	r9, ip
 8000ef8:	d362      	bcc.n	8000fc0 <__udivmoddi4+0x2a8>
 8000efa:	d05f      	beq.n	8000fbc <__udivmoddi4+0x2a4>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x1fe>
 8000efe:	ebb8 0203 	subs.w	r2, r8, r3
 8000f02:	eb64 0409 	sbc.w	r4, r4, r9
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	40cc      	lsrs	r4, r1
 8000f12:	e9c5 6400 	strd	r6, r4, [r5]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e74f      	b.n	8000dba <__udivmoddi4+0xa2>
 8000f1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1e:	0c01      	lsrs	r1, r0, #16
 8000f20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f24:	b280      	uxth	r0, r0
 8000f26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	463c      	mov	r4, r7
 8000f30:	46b8      	mov	r8, r7
 8000f32:	46be      	mov	lr, r7
 8000f34:	2620      	movs	r6, #32
 8000f36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f3a:	eba2 0208 	sub.w	r2, r2, r8
 8000f3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f42:	e766      	b.n	8000e12 <__udivmoddi4+0xfa>
 8000f44:	4601      	mov	r1, r0
 8000f46:	e718      	b.n	8000d7a <__udivmoddi4+0x62>
 8000f48:	4610      	mov	r0, r2
 8000f4a:	e72c      	b.n	8000da6 <__udivmoddi4+0x8e>
 8000f4c:	f1c6 0220 	rsb	r2, r6, #32
 8000f50:	fa2e f302 	lsr.w	r3, lr, r2
 8000f54:	40b7      	lsls	r7, r6
 8000f56:	40b1      	lsls	r1, r6
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f66:	b2bc      	uxth	r4, r7
 8000f68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb08 f904 	mul.w	r9, r8, r4
 8000f76:	40b0      	lsls	r0, r6
 8000f78:	4589      	cmp	r9, r1
 8000f7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7e:	b280      	uxth	r0, r0
 8000f80:	d93e      	bls.n	8001000 <__udivmoddi4+0x2e8>
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f88:	d201      	bcs.n	8000f8e <__udivmoddi4+0x276>
 8000f8a:	4589      	cmp	r9, r1
 8000f8c:	d81f      	bhi.n	8000fce <__udivmoddi4+0x2b6>
 8000f8e:	eba1 0109 	sub.w	r1, r1, r9
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	4542      	cmp	r2, r8
 8000fa6:	d229      	bcs.n	8000ffc <__udivmoddi4+0x2e4>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fae:	d2c4      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d2c2      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb8:	443a      	add	r2, r7
 8000fba:	e7be      	b.n	8000f3a <__udivmoddi4+0x222>
 8000fbc:	45f0      	cmp	r8, lr
 8000fbe:	d29d      	bcs.n	8000efc <__udivmoddi4+0x1e4>
 8000fc0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc8:	3801      	subs	r0, #1
 8000fca:	46e1      	mov	r9, ip
 8000fcc:	e796      	b.n	8000efc <__udivmoddi4+0x1e4>
 8000fce:	eba7 0909 	sub.w	r9, r7, r9
 8000fd2:	4449      	add	r1, r9
 8000fd4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7db      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fe2:	4673      	mov	r3, lr
 8000fe4:	e77f      	b.n	8000ee6 <__udivmoddi4+0x1ce>
 8000fe6:	4650      	mov	r0, sl
 8000fe8:	e766      	b.n	8000eb8 <__udivmoddi4+0x1a0>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e6fd      	b.n	8000dea <__udivmoddi4+0xd2>
 8000fee:	443b      	add	r3, r7
 8000ff0:	3a02      	subs	r2, #2
 8000ff2:	e733      	b.n	8000e5c <__udivmoddi4+0x144>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	443b      	add	r3, r7
 8000ffa:	e71c      	b.n	8000e36 <__udivmoddi4+0x11e>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	e79c      	b.n	8000f3a <__udivmoddi4+0x222>
 8001000:	eba1 0109 	sub.w	r1, r1, r9
 8001004:	46c4      	mov	ip, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c4      	b.n	8000f9a <__udivmoddi4+0x282>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t us){
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <delay_us+0x30>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	60fb      	str	r3, [r7, #12]
    while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us);
 8001024:	bf00      	nop
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <delay_us+0x30>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d8f7      	bhi.n	8001026 <delay_us+0x12>
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000420 	.word	0x20000420

08001048 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a05      	ldr	r2, [pc, #20]	@ (800106c <HAL_ADC_ConvCpltCallback+0x24>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d102      	bne.n	8001060 <HAL_ADC_ConvCpltCallback+0x18>
		ADC_DONE = 1;
 800105a:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x28>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
	}

}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40012000 	.word	0x40012000
 8001070:	20000510 	.word	0x20000510

08001074 <ReadSensors>:
void ReadSensors(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
	   int sensorIndex = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]


	   ADC_ChannelConfTypeDef sConfig; // sconfig to change channels
	   //ADC_Config.SamplingTime=ADC_SAMPLETIME_480CYCLES;

	   for(sensorIndex =0; sensorIndex<(9) ; sensorIndex++)
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e04d      	b.n	8001120 <ReadSensors+0xac>
	   {
		   sConfig.Channel = SensorAdcChannel[sensorIndex]; // to update channels
 8001084:	4a2a      	ldr	r2, [pc, #168]	@ (8001130 <ReadSensors+0xbc>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	607b      	str	r3, [r7, #4]
		   sConfig.Rank = 1; //ADC_REGULAR_RANK_1;
 800108e:	2301      	movs	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
		   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4827      	ldr	r0, [pc, #156]	@ (8001134 <ReadSensors+0xc0>)
 8001098:	f001 ff08 	bl	8002eac <HAL_ADC_ConfigChannel>


	 		//ir led on
 		HAL_GPIO_WritePin(IR_LED_PORTS[sensorIndex], IR_LED_PINS[sensorIndex], SET);
 800109c:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <ReadSensors+0xc4>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010a4:	4a25      	ldr	r2, [pc, #148]	@ (800113c <ReadSensors+0xc8>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	2201      	movs	r2, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	f003 f9e7 	bl	8004484 <HAL_GPIO_WritePin>
		delay_us(200);
 80010b6:	20c8      	movs	r0, #200	@ 0xc8
 80010b8:	f7ff ffac 	bl	8001014 <delay_us>
	 		 HAL_ADC_Stop_DMA(&hadc1);
 80010bc:	481d      	ldr	r0, [pc, #116]	@ (8001134 <ReadSensors+0xc0>)
 80010be:	f001 fe7d 	bl	8002dbc <HAL_ADC_Stop_DMA>
	 		ADC_DONE = 0;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <ReadSensors+0xcc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

	 	   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_buf, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	491e      	ldr	r1, [pc, #120]	@ (8001144 <ReadSensors+0xd0>)
 80010cc:	4819      	ldr	r0, [pc, #100]	@ (8001134 <ReadSensors+0xc0>)
 80010ce:	f001 fd81 	bl	8002bd4 <HAL_ADC_Start_DMA>

	 	   //callback will be triggered after conversion
	 	   // wait until conversion is complete
	 	   while (ADC_DONE == 0);
 80010d2:	bf00      	nop
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <ReadSensors+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0fb      	beq.n	80010d4 <ReadSensors+0x60>

	 	  signal_runtime[sensorIndex]=adc_buf;
 80010dc:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <ReadSensors+0xd0>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4919      	ldr	r1, [pc, #100]	@ (8001148 <ReadSensors+0xd4>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 // SensorValues[sensorIndex]= (max_adc[sensorIndex] - signal_runtime[sensorIndex])/10;


		   if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR)) {
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <ReadSensors+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d104      	bne.n	8001100 <ReadSensors+0x8c>
		       // Overflow happened
		       __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_OVR);  // clear it
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <ReadSensors+0xc0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f06f 0220 	mvn.w	r2, #32
 80010fe:	601a      	str	r2, [r3, #0]
		   }

		   HAL_GPIO_WritePin(IR_LED_PORTS[sensorIndex], IR_LED_PINS[sensorIndex], RESET);
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <ReadSensors+0xc4>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001108:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <ReadSensors+0xc8>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	b29b      	uxth	r3, r3
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	f003 f9b5 	bl	8004484 <HAL_GPIO_WritePin>
	   for(sensorIndex =0; sensorIndex<(9) ; sensorIndex++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b08      	cmp	r3, #8
 8001124:	ddae      	ble.n	8001084 <ReadSensors+0x10>

	}

	//  print on oled - sensor data took

}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000048 	.word	0x20000048
 8001134:	200002dc 	.word	0x200002dc
 8001138:	20000000 	.word	0x20000000
 800113c:	20000024 	.word	0x20000024
 8001140:	20000510 	.word	0x20000510
 8001144:	20000514 	.word	0x20000514
 8001148:	20000524 	.word	0x20000524

0800114c <line_data>:
int line_data(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
    int sum = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    double weighted_sum = 0;
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int onLine = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]

    if (firstTime == 1) {
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <line_data+0x120>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d13b      	bne.n	80011e6 <line_data+0x9a>
        firstTime++;
 800116e:	4b3f      	ldr	r3, [pc, #252]	@ (800126c <line_data+0x120>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a3d      	ldr	r2, [pc, #244]	@ (800126c <line_data+0x120>)
 8001176:	6013      	str	r3, [r2, #0]

        for (int i = 0; i < 9; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	e02d      	b.n	80011da <line_data+0x8e>
            if (signal_runtime[i] > threshold[i]) {
 800117e:	4a3c      	ldr	r2, [pc, #240]	@ (8001270 <line_data+0x124>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	493b      	ldr	r1, [pc, #236]	@ (8001274 <line_data+0x128>)
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800118e:	4293      	cmp	r3, r2
 8001190:	d91b      	bls.n	80011ca <line_data+0x7e>
                lastColor[i] = 0;
 8001192:	4a39      	ldr	r2, [pc, #228]	@ (8001278 <line_data+0x12c>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4413      	add	r3, r2
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
                weighted_sum += weights[i];
 800119c:	4a37      	ldr	r2, [pc, #220]	@ (800127c <line_data+0x130>)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9cd 	bl	8000544 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011b2:	f7ff f87b 	bl	80002ac <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
                sum++;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
                onLine = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e004      	b.n	80011d4 <line_data+0x88>
            } else {
                lastColor[i] = 1;
 80011ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001278 <line_data+0x12c>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 9; i++) {
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3301      	adds	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	ddce      	ble.n	800117e <line_data+0x32>

            }
        }
        storePrevValues();
 80011e0:	f000 f980 	bl	80014e4 <storePrevValues>
 80011e4:	e028      	b.n	8001238 <line_data+0xec>
    }
    else {
        detectColor();
 80011e6:	f000 f99d 	bl	8001524 <detectColor>
//                    }
//                }
//            }
//        }
        for (int
        		i = 0; i < 9; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
        for (int
 80011ee:	e01e      	b.n	800122e <line_data+0xe2>
            if (lastColor[i] == 0) {
 80011f0:	4a21      	ldr	r2, [pc, #132]	@ (8001278 <line_data+0x12c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d115      	bne.n	8001228 <line_data+0xdc>
                weighted_sum += weights[i];
 80011fc:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <line_data+0x130>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f99d 	bl	8000544 <__aeabi_i2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001212:	f7ff f84b 	bl	80002ac <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                sum++;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
                onLine = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
        		i = 0; i < 9; i++) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b08      	cmp	r3, #8
 8001232:	dddd      	ble.n	80011f0 <line_data+0xa4>
            }
        }
        storePrevValues();
 8001234:	f000 f956 	bl	80014e4 <storePrevValues>
    }

    if (!onLine) {
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <line_data+0xf6>
        return 255;  // Line lost condition
 800123e:	23ff      	movs	r3, #255	@ 0xff
 8001240:	e00f      	b.n	8001262 <line_data+0x116>
    }

    return (int)(weighted_sum / sum);
 8001242:	69f8      	ldr	r0, [r7, #28]
 8001244:	f7ff f97e 	bl	8000544 <__aeabi_i2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001250:	f7ff fb0c 	bl	800086c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc76 	bl	8000b4c <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000e4 	.word	0x200000e4
 8001270:	20000524 	.word	0x20000524
 8001274:	200000c0 	.word	0x200000c0
 8001278:	200005a4 	.word	0x200005a4
 800127c:	20000070 	.word	0x20000070

08001280 <computePID>:
void computePID(int32_t input) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	P = Kp * error;
 8001288:	4b68      	ldr	r3, [pc, #416]	@ (800142c <computePID+0x1ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f959 	bl	8000544 <__aeabi_i2d>
 8001292:	4b67      	ldr	r3, [pc, #412]	@ (8001430 <computePID+0x1b0>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9be 	bl	8000618 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4964      	ldr	r1, [pc, #400]	@ (8001434 <computePID+0x1b4>)
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
	I += Ki * error * 5.0;
 80012a6:	4b61      	ldr	r3, [pc, #388]	@ (800142c <computePID+0x1ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f94a 	bl	8000544 <__aeabi_i2d>
 80012b0:	4b61      	ldr	r3, [pc, #388]	@ (8001438 <computePID+0x1b8>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f9af 	bl	8000618 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b5d      	ldr	r3, [pc, #372]	@ (800143c <computePID+0x1bc>)
 80012c8:	f7ff f9a6 	bl	8000618 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001440 <computePID+0x1c0>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7fe ffe7 	bl	80002ac <__adddf3>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4957      	ldr	r1, [pc, #348]	@ (8001440 <computePID+0x1c0>)
 80012e4:	e9c1 2300 	strd	r2, r3, [r1]
	if (I > integralMax) I = integralMax;
 80012e8:	4b55      	ldr	r3, [pc, #340]	@ (8001440 <computePID+0x1c0>)
 80012ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <computePID+0x1c4>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff fc20 	bl	8000b38 <__aeabi_dcmpgt>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <computePID+0x8a>
 80012fe:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <computePID+0x1c4>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	494e      	ldr	r1, [pc, #312]	@ (8001440 <computePID+0x1c0>)
 8001306:	e9c1 2300 	strd	r2, r3, [r1]
	if (I < integralMin) I = integralMin;
 800130a:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <computePID+0x1c0>)
 800130c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <computePID+0x1c8>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff fbf1 	bl	8000afc <__aeabi_dcmplt>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <computePID+0xac>
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <computePID+0x1c8>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	4946      	ldr	r1, [pc, #280]	@ (8001440 <computePID+0x1c0>)
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
	D = Kd * (input - lastInput) / 5.0;
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff f909 	bl	8000544 <__aeabi_i2d>
 8001332:	4b46      	ldr	r3, [pc, #280]	@ (800144c <computePID+0x1cc>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7fe ffb6 	bl	80002a8 <__aeabi_dsub>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	4b42      	ldr	r3, [pc, #264]	@ (8001450 <computePID+0x1d0>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f965 	bl	8000618 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <computePID+0x1bc>)
 800135c:	f7ff fa86 	bl	800086c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	493b      	ldr	r1, [pc, #236]	@ (8001454 <computePID+0x1d4>)
 8001366:	e9c1 2300 	strd	r2, r3, [r1]

	correction = P + I + D;
 800136a:	4b32      	ldr	r3, [pc, #200]	@ (8001434 <computePID+0x1b4>)
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <computePID+0x1c0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7fe ff99 	bl	80002ac <__adddf3>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <computePID+0x1d4>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7fe ff90 	bl	80002ac <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4931      	ldr	r1, [pc, #196]	@ (8001458 <computePID+0x1d8>)
 8001392:	e9c1 2300 	strd	r2, r3, [r1]
	lastInput = input;
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff f8d4 	bl	8000544 <__aeabi_i2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	492a      	ldr	r1, [pc, #168]	@ (800144c <computePID+0x1cc>)
 80013a2:	e9c1 2300 	strd	r2, r3, [r1]
	LastPIDTime = HAL_GetTick();
 80013a6:	f001 fab5 	bl	8002914 <HAL_GetTick>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a2b      	ldr	r2, [pc, #172]	@ (800145c <computePID+0x1dc>)
 80013ae:	6013      	str	r3, [r2, #0]
	correction = floor(correction);
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <computePID+0x1d8>)
 80013b2:	ed93 7b00 	vldr	d7, [r3]
 80013b6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ba:	eef0 0a67 	vmov.f32	s1, s15
 80013be:	f008 fb87 	bl	8009ad0 <floor>
 80013c2:	eeb0 7a40 	vmov.f32	s14, s0
 80013c6:	eef0 7a60 	vmov.f32	s15, s1
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <computePID+0x1d8>)
 80013cc:	ed83 7b00 	vstr	d7, [r3]
	setMotorSpeed(0, base_speed - correction);
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <computePID+0x1e0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8b5 	bl	8000544 <__aeabi_i2d>
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <computePID+0x1d8>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7fe ff62 	bl	80002a8 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fbae 	bl	8000b4c <__aeabi_d2iz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	2000      	movs	r0, #0
 80013f6:	f000 f835 	bl	8001464 <setMotorSpeed>
	setMotorSpeed(1, base_speed + correction);
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <computePID+0x1e0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8a0 	bl	8000544 <__aeabi_i2d>
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <computePID+0x1d8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe ff4f 	bl	80002ac <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb99 	bl	8000b4c <__aeabi_d2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	2001      	movs	r0, #1
 8001420:	f000 f820 	bl	8001464 <setMotorSpeed>

}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000554 	.word	0x20000554
 8001430:	20000098 	.word	0x20000098
 8001434:	20000558 	.word	0x20000558
 8001438:	20000548 	.word	0x20000548
 800143c:	40140000 	.word	0x40140000
 8001440:	20000560 	.word	0x20000560
 8001444:	200000b8 	.word	0x200000b8
 8001448:	200000b0 	.word	0x200000b0
 800144c:	20000578 	.word	0x20000578
 8001450:	200000a0 	.word	0x200000a0
 8001454:	20000568 	.word	0x20000568
 8001458:	20000570 	.word	0x20000570
 800145c:	20000520 	.word	0x20000520
 8001460:	200000a8 	.word	0x200000a8

08001464 <setMotorSpeed>:
void setMotorSpeed(uint8_t motor, int32_t speed)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
	// tim1 ch1- left front, ch2- left back, ch3-right front, ch4- right back
    uint16_t pwm = abs(speed);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	81fb      	strh	r3, [r7, #14]
    if (pwm > 200) pwm = 200;  // Limit max speed
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	2bc8      	cmp	r3, #200	@ 0xc8
 800147e:	d901      	bls.n	8001484 <setMotorSpeed+0x20>
 8001480:	23c8      	movs	r3, #200	@ 0xc8
 8001482:	81fb      	strh	r3, [r7, #14]

    if (motor == 0) {  // Left motor
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d110      	bne.n	80014ac <setMotorSpeed+0x48>
        if (speed < 0) {
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da06      	bge.n	800149e <setMotorSpeed+0x3a>
            TIM1->CCR3 = pwm;
 8001490:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <setMotorSpeed+0x7c>)
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	63d3      	str	r3, [r2, #60]	@ 0x3c
            TIM1->CCR4 = 0;
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <setMotorSpeed+0x7c>)
 8001498:	2200      	movs	r2, #0
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
        } else {
            TIM1->CCR2 = 0;
            TIM1->CCR1 = pwm;
        }
    }
}
 800149c:	e019      	b.n	80014d2 <setMotorSpeed+0x6e>
            TIM1->CCR3 = 0;
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <setMotorSpeed+0x7c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	63da      	str	r2, [r3, #60]	@ 0x3c
            TIM1->CCR4 = pwm;
 80014a4:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <setMotorSpeed+0x7c>)
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014aa:	e012      	b.n	80014d2 <setMotorSpeed+0x6e>
    else if (motor == 1) {  // Right motor
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10f      	bne.n	80014d2 <setMotorSpeed+0x6e>
        if (speed < 0) {
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da06      	bge.n	80014c6 <setMotorSpeed+0x62>
            TIM1->CCR2 = pwm;
 80014b8:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <setMotorSpeed+0x7c>)
 80014ba:	89fb      	ldrh	r3, [r7, #14]
 80014bc:	6393      	str	r3, [r2, #56]	@ 0x38
            TIM1->CCR1 = 0;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <setMotorSpeed+0x7c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014c4:	e005      	b.n	80014d2 <setMotorSpeed+0x6e>
            TIM1->CCR2 = 0;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <setMotorSpeed+0x7c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCR1 = pwm;
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <setMotorSpeed+0x7c>)
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40010000 	.word	0x40010000

080014e4 <storePrevValues>:
void storePrevValues(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 9; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	e00a      	b.n	8001506 <storePrevValues+0x22>
        prevValues[i] = signal_runtime[i];
 80014f0:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <storePrevValues+0x38>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f8:	4909      	ldr	r1, [pc, #36]	@ (8001520 <storePrevValues+0x3c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 9; i++) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3301      	adds	r3, #1
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b08      	cmp	r3, #8
 800150a:	ddf1      	ble.n	80014f0 <storePrevValues+0xc>
    }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000524 	.word	0x20000524
 8001520:	20000580 	.word	0x20000580

08001524 <detectColor>:
void detectColor(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
    ReadSensors();
 800152a:	f7ff fda3 	bl	8001074 <ReadSensors>
    for (int i = 0; i < 9; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	e043      	b.n	80015bc <detectColor+0x98>
    {
        uint32_t current = signal_runtime[i];
 8001534:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <detectColor+0xa8>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	603b      	str	r3, [r7, #0]

        if (current < 200) {
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2bc7      	cmp	r3, #199	@ 0xc7
 8001542:	d805      	bhi.n	8001550 <detectColor+0x2c>
            lastColor[i] = 1; // White
 8001544:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <detectColor+0xac>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e02d      	b.n	80015ac <detectColor+0x88>
        }
        else if(current>1200){
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001556:	d905      	bls.n	8001564 <detectColor+0x40>
        	lastColor[i]=0;
 8001558:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <detectColor+0xac>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e023      	b.n	80015ac <detectColor+0x88>
        }
        else if (current > prevValues[i] + CHANGE_THRESHOLD[i]) {
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <detectColor+0xb0>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	491a      	ldr	r1, [pc, #104]	@ (80015d8 <detectColor+0xb4>)
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001574:	4413      	add	r3, r2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d905      	bls.n	8001588 <detectColor+0x64>
            lastColor[i] = 0; // Black
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <detectColor+0xac>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e011      	b.n	80015ac <detectColor+0x88>
        }
        else if (current + CHANGE_THRESHOLD[i] < prevValues[i]) {
 8001588:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <detectColor+0xb4>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	461a      	mov	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	441a      	add	r2, r3
 8001596:	490f      	ldr	r1, [pc, #60]	@ (80015d4 <detectColor+0xb0>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d204      	bcs.n	80015ac <detectColor+0x88>
            lastColor[i] = 1; // White
 80015a2:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <detectColor+0xac>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
        }
        // else → no change → keep lastColor[i] as is

        prevValues[i] = current; // update reading for next loop
 80015ac:	4909      	ldr	r1, [pc, #36]	@ (80015d4 <detectColor+0xb0>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 9; i++)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	ddb8      	ble.n	8001534 <detectColor+0x10>
    }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000524 	.word	0x20000524
 80015d0:	200005a4 	.word	0x200005a4
 80015d4:	20000580 	.word	0x20000580
 80015d8:	08009bf4 	.word	0x08009bf4

080015dc <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_UARTEx_RxEventCallback+0x34>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d109      	bne.n	8001606 <HAL_UARTEx_RxEventCallback+0x2a>
    {
        // Pass received bytes directly to your parser
        handle_received_command(rx_buffer, Size);
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4807      	ldr	r0, [pc, #28]	@ (8001614 <HAL_UARTEx_RxEventCallback+0x38>)
 80015f8:	f000 f890 	bl	800171c <handle_received_command>

        // Restart reception for the next command
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 80015fc:	2220      	movs	r2, #32
 80015fe:	4905      	ldr	r1, [pc, #20]	@ (8001614 <HAL_UARTEx_RxEventCallback+0x38>)
 8001600:	4805      	ldr	r0, [pc, #20]	@ (8001618 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001602:	f004 fca0 	bl	8005f46 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40011000 	.word	0x40011000
 8001614:	200005b8 	.word	0x200005b8
 8001618:	20000468 	.word	0x20000468

0800161c <send_telemetry_data>:
void send_telemetry_data(float current_position,float pid_out) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	ed87 0a01 	vstr	s0, [r7, #4]
 8001626:	edc7 0a00 	vstr	s1, [r7]
    static TelemetryPacket packet;

    // 1. Set header
    packet.header_start = '<';
 800162a:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <send_telemetry_data+0xdc>)
 800162c:	223c      	movs	r2, #60	@ 0x3c
 800162e:	701a      	strb	r2, [r3, #0]
    packet.header_end = '>';
 8001630:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <send_telemetry_data+0xdc>)
 8001632:	223e      	movs	r2, #62	@ 0x3e
 8001634:	705a      	strb	r2, [r3, #1]

    // 2. Add the live position data
    packet.position = current_position;
 8001636:	4a30      	ldr	r2, [pc, #192]	@ (80016f8 <send_telemetry_data+0xdc>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8c2 3002 	str.w	r3, [r2, #2]

    // 3. Fill sensor data
    for(int i = 0; i < 9; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	e00d      	b.n	8001660 <send_telemetry_data+0x44>
        packet.sensor_values[i] = (uint16_t)signal_runtime[i];
 8001644:	4a2d      	ldr	r2, [pc, #180]	@ (80016fc <send_telemetry_data+0xe0>)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	b299      	uxth	r1, r3
 800164e:	4a2a      	ldr	r2, [pc, #168]	@ (80016f8 <send_telemetry_data+0xdc>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 9; i++) {
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b08      	cmp	r3, #8
 8001664:	ddee      	ble.n	8001644 <send_telemetry_data+0x28>
    }

    // 4. Fill with LIVE robot state
    packet.status_code = status_to_send;
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <send_telemetry_data+0xe4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <send_telemetry_data+0xdc>)
 800166e:	761a      	strb	r2, [r3, #24]
    packet.kp = Kp;
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <send_telemetry_data+0xe8>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff faaf 	bl	8000bdc <__aeabi_d2f>
 800167e:	4602      	mov	r2, r0
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <send_telemetry_data+0xdc>)
 8001682:	f8c3 2019 	str.w	r2, [r3, #25]
    packet.ki = Ki;
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <send_telemetry_data+0xec>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff faa4 	bl	8000bdc <__aeabi_d2f>
 8001694:	4602      	mov	r2, r0
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <send_telemetry_data+0xdc>)
 8001698:	f8c3 201d 	str.w	r2, [r3, #29]
    packet.kd = Kd;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <send_telemetry_data+0xf0>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa99 	bl	8000bdc <__aeabi_d2f>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <send_telemetry_data+0xdc>)
 80016ae:	f8c3 2021 	str.w	r2, [r3, #33]	@ 0x21
    packet.threshold = thresh;
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <send_telemetry_data+0xf4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <send_telemetry_data+0xdc>)
 80016ba:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
    packet.base_speed = (uint8_t)base_speed;
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <send_telemetry_data+0xf8>)
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <send_telemetry_data+0xdc>)
 80016c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    packet.pid_error = -current_position;
 80016c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016cc:	eef1 7a67 	vneg.f32	s15, s15
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <send_telemetry_data+0xdc>)
 80016d2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    packet.pid_output = pid_out;
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <send_telemetry_data+0xdc>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // 5. Transmit the packet
    HAL_UART_Transmit(&huart1, (uint8_t*)&packet, sizeof(TelemetryPacket), 100);
 80016dc:	2364      	movs	r3, #100	@ 0x64
 80016de:	2230      	movs	r2, #48	@ 0x30
 80016e0:	4905      	ldr	r1, [pc, #20]	@ (80016f8 <send_telemetry_data+0xdc>)
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <send_telemetry_data+0xfc>)
 80016e4:	f004 fba4 	bl	8005e30 <HAL_UART_Transmit>

    // 6. Reset the status code after sending
    status_to_send = 0;
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <send_telemetry_data+0xe4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200005dc 	.word	0x200005dc
 80016fc:	20000524 	.word	0x20000524
 8001700:	200005b4 	.word	0x200005b4
 8001704:	20000098 	.word	0x20000098
 8001708:	20000548 	.word	0x20000548
 800170c:	200000a0 	.word	0x200000a0
 8001710:	2000006c 	.word	0x2000006c
 8001714:	200000a8 	.word	0x200000a8
 8001718:	20000468 	.word	0x20000468

0800171c <handle_received_command>:
void handle_received_command(uint8_t* buffer, uint16_t len) {
 800171c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001720:	b08b      	sub	sp, #44	@ 0x2c
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	460b      	mov	r3, r1
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	466b      	mov	r3, sp
 800172c:	461e      	mov	r6, r3
  // Create a local, null-terminated copy to work with safely.
  char cmd_string[len + 1];
 800172e:	897b      	ldrh	r3, [r7, #10]
 8001730:	1c59      	adds	r1, r3, #1
 8001732:	1e4b      	subs	r3, r1, #1
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
 8001736:	460a      	mov	r2, r1
 8001738:	2300      	movs	r3, #0
 800173a:	4690      	mov	r8, r2
 800173c:	4699      	mov	r9, r3
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800174a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800174e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001752:	460a      	mov	r2, r1
 8001754:	2300      	movs	r3, #0
 8001756:	4614      	mov	r4, r2
 8001758:	461d      	mov	r5, r3
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	00eb      	lsls	r3, r5, #3
 8001764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001768:	00e2      	lsls	r2, r4, #3
 800176a:	460b      	mov	r3, r1
 800176c:	3307      	adds	r3, #7
 800176e:	08db      	lsrs	r3, r3, #3
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	ebad 0d03 	sub.w	sp, sp, r3
 8001776:	466b      	mov	r3, sp
 8001778:	3300      	adds	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  memcpy(cmd_string, buffer, len);
 800177c:	897b      	ldrh	r3, [r7, #10]
 800177e:	461a      	mov	r2, r3
 8001780:	68f9      	ldr	r1, [r7, #12]
 8001782:	6a38      	ldr	r0, [r7, #32]
 8001784:	f006 facf 	bl	8007d26 <memcpy>
  cmd_string[len] = '\0';
 8001788:	897b      	ldrh	r3, [r7, #10]
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	2100      	movs	r1, #0
 800178e:	54d1      	strb	r1, [r2, r3]

  // Find the separator character ':'
  char* colon_ptr = strchr(cmd_string, ':');
 8001790:	213a      	movs	r1, #58	@ 0x3a
 8001792:	6a38      	ldr	r0, [r7, #32]
 8001794:	f006 fa7a 	bl	8007c8c <strchr>
 8001798:	61f8      	str	r0, [r7, #28]

  // Check if the separator was found
  if (colon_ptr != NULL) {
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d079      	beq.n	8001894 <handle_received_command+0x178>
    *colon_ptr = '\0';
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    char* key = cmd_string;
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	61bb      	str	r3, [r7, #24]
    char* value_str = colon_ptr + 1;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
    float value = atof(value_str);
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f005 fb8f 	bl	8006ed4 <atof>
 80017b6:	ec53 2b10 	vmov	r2, r3, d0
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fa0d 	bl	8000bdc <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
    if (strcmp(key, "KP") == 0) {
 80017c6:	4938      	ldr	r1, [pc, #224]	@ (80018a8 <handle_received_command+0x18c>)
 80017c8:	69b8      	ldr	r0, [r7, #24]
 80017ca:	f7fe fd09 	bl	80001e0 <strcmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10b      	bne.n	80017ec <handle_received_command+0xd0>
      Kp = value;
 80017d4:	6938      	ldr	r0, [r7, #16]
 80017d6:	f7fe fec7 	bl	8000568 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4933      	ldr	r1, [pc, #204]	@ (80018ac <handle_received_command+0x190>)
 80017e0:	e9c1 2300 	strd	r2, r3, [r1]
      status_to_send = 1;
 80017e4:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <handle_received_command+0x194>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e056      	b.n	800189a <handle_received_command+0x17e>
    } else if (strcmp(key, "KI") == 0) {
 80017ec:	4931      	ldr	r1, [pc, #196]	@ (80018b4 <handle_received_command+0x198>)
 80017ee:	69b8      	ldr	r0, [r7, #24]
 80017f0:	f7fe fcf6 	bl	80001e0 <strcmp>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10b      	bne.n	8001812 <handle_received_command+0xf6>
      Ki = value;
 80017fa:	6938      	ldr	r0, [r7, #16]
 80017fc:	f7fe feb4 	bl	8000568 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	492c      	ldr	r1, [pc, #176]	@ (80018b8 <handle_received_command+0x19c>)
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
      status_to_send = 1;
 800180a:	4b29      	ldr	r3, [pc, #164]	@ (80018b0 <handle_received_command+0x194>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e043      	b.n	800189a <handle_received_command+0x17e>
    } else if (strcmp(key, "KD") == 0) {
 8001812:	492a      	ldr	r1, [pc, #168]	@ (80018bc <handle_received_command+0x1a0>)
 8001814:	69b8      	ldr	r0, [r7, #24]
 8001816:	f7fe fce3 	bl	80001e0 <strcmp>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10b      	bne.n	8001838 <handle_received_command+0x11c>
      Kd = value;
 8001820:	6938      	ldr	r0, [r7, #16]
 8001822:	f7fe fea1 	bl	8000568 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4925      	ldr	r1, [pc, #148]	@ (80018c0 <handle_received_command+0x1a4>)
 800182c:	e9c1 2300 	strd	r2, r3, [r1]
      status_to_send = 1;
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <handle_received_command+0x194>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e030      	b.n	800189a <handle_received_command+0x17e>
    } else if (strcmp(key, "TH") == 0) {
 8001838:	4922      	ldr	r1, [pc, #136]	@ (80018c4 <handle_received_command+0x1a8>)
 800183a:	69b8      	ldr	r0, [r7, #24]
 800183c:	f7fe fcd0 	bl	80001e0 <strcmp>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10d      	bne.n	8001862 <handle_received_command+0x146>
      thresh = (uint16_t)value;
 8001846:	edd7 7a04 	vldr	s15, [r7, #16]
 800184a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184e:	ee17 3a90 	vmov	r3, s15
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <handle_received_command+0x1ac>)
 8001858:	601a      	str	r2, [r3, #0]
      status_to_send = 1;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <handle_received_command+0x194>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e01b      	b.n	800189a <handle_received_command+0x17e>
    } else if (strcmp(key, "BS") == 0) {
 8001862:	491a      	ldr	r1, [pc, #104]	@ (80018cc <handle_received_command+0x1b0>)
 8001864:	69b8      	ldr	r0, [r7, #24]
 8001866:	f7fe fcbb 	bl	80001e0 <strcmp>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10d      	bne.n	800188c <handle_received_command+0x170>
      base_speed = (uint8_t)value; // Cast to uint8_t for consistency
 8001870:	edd7 7a04 	vldr	s15, [r7, #16]
 8001874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001878:	edc7 7a01 	vstr	s15, [r7, #4]
 800187c:	793b      	ldrb	r3, [r7, #4]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <handle_received_command+0x1b4>)
 8001882:	701a      	strb	r2, [r3, #0]
      status_to_send = 1;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <handle_received_command+0x194>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e006      	b.n	800189a <handle_received_command+0x17e>
    } else {
      status_to_send = 200;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <handle_received_command+0x194>)
 800188e:	22c8      	movs	r2, #200	@ 0xc8
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e002      	b.n	800189a <handle_received_command+0x17e>
    }

  } else {
    status_to_send = 200;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <handle_received_command+0x194>)
 8001896:	22c8      	movs	r2, #200	@ 0xc8
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	46b5      	mov	sp, r6
  }
}
 800189c:	bf00      	nop
 800189e:	372c      	adds	r7, #44	@ 0x2c
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018a6:	bf00      	nop
 80018a8:	08009be0 	.word	0x08009be0
 80018ac:	20000098 	.word	0x20000098
 80018b0:	200005b4 	.word	0x200005b4
 80018b4:	08009be4 	.word	0x08009be4
 80018b8:	20000548 	.word	0x20000548
 80018bc:	08009be8 	.word	0x08009be8
 80018c0:	200000a0 	.word	0x200000a0
 80018c4:	08009bec 	.word	0x08009bec
 80018c8:	2000006c 	.word	0x2000006c
 80018cc:	08009bf0 	.word	0x08009bf0
 80018d0:	200000a8 	.word	0x200000a8

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	ed2d 8b02 	vpush	{d8}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018de:	f000 ffb3 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e2:	f000 f95f 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e6:	f000 fbcd 	bl	8002084 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ea:	f000 fba3 	bl	8002034 <MX_DMA_Init>
  MX_ADC1_Init();
 80018ee:	f000 f9c1 	bl	8001c74 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018f2:	f000 fa65 	bl	8001dc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018f6:	f000 fb27 	bl	8001f48 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018fa:	f000 fa33 	bl	8001d64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018fe:	f000 fb6f 	bl	8001fe0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001902:	4899      	ldr	r0, [pc, #612]	@ (8001b68 <main+0x294>)
 8001904:	f003 fbc4 	bl	8005090 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190e:	4897      	ldr	r0, [pc, #604]	@ (8001b6c <main+0x298>)
 8001910:	f002 fdb8 	bl	8004484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2102      	movs	r1, #2
 8001918:	4894      	ldr	r0, [pc, #592]	@ (8001b6c <main+0x298>)
 800191a:	f002 fdb3 	bl	8004484 <HAL_GPIO_WritePin>

  // Start PWM for motors
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800191e:	2100      	movs	r1, #0
 8001920:	4893      	ldr	r0, [pc, #588]	@ (8001b70 <main+0x29c>)
 8001922:	f003 fc69 	bl	80051f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001926:	2104      	movs	r1, #4
 8001928:	4891      	ldr	r0, [pc, #580]	@ (8001b70 <main+0x29c>)
 800192a:	f003 fc65 	bl	80051f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800192e:	2108      	movs	r1, #8
 8001930:	488f      	ldr	r0, [pc, #572]	@ (8001b70 <main+0x29c>)
 8001932:	f003 fc61 	bl	80051f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001936:	210c      	movs	r1, #12
 8001938:	488d      	ldr	r0, [pc, #564]	@ (8001b70 <main+0x29c>)
 800193a:	f003 fc5d 	bl	80051f8 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 800193e:	2220      	movs	r2, #32
 8001940:	498c      	ldr	r1, [pc, #560]	@ (8001b74 <main+0x2a0>)
 8001942:	488d      	ldr	r0, [pc, #564]	@ (8001b78 <main+0x2a4>)
 8001944:	f004 faff 	bl	8005f46 <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t start_time = HAL_GetTick();
 8001948:	f000 ffe4 	bl	8002914 <HAL_GetTick>
 800194c:	6078      	str	r0, [r7, #4]
	  uint32_t current_time = HAL_GetTick();
 800194e:	f000 ffe1 	bl	8002914 <HAL_GetTick>
 8001952:	6038      	str	r0, [r7, #0]
	  if((current_time-last_update_time)>=INTERVAL_MS){
 8001954:	4b89      	ldr	r3, [pc, #548]	@ (8001b7c <main+0x2a8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2205      	movs	r2, #5
 800195e:	4293      	cmp	r3, r2
 8001960:	f0c0 80d8 	bcc.w	8001b14 <main+0x240>
		  last_update_time=HAL_GetTick();
 8001964:	f000 ffd6 	bl	8002914 <HAL_GetTick>
 8001968:	4603      	mov	r3, r0
 800196a:	4a84      	ldr	r2, [pc, #528]	@ (8001b7c <main+0x2a8>)
 800196c:	6013      	str	r3, [r2, #0]
	  ReadSensors();
 800196e:	f7ff fb81 	bl	8001074 <ReadSensors>
	  sensors_time = HAL_GetTick()-start_time;
 8001972:	f000 ffcf 	bl	8002914 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4a80      	ldr	r2, [pc, #512]	@ (8001b80 <main+0x2ac>)
 800197e:	6013      	str	r3, [r2, #0]

	  position=line_data();
 8001980:	f7ff fbe4 	bl	800114c <line_data>
 8001984:	4603      	mov	r3, r0
 8001986:	4a7f      	ldr	r2, [pc, #508]	@ (8001b84 <main+0x2b0>)
 8001988:	6013      	str	r3, [r2, #0]
	  if(position>0 && position!=255){turn=1;
 800198a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b84 <main+0x2b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd07      	ble.n	80019a2 <main+0xce>
 8001992:	4b7c      	ldr	r3, [pc, #496]	@ (8001b84 <main+0x2b0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2bff      	cmp	r3, #255	@ 0xff
 8001998:	d003      	beq.n	80019a2 <main+0xce>
 800199a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b88 <main+0x2b4>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e007      	b.n	80019b2 <main+0xde>
	  }else if(position<0){turn=-1;}
 80019a2:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <main+0x2b0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da03      	bge.n	80019b2 <main+0xde>
 80019aa:	4b77      	ldr	r3, [pc, #476]	@ (8001b88 <main+0x2b4>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019b0:	601a      	str	r2, [r3, #0]

	  uint32_t last_speed_update = HAL_GetTick();
 80019b2:	f000 ffaf 	bl	8002914 <HAL_GetTick>
 80019b6:	6178      	str	r0, [r7, #20]
	  turn_speed = 70; // initial
 80019b8:	4b74      	ldr	r3, [pc, #464]	@ (8001b8c <main+0x2b8>)
 80019ba:	2246      	movs	r2, #70	@ 0x46
 80019bc:	701a      	strb	r2, [r3, #0]

	  uint32_t last_loop_time = HAL_GetTick(); // ms timer start
 80019be:	f000 ffa9 	bl	8002914 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

	  while (position == 255) {
 80019c4:	e097      	b.n	8001af6 <main+0x222>
	      // Run loop contents only every 5 ms
	      if (HAL_GetTick() - last_loop_time >= 5) {
 80019c6:	f000 ffa5 	bl	8002914 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	f240 8088 	bls.w	8001ae6 <main+0x212>
	          last_loop_time = HAL_GetTick();
 80019d6:	f000 ff9d 	bl	8002914 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

	          // Control turning
	          if (turn == 1) { // Right turn
 80019dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b88 <main+0x2b4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10d      	bne.n	8001a00 <main+0x12c>
	              setMotorSpeed(0, turn_speed);
 80019e4:	4b69      	ldr	r3, [pc, #420]	@ (8001b8c <main+0x2b8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fd3a 	bl	8001464 <setMotorSpeed>
	              setMotorSpeed(1, -turn_speed);
 80019f0:	4b66      	ldr	r3, [pc, #408]	@ (8001b8c <main+0x2b8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	425b      	negs	r3, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fd33 	bl	8001464 <setMotorSpeed>
 80019fe:	e011      	b.n	8001a24 <main+0x150>
	          } else if (turn == -1) { // Left turn
 8001a00:	4b61      	ldr	r3, [pc, #388]	@ (8001b88 <main+0x2b4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a08:	d10c      	bne.n	8001a24 <main+0x150>
	              setMotorSpeed(0, -turn_speed);
 8001a0a:	4b60      	ldr	r3, [pc, #384]	@ (8001b8c <main+0x2b8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	425b      	negs	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fd26 	bl	8001464 <setMotorSpeed>
	              setMotorSpeed(1, turn_speed);
 8001a18:	4b5c      	ldr	r3, [pc, #368]	@ (8001b8c <main+0x2b8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff fd20 	bl	8001464 <setMotorSpeed>
	          }

	          // Gradually increase turn speed every 1 second up to 100
	          if (HAL_GetTick() - last_speed_update >= 1000) {
 8001a24:	f000 ff76 	bl	8002914 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a32:	d313      	bcc.n	8001a5c <main+0x188>
	              last_speed_update = HAL_GetTick();
 8001a34:	f000 ff6e 	bl	8002914 <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]
	              if (turn_speed < 100) {
 8001a3a:	4b54      	ldr	r3, [pc, #336]	@ (8001b8c <main+0x2b8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b63      	cmp	r3, #99	@ 0x63
 8001a40:	d80c      	bhi.n	8001a5c <main+0x188>
	                  turn_speed++;
 8001a42:	4b52      	ldr	r3, [pc, #328]	@ (8001b8c <main+0x2b8>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b50      	ldr	r3, [pc, #320]	@ (8001b8c <main+0x2b8>)
 8001a4c:	701a      	strb	r2, [r3, #0]
	                  if (turn_speed > 100) turn_speed = 100;
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b8c <main+0x2b8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d902      	bls.n	8001a5c <main+0x188>
 8001a56:	4b4d      	ldr	r3, [pc, #308]	@ (8001b8c <main+0x2b8>)
 8001a58:	2264      	movs	r2, #100	@ 0x64
 8001a5a:	701a      	strb	r2, [r3, #0]
	              }
	          }

	          // Sensor reading and position check
	          ReadSensors();
 8001a5c:	f7ff fb0a 	bl	8001074 <ReadSensors>
	          position = line_data();
 8001a60:	f7ff fb74 	bl	800114c <line_data>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a47      	ldr	r2, [pc, #284]	@ (8001b84 <main+0x2b0>)
 8001a68:	6013      	str	r3, [r2, #0]

	          // Extra condition check
	          if (position != 255) {
 8001a6a:	4b46      	ldr	r3, [pc, #280]	@ (8001b84 <main+0x2b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d039      	beq.n	8001ae6 <main+0x212>
	              int pair_found = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
	              for (int i = 0; i < 8; i++) { // 0..7, check i and i+1
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	e011      	b.n	8001aa0 <main+0x1cc>
	                  if (lastColor[i] == 0 && lastColor[i + 1] == 0) {
 8001a7c:	4a44      	ldr	r2, [pc, #272]	@ (8001b90 <main+0x2bc>)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d108      	bne.n	8001a9a <main+0x1c6>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a40      	ldr	r2, [pc, #256]	@ (8001b90 <main+0x2bc>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <main+0x1c6>
	                      pair_found = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
	                      break;
 8001a98:	e005      	b.n	8001aa6 <main+0x1d2>
	              for (int i = 0; i < 8; i++) { // 0..7, check i and i+1
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	ddea      	ble.n	8001a7c <main+0x1a8>
	                  }
	              }
	              if (!pair_found) {
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11c      	bne.n	8001ae6 <main+0x212>
	                  position = 255; // No two adjacent black sensors → line lost
 8001aac:	4b35      	ldr	r3, [pc, #212]	@ (8001b84 <main+0x2b0>)
 8001aae:	22ff      	movs	r2, #255	@ 0xff
 8001ab0:	601a      	str	r2, [r3, #0]
	              }
	          }
	      }
	      while(HAL_GetTick()-last_telemetry_time>20){last_telemetry_time=HAL_GetTick();send_telemetry_data(position,correction);}
 8001ab2:	e018      	b.n	8001ae6 <main+0x212>
 8001ab4:	f000 ff2e 	bl	8002914 <HAL_GetTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <main+0x2c0>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <main+0x2b0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001aca:	4b33      	ldr	r3, [pc, #204]	@ (8001b98 <main+0x2c4>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f882 	bl	8000bdc <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	ee00 3a90 	vmov	s1, r3
 8001ade:	eeb0 0a48 	vmov.f32	s0, s16
 8001ae2:	f7ff fd9b 	bl	800161c <send_telemetry_data>
 8001ae6:	f000 ff15 	bl	8002914 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <main+0x2c0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b14      	cmp	r3, #20
 8001af4:	d8de      	bhi.n	8001ab4 <main+0x1e0>
	  while (position == 255) {
 8001af6:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <main+0x2b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2bff      	cmp	r3, #255	@ 0xff
 8001afc:	f43f af63 	beq.w	80019c6 <main+0xf2>


//	  if(position>0 && position!=255){turn=1;
//	  }else if(position<	0){turn=-1;}

	  error = -(position);
 8001b00:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <main+0x2b0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	425b      	negs	r3, r3
 8001b06:	4a25      	ldr	r2, [pc, #148]	@ (8001b9c <main+0x2c8>)
 8001b08:	6013      	str	r3, [r2, #0]
	  computePID(position);
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <main+0x2b0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fbb6 	bl	8001280 <computePID>
	  }
	  run_time=HAL_GetTick()-start_time;
 8001b14:	f000 fefe 	bl	8002914 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a20      	ldr	r2, [pc, #128]	@ (8001ba0 <main+0x2cc>)
 8001b20:	6013      	str	r3, [r2, #0]
	  while(HAL_GetTick()-last_telemetry_time>20){last_telemetry_time=HAL_GetTick();send_telemetry_data(position,correction);}
 8001b22:	e018      	b.n	8001b56 <main+0x282>
 8001b24:	f000 fef6 	bl	8002914 <HAL_GetTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <main+0x2c0>)
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <main+0x2b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <main+0x2c4>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff f84a 	bl	8000bdc <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	ee00 3a90 	vmov	s1, r3
 8001b4e:	eeb0 0a48 	vmov.f32	s0, s16
 8001b52:	f7ff fd63 	bl	800161c <send_telemetry_data>
 8001b56:	f000 fedd 	bl	8002914 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <main+0x2c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b14      	cmp	r3, #20
 8001b64:	d8de      	bhi.n	8001b24 <main+0x250>
  {
 8001b66:	e6ef      	b.n	8001948 <main+0x74>
 8001b68:	20000420 	.word	0x20000420
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	200003d8 	.word	0x200003d8
 8001b74:	200005b8 	.word	0x200005b8
 8001b78:	20000468 	.word	0x20000468
 8001b7c:	200005b0 	.word	0x200005b0
 8001b80:	20000518 	.word	0x20000518
 8001b84:	20000550 	.word	0x20000550
 8001b88:	200000ac 	.word	0x200000ac
 8001b8c:	200000a9 	.word	0x200000a9
 8001b90:	200005a4 	.word	0x200005a4
 8001b94:	200005d8 	.word	0x200005d8
 8001b98:	20000570 	.word	0x20000570
 8001b9c:	20000554 	.word	0x20000554
 8001ba0:	2000051c 	.word	0x2000051c

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	@ 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	@ 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f006 f862 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <SystemClock_Config+0xc8>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	4a26      	ldr	r2, [pc, #152]	@ (8001c6c <SystemClock_Config+0xc8>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd8:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <SystemClock_Config+0xc8>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a20      	ldr	r2, [pc, #128]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c14:	2319      	movs	r3, #25
 8001c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fd89 	bl	8004740 <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 faac 	bl	8002190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	2103      	movs	r1, #3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 ffeb 	bl	8004c30 <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c60:	f000 fa96 	bl	8002190 <Error_Handler>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3750      	adds	r7, #80	@ 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000

08001c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	@ 0x30
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 fff4 	bl	8007c7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c94:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001c96:	4a30      	ldr	r2, [pc, #192]	@ (8001d58 <MX_ADC1_Init+0xe4>)
 8001c98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001c9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ca0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cae:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cc4:	4a25      	ldr	r2, [pc, #148]	@ (8001d5c <MX_ADC1_Init+0xe8>)
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce2:	481c      	ldr	r0, [pc, #112]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001ce4:	f000 fe22 	bl	800292c <HAL_ADC_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f000 fa4f 	bl	8002190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4619      	mov	r1, r3
 8001d04:	4813      	ldr	r0, [pc, #76]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001d06:	f001 f8d1 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001d10:	f000 fa3e 	bl	8002190 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <MX_ADC1_Init+0xec>)
 8001d2a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <MX_ADC1_Init+0xe0>)
 8001d3e:	f001 fb6f 	bl	8003420 <HAL_ADCEx_InjectedConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001d48:	f000 fa22 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	@ 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200002dc 	.word	0x200002dc
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	0f000001 	.word	0x0f000001
 8001d60:	000f0001 	.word	0x000f0001

08001d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	@ (8001db8 <MX_I2C1_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <MX_I2C1_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	@ (8001db4 <MX_I2C1_Init+0x50>)
 8001da2:	f002 fb89 	bl	80044b8 <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f000 f9f0 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000384 	.word	0x20000384
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	000186a0 	.word	0x000186a0

08001dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b096      	sub	sp, #88	@ 0x58
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2220      	movs	r2, #32
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 ff3f 	bl	8007c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfe:	4b50      	ldr	r3, [pc, #320]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e00:	4a50      	ldr	r2, [pc, #320]	@ (8001f44 <MX_TIM1_Init+0x184>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 960-1;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e06:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001e0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001e12:	4b4b      	ldr	r3, [pc, #300]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e14:	22c7      	movs	r2, #199	@ 0xc7
 8001e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1e:	4b48      	ldr	r3, [pc, #288]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e24:	4b46      	ldr	r3, [pc, #280]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e2a:	4845      	ldr	r0, [pc, #276]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e2c:	f003 f8e0 	bl	8004ff0 <HAL_TIM_Base_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e36:	f000 f9ab 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e44:	4619      	mov	r1, r3
 8001e46:	483e      	ldr	r0, [pc, #248]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e48:	f003 fb48 	bl	80054dc <HAL_TIM_ConfigClockSource>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e52:	f000 f99d 	bl	8002190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e56:	483a      	ldr	r0, [pc, #232]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e58:	f003 f974 	bl	8005144 <HAL_TIM_PWM_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e62:	f000 f995 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e72:	4619      	mov	r1, r3
 8001e74:	4832      	ldr	r0, [pc, #200]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001e76:	f003 fecb 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e80:	f000 f986 	bl	8002190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	@ 0x60
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e90:	2300      	movs	r3, #0
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4825      	ldr	r0, [pc, #148]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001eaa:	f003 fa55 	bl	8005358 <HAL_TIM_PWM_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001eb4:	f000 f96c 	bl	8002190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481f      	ldr	r0, [pc, #124]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001ec2:	f003 fa49 	bl	8005358 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ecc:	f000 f960 	bl	8002190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4819      	ldr	r0, [pc, #100]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001eda:	f003 fa3d 	bl	8005358 <HAL_TIM_PWM_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ee4:	f000 f954 	bl	8002190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	220c      	movs	r2, #12
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4813      	ldr	r0, [pc, #76]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001ef2:	f003 fa31 	bl	8005358 <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001efc:	f000 f948 	bl	8002190 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001f24:	f003 fee2 	bl	8005cec <HAL_TIMEx_ConfigBreakDeadTime>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001f2e:	f000 f92f 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f32:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <MX_TIM1_Init+0x180>)
 8001f34:	f000 fa72 	bl	800241c <HAL_TIM_MspPostInit>

}
 8001f38:	bf00      	nop
 8001f3a:	3758      	adds	r7, #88	@ 0x58
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200003d8 	.word	0x200003d8
 8001f44:	40010000 	.word	0x40010000

08001f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f6e:	225f      	movs	r2, #95	@ 0x5f
 8001f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f7a:	f06f 0201 	mvn.w	r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8c:	4813      	ldr	r0, [pc, #76]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001f8e:	f003 f82f 	bl	8004ff0 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f98:	f000 f8fa 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001faa:	f003 fa97 	bl	80054dc <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fb4:	f000 f8ec 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_TIM2_Init+0x94>)
 8001fc6:	f003 fe23 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fd0:	f000 f8de 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000420 	.word	0x20000420

08001fe0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <MX_USART1_UART_Init+0x50>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <MX_USART1_UART_Init+0x4c>)
 8002018:	f003 feba 	bl	8005d90 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002022:	f000 f8b5 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000468 	.word	0x20000468
 8002030:	40011000 	.word	0x40011000

08002034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <MX_DMA_Init+0x4c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a0f      	ldr	r2, [pc, #60]	@ (8002080 <MX_DMA_Init+0x4c>)
 8002044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <MX_DMA_Init+0x4c>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2038      	movs	r0, #56	@ 0x38
 800205c:	f001 fc55 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002060:	2038      	movs	r0, #56	@ 0x38
 8002062:	f001 fc6e 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	203a      	movs	r0, #58	@ 0x3a
 800206c:	f001 fc4d 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002070:	203a      	movs	r0, #58	@ 0x3a
 8002072:	f001 fc66 	bl	8003942 <HAL_NVIC_EnableIRQ>

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b38      	ldr	r3, [pc, #224]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a37      	ldr	r2, [pc, #220]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b35      	ldr	r3, [pc, #212]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	4a30      	ldr	r2, [pc, #192]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a29      	ldr	r2, [pc, #164]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a22      	ldr	r2, [pc, #136]	@ (8002180 <MX_GPIO_Init+0xfc>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <MX_GPIO_Init+0xfc>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 800210a:	2200      	movs	r2, #0
 800210c:	f24f 413e 	movw	r1, #62526	@ 0xf43e
 8002110:	481c      	ldr	r0, [pc, #112]	@ (8002184 <MX_GPIO_Init+0x100>)
 8002112:	f002 f9b7 	bl	8004484 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 800211c:	481a      	ldr	r0, [pc, #104]	@ (8002188 <MX_GPIO_Init+0x104>)
 800211e:	f002 f9b1 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002122:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	4815      	ldr	r0, [pc, #84]	@ (800218c <MX_GPIO_Init+0x108>)
 8002138:	f002 f820 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 800213c:	f24f 433e 	movw	r3, #62526	@ 0xf43e
 8002140:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	480b      	ldr	r0, [pc, #44]	@ (8002184 <MX_GPIO_Init+0x100>)
 8002156:	f002 f811 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 800215a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <MX_GPIO_Init+0x104>)
 8002174:	f002 f802 	bl	800417c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	@ 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	40020400 	.word	0x40020400
 8002188:	40020000 	.word	0x40020000
 800218c:	40020800 	.word	0x40020800

08002190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <Error_Handler+0x8>

0800219c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a0f      	ldr	r2, [pc, #60]	@ (80021e8 <HAL_MspInit+0x4c>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <HAL_MspInit+0x4c>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3f      	ldr	r2, [pc, #252]	@ (8002308 <HAL_ADC_MspInit+0x11c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d178      	bne.n	8002300 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b3e      	ldr	r3, [pc, #248]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	4a3d      	ldr	r2, [pc, #244]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221c:	6453      	str	r3, [r2, #68]	@ 0x44
 800221e:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b37      	ldr	r3, [pc, #220]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a36      	ldr	r2, [pc, #216]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b34      	ldr	r3, [pc, #208]	@ (800230c <HAL_ADC_MspInit+0x120>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b30      	ldr	r3, [pc, #192]	@ (800230c <HAL_ADC_MspInit+0x120>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a2f      	ldr	r2, [pc, #188]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <HAL_ADC_MspInit+0x120>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002262:	23ff      	movs	r3, #255	@ 0xff
 8002264:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4826      	ldr	r0, [pc, #152]	@ (8002310 <HAL_ADC_MspInit+0x124>)
 8002276:	f001 ff81 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800227a:	2301      	movs	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227e:	2303      	movs	r3, #3
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4821      	ldr	r0, [pc, #132]	@ (8002314 <HAL_ADC_MspInit+0x128>)
 800228e:	f001 ff75 	bl	800417c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002292:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 8002294:	4a21      	ldr	r2, [pc, #132]	@ (800231c <HAL_ADC_MspInit+0x130>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002298:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022ba:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022d4:	4810      	ldr	r0, [pc, #64]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022d6:	f001 fb4f 	bl	8003978 <HAL_DMA_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80022e0:	f7ff ff56 	bl	8002190 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80022ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002318 <HAL_ADC_MspInit+0x12c>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	2012      	movs	r0, #18
 80022f6:	f001 fb08 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022fa:	2012      	movs	r0, #18
 80022fc:	f001 fb21 	bl	8003942 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	@ 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40012000 	.word	0x40012000
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	20000324 	.word	0x20000324
 800231c:	40026410 	.word	0x40026410

08002320 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <HAL_I2C_MspInit+0x84>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d12c      	bne.n	800239c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <HAL_I2C_MspInit+0x88>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <HAL_I2C_MspInit+0x88>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_I2C_MspInit+0x88>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002364:	2312      	movs	r3, #18
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002370:	2304      	movs	r3, #4
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	480c      	ldr	r0, [pc, #48]	@ (80023ac <HAL_I2C_MspInit+0x8c>)
 800237c:	f001 fefe 	bl	800417c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_I2C_MspInit+0x88>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	4a07      	ldr	r2, [pc, #28]	@ (80023a8 <HAL_I2C_MspInit+0x88>)
 800238a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800238e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_I2C_MspInit+0x88>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40005400 	.word	0x40005400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020400 	.word	0x40020400

080023b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <HAL_TIM_Base_MspInit+0x64>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_TIM_Base_MspInit+0x68>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <HAL_TIM_Base_MspInit+0x68>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_TIM_Base_MspInit+0x68>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023de:	e012      	b.n	8002406 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d10d      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_TIM_Base_MspInit+0x68>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <HAL_TIM_Base_MspInit+0x68>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <HAL_TIM_Base_MspInit+0x68>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40010000 	.word	0x40010000
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <HAL_TIM_MspPostInit+0x68>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d11e      	bne.n	800247c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_TIM_MspPostInit+0x6c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <HAL_TIM_MspPostInit+0x6c>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_TIM_MspPostInit+0x6c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800245a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800245e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800246c:	2301      	movs	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	4805      	ldr	r0, [pc, #20]	@ (800248c <HAL_TIM_MspPostInit+0x70>)
 8002478:	f001 fe80 	bl	800417c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40010000 	.word	0x40010000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000

08002490 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	@ (8002580 <HAL_UART_MspInit+0xf0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d161      	bne.n	8002576 <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b33      	ldr	r3, [pc, #204]	@ (8002584 <HAL_UART_MspInit+0xf4>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	4a32      	ldr	r2, [pc, #200]	@ (8002584 <HAL_UART_MspInit+0xf4>)
 80024bc:	f043 0310 	orr.w	r3, r3, #16
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	4b30      	ldr	r3, [pc, #192]	@ (8002584 <HAL_UART_MspInit+0xf4>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002584 <HAL_UART_MspInit+0xf4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002584 <HAL_UART_MspInit+0xf4>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <HAL_UART_MspInit+0xf4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ea:	23c0      	movs	r3, #192	@ 0xc0
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4820      	ldr	r0, [pc, #128]	@ (8002588 <HAL_UART_MspInit+0xf8>)
 8002506:	f001 fe39 	bl	800417c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_UART_MspInit+0xfc>)
 800250c:	4a20      	ldr	r2, [pc, #128]	@ (8002590 <HAL_UART_MspInit+0x100>)
 800250e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002510:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002512:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002516:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_UART_MspInit+0xfc>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800251e:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800252a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800252c:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_UART_MspInit+0xfc>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002532:	4b16      	ldr	r3, [pc, #88]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_UART_MspInit+0xfc>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800253e:	4b13      	ldr	r3, [pc, #76]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800254a:	4810      	ldr	r0, [pc, #64]	@ (800258c <HAL_UART_MspInit+0xfc>)
 800254c:	f001 fa14 	bl	8003978 <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002556:	f7ff fe1b 	bl	8002190 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <HAL_UART_MspInit+0xfc>)
 800255e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002560:	4a0a      	ldr	r2, [pc, #40]	@ (800258c <HAL_UART_MspInit+0xfc>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	2025      	movs	r0, #37	@ 0x25
 800256c:	f001 f9cd 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002570:	2025      	movs	r0, #37	@ 0x25
 8002572:	f001 f9e6 	bl	8003942 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	@ 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40011000 	.word	0x40011000
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400
 800258c:	200004b0 	.word	0x200004b0
 8002590:	40026440 	.word	0x40026440

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <NMI_Handler+0x4>

0800259c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <HardFault_Handler+0x4>

080025a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <MemManage_Handler+0x4>

080025ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <UsageFault_Handler+0x4>

080025bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ea:	f000 f97f 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <ADC_IRQHandler+0x10>)
 80025fa:	f000 f9da 	bl	80029b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200002dc 	.word	0x200002dc

08002608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800260c:	4802      	ldr	r0, [pc, #8]	@ (8002618 <USART1_IRQHandler+0x10>)
 800260e:	f003 fcf7 	bl	8006000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000468 	.word	0x20000468

0800261c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002620:	4802      	ldr	r0, [pc, #8]	@ (800262c <DMA2_Stream0_IRQHandler+0x10>)
 8002622:	f001 fb41 	bl	8003ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000324 	.word	0x20000324

08002630 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002634:	4802      	ldr	r0, [pc, #8]	@ (8002640 <DMA2_Stream2_IRQHandler+0x10>)
 8002636:	f001 fb37 	bl	8003ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200004b0 	.word	0x200004b0

08002644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_kill>:

int _kill(int pid, int sig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800265e:	f005 fb35 	bl	8007ccc <__errno>
 8002662:	4603      	mov	r3, r0
 8002664:	2216      	movs	r2, #22
 8002666:	601a      	str	r2, [r3, #0]
  return -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_exit>:

void _exit (int status)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800267c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffe7 	bl	8002654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002686:	bf00      	nop
 8002688:	e7fd      	b.n	8002686 <_exit+0x12>

0800268a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e00a      	b.n	80026b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800269c:	f3af 8000 	nop.w
 80026a0:	4601      	mov	r1, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	60ba      	str	r2, [r7, #8]
 80026a8:	b2ca      	uxtb	r2, r1
 80026aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3301      	adds	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dbf0      	blt.n	800269c <_read+0x12>
  }

  return len;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e009      	b.n	80026ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	60ba      	str	r2, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	dbf1      	blt.n	80026d6 <_write+0x12>
  }
  return len;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_close>:

int _close(int file)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002724:	605a      	str	r2, [r3, #4]
  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_isatty>:

int _isatty(int file)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002794:	f005 fa9a 	bl	8007ccc <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	220c      	movs	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027a2:	e009      	b.n	80027b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <_sbrk+0x64>)
 80027b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20020000 	.word	0x20020000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	2000060c 	.word	0x2000060c
 80027cc:	20000760 	.word	0x20000760

080027d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <SystemInit+0x20>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <SystemInit+0x20>)
 80027dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800282c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027f8:	f7ff ffea 	bl	80027d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027fc:	480c      	ldr	r0, [pc, #48]	@ (8002830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027fe:	490d      	ldr	r1, [pc, #52]	@ (8002834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002800:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002814:	4c0a      	ldr	r4, [pc, #40]	@ (8002840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002822:	f005 fa59 	bl	8007cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002826:	f7ff f855 	bl	80018d4 <main>
  bx  lr    
 800282a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800282c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8002838:	0800a000 	.word	0x0800a000
  ldr r2, =_sbss
 800283c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002840:	20000760 	.word	0x20000760

08002844 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <DMA1_Stream0_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_Init+0x40>)
 8002852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_Init+0x40>)
 800285e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_Init+0x40>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f001 f83f 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	200f      	movs	r0, #15
 8002878:	f000 f808 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7ff fc8e 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 f857 	bl	800395e <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028c8:	f001 f81f 	bl	800390a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	@ (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200000e8 	.word	0x200000e8
 80028e4:	200000f0 	.word	0x200000f0
 80028e8:	200000ec 	.word	0x200000ec

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	@ (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200000f0 	.word	0x200000f0
 8002910:	20000610 	.word	0x20000610

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000610 	.word	0x20000610

0800292c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e033      	b.n	80029aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff fc4e 	bl	80021ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002972:	f023 0302 	bic.w	r3, r3, #2
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fbc6 	bl	8003110 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
 800299a:	e001      	b.n	80029a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d049      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xca>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d046      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12b      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d127      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d119      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0220 	bic.w	r2, r2, #32
 8002a46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7fe faeb 	bl	8001048 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0212 	mvn.w	r2, #18
 8002a7a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d057      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x190>
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d054      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d139      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d12b      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d124      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11d      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b0c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fc6a 	bl	800340c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 020c 	mvn.w	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x1d6>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d014      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f983 	bl	8002e84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0201 	mvn.w	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b96:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_ADC_IRQHandler+0x218>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba8:	f043 0202 	orr.w	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0220 	mvn.w	r2, #32
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f96c 	bl	8002e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0220 	mvn.w	r2, #32
 8002bc8:	601a      	str	r2, [r3, #0]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_Start_DMA+0x22>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e0d0      	b.n	8002d98 <HAL_ADC_Start_DMA+0x1c4>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d018      	beq.n	8002c3e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c1c:	4b60      	ldr	r3, [pc, #384]	@ (8002da0 <HAL_ADC_Start_DMA+0x1cc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a60      	ldr	r2, [pc, #384]	@ (8002da4 <HAL_ADC_Start_DMA+0x1d0>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9a      	lsrs	r2, r3, #18
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002c30:	e002      	b.n	8002c38 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f9      	bne.n	8002c32 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4c:	d107      	bne.n	8002c5e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f040 8088 	bne.w	8002d7e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f023 0206 	bic.w	r2, r3, #6
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cba:	e002      	b.n	8002cc2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cca:	4b37      	ldr	r3, [pc, #220]	@ (8002da8 <HAL_ADC_Start_DMA+0x1d4>)
 8002ccc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	4a36      	ldr	r2, [pc, #216]	@ (8002dac <HAL_ADC_Start_DMA+0x1d8>)
 8002cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cda:	4a35      	ldr	r2, [pc, #212]	@ (8002db0 <HAL_ADC_Start_DMA+0x1dc>)
 8002cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	4a34      	ldr	r2, [pc, #208]	@ (8002db4 <HAL_ADC_Start_DMA+0x1e0>)
 8002ce4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002cee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002cfe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	334c      	adds	r3, #76	@ 0x4c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f000 fed8 	bl	8003ad4 <HAL_DMA_Start_IT>
 8002d24:	4603      	mov	r3, r0
 8002d26:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10f      	bne.n	8002d54 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d129      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	e020      	b.n	8002d96 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <HAL_ADC_Start_DMA+0x1e4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d11b      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1c2>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d114      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00b      	b.n	8002d96 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200000e8 	.word	0x200000e8
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	40012300 	.word	0x40012300
 8002dac:	08003309 	.word	0x08003309
 8002db0:	080033c3 	.word	0x080033c3
 8002db4:	080033df 	.word	0x080033df
 8002db8:	40012000 	.word	0x40012000

08002dbc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_Stop_DMA+0x1a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e048      	b.n	8002e68 <HAL_ADC_Stop_DMA+0xac>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d130      	bne.n	8002e5e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e0a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d10f      	bne.n	8002e3a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 feb0 	bl	8003b84 <HAL_DMA_Abort>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002e48:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x1c>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e113      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x244>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d925      	bls.n	8002f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68d9      	ldr	r1, [r3, #12]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	3b1e      	subs	r3, #30
 8002eee:	2207      	movs	r2, #7
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	400a      	ands	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68d9      	ldr	r1, [r3, #12]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4603      	mov	r3, r0
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4403      	add	r3, r0
 8002f16:	3b1e      	subs	r3, #30
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	e022      	b.n	8002f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	2207      	movs	r2, #7
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	400a      	ands	r2, r1
 8002f46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4403      	add	r3, r0
 8002f60:	409a      	lsls	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d824      	bhi.n	8002fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	3b05      	subs	r3, #5
 8002f84:	221f      	movs	r2, #31
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	400a      	ands	r2, r1
 8002f92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	3b05      	subs	r3, #5
 8002fae:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fba:	e04c      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d824      	bhi.n	800300e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b23      	subs	r3, #35	@ 0x23
 8002fd6:	221f      	movs	r2, #31
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b23      	subs	r3, #35	@ 0x23
 8003000:	fa00 f203 	lsl.w	r2, r0, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
 800300c:	e023      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b41      	subs	r3, #65	@ 0x41
 8003020:	221f      	movs	r2, #31
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	400a      	ands	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b41      	subs	r3, #65	@ 0x41
 800304a:	fa00 f203 	lsl.w	r2, r0, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003056:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <HAL_ADC_ConfigChannel+0x250>)
 8003058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a28      	ldr	r2, [pc, #160]	@ (8003100 <HAL_ADC_ConfigChannel+0x254>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10f      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1d8>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d10b      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1d      	ldr	r2, [pc, #116]	@ (8003100 <HAL_ADC_ConfigChannel+0x254>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d12b      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x23a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1c      	ldr	r2, [pc, #112]	@ (8003104 <HAL_ADC_ConfigChannel+0x258>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x1f4>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b11      	cmp	r3, #17
 800309e:	d122      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <HAL_ADC_ConfigChannel+0x258>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <HAL_ADC_ConfigChannel+0x25c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a11      	ldr	r2, [pc, #68]	@ (800310c <HAL_ADC_ConfigChannel+0x260>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	0c9a      	lsrs	r2, r3, #18
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3b01      	subs	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f9      	bne.n	80030da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40012300 	.word	0x40012300
 8003100:	40012000 	.word	0x40012000
 8003104:	10000012 	.word	0x10000012
 8003108:	200000e8 	.word	0x200000e8
 800310c:	431bde83 	.word	0x431bde83

08003110 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003118:	4b79      	ldr	r3, [pc, #484]	@ (8003300 <ADC_Init+0x1f0>)
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <ADC_Init+0x1f4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e00f      	b.n	800320e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800320c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0202 	bic.w	r2, r2, #2
 800321c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7e1b      	ldrb	r3, [r3, #24]
 8003228:	005a      	lsls	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800324a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800325a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	3b01      	subs	r3, #1
 8003268:	035a      	lsls	r2, r3, #13
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e007      	b.n	8003284 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	3b01      	subs	r3, #1
 80032a0:	051a      	lsls	r2, r3, #20
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032c6:	025a      	lsls	r2, r3, #9
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	029a      	lsls	r2, r3, #10
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012300 	.word	0x40012300
 8003304:	0f000001 	.word	0x0f000001

08003308 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	d13c      	bne.n	800339c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d12b      	bne.n	8003394 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	d127      	bne.n	8003394 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800335c:	2b00      	cmp	r3, #0
 800335e:	d119      	bne.n	8003394 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0220 	bic.w	r2, r2, #32
 800336e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f7fd fe57 	bl	8001048 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800339a:	e00e      	b.n	80033ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7ff fd75 	bl	8002e98 <HAL_ADC_ErrorCallback>
}
 80033ae:	e004      	b.n	80033ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff fd4d 	bl	8002e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	@ 0x40
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fd4a 	bl	8002e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8003434:	2302      	movs	r3, #2
 8003436:	e17e      	b.n	8003736 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b09      	cmp	r3, #9
 8003446:	d925      	bls.n	8003494 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	3b1e      	subs	r3, #30
 800345e:	2207      	movs	r2, #7
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43da      	mvns	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	400a      	ands	r2, r1
 800346c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68d9      	ldr	r1, [r3, #12]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	4618      	mov	r0, r3
 8003480:	4603      	mov	r3, r0
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4403      	add	r3, r0
 8003486:	3b1e      	subs	r3, #30
 8003488:	409a      	lsls	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e022      	b.n	80034da <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6919      	ldr	r1, [r3, #16]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	2207      	movs	r2, #7
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	400a      	ands	r2, r1
 80034b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6919      	ldr	r1, [r3, #16]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4618      	mov	r0, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4403      	add	r3, r0
 80034d0:	409a      	lsls	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	051a      	lsls	r2, r3, #20
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3303      	adds	r3, #3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	221f      	movs	r2, #31
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43da      	mvns	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	400a      	ands	r2, r1
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	4618      	mov	r0, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3303      	adds	r3, #3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	fa00 f203 	lsl.w	r2, r0, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	4a75      	ldr	r2, [pc, #468]	@ (8003744 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8003580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80035a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6899      	ldr	r1, [r3, #8]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	e00f      	b.n	80035d8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80035c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80035d6:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	7d5b      	ldrb	r3, [r3, #21]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	e007      	b.n	8003602 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003600:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	7d1b      	ldrb	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e007      	b.n	800362c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800362a:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d02e      	beq.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8003634:	2b03      	cmp	r3, #3
 8003636:	d840      	bhi.n	80036ba <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8003638:	2b01      	cmp	r3, #1
 800363a:	d002      	beq.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800363c:	2b02      	cmp	r3, #2
 800363e:	d014      	beq.n	800366a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8003640:	e03b      	b.n	80036ba <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003650:	f023 030f 	bic.w	r3, r3, #15
 8003654:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6959      	ldr	r1, [r3, #20]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	615a      	str	r2, [r3, #20]
      break;
 8003668:	e03b      	b.n	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003678:	f023 030f 	bic.w	r3, r3, #15
 800367c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6999      	ldr	r1, [r3, #24]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	619a      	str	r2, [r3, #24]
      break;
 8003690:	e027      	b.n	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80036a0:	f023 030f 	bic.w	r3, r3, #15
 80036a4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	61da      	str	r2, [r3, #28]
      break;
 80036b8:	e013      	b.n	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80036c8:	f023 030f 	bic.w	r3, r3, #15
 80036cc:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a19      	ldr	r1, [r3, #32]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	621a      	str	r2, [r3, #32]
      break;
 80036e0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036e2:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80036e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a18      	ldr	r2, [pc, #96]	@ (800374c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d109      	bne.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b12      	cmp	r3, #18
 80036f6:	d105      	bne.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10e      	bne.n	800372c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a0f      	ldr	r2, [pc, #60]	@ (8003750 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b11      	cmp	r3, #17
 800371e:	d105      	bne.n	800372c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	000f0001 	.word	0x000f0001
 8003748:	40012300 	.word	0x40012300
 800374c:	40012000 	.word	0x40012000
 8003750:	10000012 	.word	0x10000012

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	@ (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	@ (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	@ (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	@ 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	@ 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff29 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800391c:	f7ff ff3e 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff ff8e 	bl	8003848 <NVIC_EncodePriority>
 800392c:	4602      	mov	r2, r0
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff5d 	bl	80037f4 <__NVIC_SetPriority>
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff31 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffa2 	bl	80038b0 <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7fe ffc6 	bl	8002914 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e099      	b.n	8003ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b4:	e00f      	b.n	80039d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b6:	f7fe ffad 	bl	8002914 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d908      	bls.n	80039d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2203      	movs	r2, #3
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e078      	b.n	8003ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e8      	bne.n	80039b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <HAL_DMA_Init+0x158>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d107      	bne.n	8003a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d117      	bne.n	8003a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fb01 	bl	8004084 <DMA_CheckFifoParam>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a96:	2301      	movs	r3, #1
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fab8 	bl	8004018 <DMA_CalcBaseAndBitshift>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	223f      	movs	r2, #63	@ 0x3f
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	f010803f 	.word	0xf010803f

08003ad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_DMA_Start_IT+0x26>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e040      	b.n	8003b7c <HAL_DMA_Start_IT+0xa8>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d12f      	bne.n	8003b6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fa4a 	bl	8003fbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	223f      	movs	r2, #63	@ 0x3f
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0216 	orr.w	r2, r2, #22
 8003b42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e005      	b.n	8003b7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b92:	f7fe febf 	bl	8002914 <HAL_GetTick>
 8003b96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d008      	beq.n	8003bb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2280      	movs	r2, #128	@ 0x80
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e052      	b.n	8003c5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0216 	bic.w	r2, r2, #22
 8003bc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_DMA_Abort+0x62>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0208 	bic.w	r2, r2, #8
 8003bf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c06:	e013      	b.n	8003c30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c08:	f7fe fe84 	bl	8002914 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d90c      	bls.n	8003c30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2203      	movs	r2, #3
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e015      	b.n	8003c5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e4      	bne.n	8003c08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c42:	223f      	movs	r2, #63	@ 0x3f
 8003c44:	409a      	lsls	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d004      	beq.n	8003c82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2280      	movs	r2, #128	@ 0x80
 8003c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00c      	b.n	8003c9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2205      	movs	r2, #5
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef0 <HAL_DMA_IRQHandler+0x248>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef4 <HAL_DMA_IRQHandler+0x24c>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01a      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0204 	bic.w	r2, r2, #4
 8003cfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d00:	2208      	movs	r2, #8
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4e:	2204      	movs	r2, #4
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	2210      	movs	r2, #16
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d043      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03c      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	2210      	movs	r2, #16
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d018      	beq.n	8003dea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d024      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
 8003dd6:	e01f      	b.n	8003e18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
 8003de8:	e016      	b.n	8003e18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0208 	bic.w	r2, r2, #8
 8003e06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 808f 	beq.w	8003f48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8087 	beq.w	8003f48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	2220      	movs	r2, #32
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d136      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0216 	bic.w	r2, r2, #22
 8003e60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x1da>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0208 	bic.w	r2, r2, #8
 8003e90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e96:	223f      	movs	r2, #63	@ 0x3f
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d07e      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
        }
        return;
 8003ebe:	e079      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01d      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d031      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
 8003eec:	e02c      	b.n	8003f48 <HAL_DMA_IRQHandler+0x2a0>
 8003eee:	bf00      	nop
 8003ef0:	200000e8 	.word	0x200000e8
 8003ef4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d023      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
 8003f08:	e01e      	b.n	8003f48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0210 	bic.w	r2, r2, #16
 8003f26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d032      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2205      	movs	r2, #5
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	3301      	adds	r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d307      	bcc.n	8003f90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f2      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x2cc>
 8003f8e:	e000      	b.n	8003f92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
 8003fb2:	e000      	b.n	8003fb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fb4:	bf00      	nop
    }
  }
}
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d108      	bne.n	8003ffc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ffa:	e007      	b.n	800400c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3b10      	subs	r3, #16
 8004028:	4a14      	ldr	r2, [pc, #80]	@ (800407c <DMA_CalcBaseAndBitshift+0x64>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004032:	4a13      	ldr	r2, [pc, #76]	@ (8004080 <DMA_CalcBaseAndBitshift+0x68>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d909      	bls.n	800405a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	659a      	str	r2, [r3, #88]	@ 0x58
 8004058:	e007      	b.n	800406a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	aaaaaaab 	.word	0xaaaaaaab
 8004080:	08009c30 	.word	0x08009c30

08004084 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11f      	bne.n	80040de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d856      	bhi.n	8004152 <DMA_CheckFifoParam+0xce>
 80040a4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ac <DMA_CheckFifoParam+0x28>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040cf 	.word	0x080040cf
 80040b4:	080040bd 	.word	0x080040bd
 80040b8:	08004153 	.word	0x08004153
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d046      	beq.n	8004156 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040cc:	e043      	b.n	8004156 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040d6:	d140      	bne.n	800415a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e03d      	b.n	800415a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e6:	d121      	bne.n	800412c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d837      	bhi.n	800415e <DMA_CheckFifoParam+0xda>
 80040ee:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <DMA_CheckFifoParam+0x70>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004105 	.word	0x08004105
 80040f8:	0800410b 	.word	0x0800410b
 80040fc:	08004105 	.word	0x08004105
 8004100:	0800411d 	.word	0x0800411d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
      break;
 8004108:	e030      	b.n	800416c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d025      	beq.n	8004162 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411a:	e022      	b.n	8004162 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004124:	d11f      	bne.n	8004166 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800412a:	e01c      	b.n	8004166 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d903      	bls.n	800413a <DMA_CheckFifoParam+0xb6>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d003      	beq.n	8004140 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004138:	e018      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      break;
 800413e:	e015      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e00b      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;
 8004152:	bf00      	nop
 8004154:	e00a      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      break;
 8004156:	bf00      	nop
 8004158:	e008      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      break;
 800415a:	bf00      	nop
 800415c:	e006      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      break;   
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
    }
  } 
  
  return status; 
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop

0800417c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	@ 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e159      	b.n	800444c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f040 8148 	bne.w	8004446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d005      	beq.n	80041ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d130      	bne.n	8004230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 0201 	and.w	r2, r3, #1
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b03      	cmp	r3, #3
 800423a:	d017      	beq.n	800426c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	2203      	movs	r2, #3
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d123      	bne.n	80042c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	08da      	lsrs	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3208      	adds	r2, #8
 8004280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	220f      	movs	r2, #15
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	08da      	lsrs	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3208      	adds	r2, #8
 80042ba:	69b9      	ldr	r1, [r7, #24]
 80042bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	2203      	movs	r2, #3
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0203 	and.w	r2, r3, #3
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a2 	beq.w	8004446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b57      	ldr	r3, [pc, #348]	@ (8004464 <HAL_GPIO_Init+0x2e8>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	4a56      	ldr	r2, [pc, #344]	@ (8004464 <HAL_GPIO_Init+0x2e8>)
 800430c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004310:	6453      	str	r3, [r2, #68]	@ 0x44
 8004312:	4b54      	ldr	r3, [pc, #336]	@ (8004464 <HAL_GPIO_Init+0x2e8>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800431e:	4a52      	ldr	r2, [pc, #328]	@ (8004468 <HAL_GPIO_Init+0x2ec>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a49      	ldr	r2, [pc, #292]	@ (800446c <HAL_GPIO_Init+0x2f0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d019      	beq.n	800437e <HAL_GPIO_Init+0x202>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a48      	ldr	r2, [pc, #288]	@ (8004470 <HAL_GPIO_Init+0x2f4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_GPIO_Init+0x1fe>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a47      	ldr	r2, [pc, #284]	@ (8004474 <HAL_GPIO_Init+0x2f8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00d      	beq.n	8004376 <HAL_GPIO_Init+0x1fa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a46      	ldr	r2, [pc, #280]	@ (8004478 <HAL_GPIO_Init+0x2fc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <HAL_GPIO_Init+0x1f6>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a45      	ldr	r2, [pc, #276]	@ (800447c <HAL_GPIO_Init+0x300>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_GPIO_Init+0x1f2>
 800436a:	2304      	movs	r3, #4
 800436c:	e008      	b.n	8004380 <HAL_GPIO_Init+0x204>
 800436e:	2307      	movs	r3, #7
 8004370:	e006      	b.n	8004380 <HAL_GPIO_Init+0x204>
 8004372:	2303      	movs	r3, #3
 8004374:	e004      	b.n	8004380 <HAL_GPIO_Init+0x204>
 8004376:	2302      	movs	r3, #2
 8004378:	e002      	b.n	8004380 <HAL_GPIO_Init+0x204>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_GPIO_Init+0x204>
 800437e:	2300      	movs	r3, #0
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	f002 0203 	and.w	r2, r2, #3
 8004386:	0092      	lsls	r2, r2, #2
 8004388:	4093      	lsls	r3, r2
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004390:	4935      	ldr	r1, [pc, #212]	@ (8004468 <HAL_GPIO_Init+0x2ec>)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	3302      	adds	r3, #2
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800439e:	4b38      	ldr	r3, [pc, #224]	@ (8004480 <HAL_GPIO_Init+0x304>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004480 <HAL_GPIO_Init+0x304>)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004480 <HAL_GPIO_Init+0x304>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043ec:	4a24      	ldr	r2, [pc, #144]	@ (8004480 <HAL_GPIO_Init+0x304>)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043f2:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <HAL_GPIO_Init+0x304>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004416:	4a1a      	ldr	r2, [pc, #104]	@ (8004480 <HAL_GPIO_Init+0x304>)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800441c:	4b18      	ldr	r3, [pc, #96]	@ (8004480 <HAL_GPIO_Init+0x304>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004440:	4a0f      	ldr	r2, [pc, #60]	@ (8004480 <HAL_GPIO_Init+0x304>)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3301      	adds	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b0f      	cmp	r3, #15
 8004450:	f67f aea2 	bls.w	8004198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	3724      	adds	r7, #36	@ 0x24
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	40013800 	.word	0x40013800
 800446c:	40020000 	.word	0x40020000
 8004470:	40020400 	.word	0x40020400
 8004474:	40020800 	.word	0x40020800
 8004478:	40020c00 	.word	0x40020c00
 800447c:	40021000 	.word	0x40021000
 8004480:	40013c00 	.word	0x40013c00

08004484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
 8004490:	4613      	mov	r3, r2
 8004492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a0:	e003      	b.n	80044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e12b      	b.n	8004722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd ff1e 	bl	8002320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	@ 0x24
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800450a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800451a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800451c:	f000 fd40 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8004520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4a81      	ldr	r2, [pc, #516]	@ (800472c <HAL_I2C_Init+0x274>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d807      	bhi.n	800453c <HAL_I2C_Init+0x84>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a80      	ldr	r2, [pc, #512]	@ (8004730 <HAL_I2C_Init+0x278>)
 8004530:	4293      	cmp	r3, r2
 8004532:	bf94      	ite	ls
 8004534:	2301      	movls	r3, #1
 8004536:	2300      	movhi	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e006      	b.n	800454a <HAL_I2C_Init+0x92>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a7d      	ldr	r2, [pc, #500]	@ (8004734 <HAL_I2C_Init+0x27c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	bf94      	ite	ls
 8004544:	2301      	movls	r3, #1
 8004546:	2300      	movhi	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0e7      	b.n	8004722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a78      	ldr	r2, [pc, #480]	@ (8004738 <HAL_I2C_Init+0x280>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0c9b      	lsrs	r3, r3, #18
 800455c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a6a      	ldr	r2, [pc, #424]	@ (800472c <HAL_I2C_Init+0x274>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d802      	bhi.n	800458c <HAL_I2C_Init+0xd4>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3301      	adds	r3, #1
 800458a:	e009      	b.n	80045a0 <HAL_I2C_Init+0xe8>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	4a69      	ldr	r2, [pc, #420]	@ (800473c <HAL_I2C_Init+0x284>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	3301      	adds	r3, #1
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	495c      	ldr	r1, [pc, #368]	@ (800472c <HAL_I2C_Init+0x274>)
 80045bc:	428b      	cmp	r3, r1
 80045be:	d819      	bhi.n	80045f4 <HAL_I2C_Init+0x13c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e59      	subs	r1, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045d4:	400b      	ands	r3, r1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_I2C_Init+0x138>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e59      	subs	r1, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e8:	3301      	adds	r3, #1
 80045ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ee:	e051      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 80045f0:	2304      	movs	r3, #4
 80045f2:	e04f      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <HAL_I2C_Init+0x168>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e58      	subs	r0, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	440b      	add	r3, r1
 800460a:	fbb0 f3f3 	udiv	r3, r0, r3
 800460e:	3301      	adds	r3, #1
 8004610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e012      	b.n	8004646 <HAL_I2C_Init+0x18e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	0099      	lsls	r1, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Init+0x196>
 800464a:	2301      	movs	r3, #1
 800464c:	e022      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10e      	bne.n	8004674 <HAL_I2C_Init+0x1bc>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e58      	subs	r0, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	440b      	add	r3, r1
 8004664:	fbb0 f3f3 	udiv	r3, r0, r3
 8004668:	3301      	adds	r3, #1
 800466a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004672:	e00f      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	0099      	lsls	r1, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	6809      	ldr	r1, [r1, #0]
 8004698:	4313      	orrs	r3, r2
 800469a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6911      	ldr	r1, [r2, #16]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68d2      	ldr	r2, [r2, #12]
 80046ce:	4311      	orrs	r1, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	000186a0 	.word	0x000186a0
 8004730:	001e847f 	.word	0x001e847f
 8004734:	003d08ff 	.word	0x003d08ff
 8004738:	431bde83 	.word	0x431bde83
 800473c:	10624dd3 	.word	0x10624dd3

08004740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e267      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d075      	beq.n	800484a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800475e:	4b88      	ldr	r3, [pc, #544]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00c      	beq.n	8004784 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476a:	4b85      	ldr	r3, [pc, #532]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004772:	2b08      	cmp	r3, #8
 8004774:	d112      	bne.n	800479c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004776:	4b82      	ldr	r3, [pc, #520]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004782:	d10b      	bne.n	800479c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	4b7e      	ldr	r3, [pc, #504]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05b      	beq.n	8004848 <HAL_RCC_OscConfig+0x108>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d157      	bne.n	8004848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e242      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_OscConfig+0x74>
 80047a6:	4b76      	ldr	r3, [pc, #472]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a75      	ldr	r2, [pc, #468]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e01d      	b.n	80047f0 <HAL_RCC_OscConfig+0xb0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x98>
 80047be:	4b70      	ldr	r3, [pc, #448]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0xb0>
 80047d8:	4b69      	ldr	r3, [pc, #420]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a68      	ldr	r2, [pc, #416]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b66      	ldr	r3, [pc, #408]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a65      	ldr	r2, [pc, #404]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fe f88c 	bl	8002914 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7fe f888 	bl	8002914 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	@ 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e207      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b5b      	ldr	r3, [pc, #364]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0xc0>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe f878 	bl	8002914 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004828:	f7fe f874 	bl	8002914 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	@ 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1f3      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	4b51      	ldr	r3, [pc, #324]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0xe8>
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d063      	beq.n	800491e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004856:	4b4a      	ldr	r3, [pc, #296]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800486a:	2b08      	cmp	r3, #8
 800486c:	d11c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486e:	4b44      	ldr	r3, [pc, #272]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d116      	bne.n	80048a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487a:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_RCC_OscConfig+0x152>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e1c7      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004892:	4b3b      	ldr	r3, [pc, #236]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4937      	ldr	r1, [pc, #220]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a6:	e03a      	b.n	800491e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b0:	4b34      	ldr	r3, [pc, #208]	@ (8004984 <HAL_RCC_OscConfig+0x244>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fe f82d 	bl	8002914 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fe f829 	bl	8002914 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e1a8      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4925      	ldr	r1, [pc, #148]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]
 80048f0:	e015      	b.n	800491e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <HAL_RCC_OscConfig+0x244>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fe f80c 	bl	8002914 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004900:	f7fe f808 	bl	8002914 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e187      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d036      	beq.n	8004998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004932:	4b15      	ldr	r3, [pc, #84]	@ (8004988 <HAL_RCC_OscConfig+0x248>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd ffec 	bl	8002914 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004940:	f7fd ffe8 	bl	8002914 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e167      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x200>
 800495e:	e01b      	b.n	8004998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_OscConfig+0x248>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fd ffd5 	bl	8002914 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	e00e      	b.n	800498c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800496e:	f7fd ffd1 	bl	8002914 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d907      	bls.n	800498c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e150      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
 8004980:	40023800 	.word	0x40023800
 8004984:	42470000 	.word	0x42470000
 8004988:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 800498e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ea      	bne.n	800496e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8097 	beq.w	8004ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049aa:	4b81      	ldr	r3, [pc, #516]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	4b7d      	ldr	r3, [pc, #500]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049c6:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	4b77      	ldr	r3, [pc, #476]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	4b74      	ldr	r3, [pc, #464]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a73      	ldr	r2, [pc, #460]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ee:	f7fd ff91 	bl	8002914 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fd ff8d 	bl	8002914 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e10c      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2ea>
 8004a1c:	4b64      	ldr	r3, [pc, #400]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a20:	4a63      	ldr	r2, [pc, #396]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a28:	e01c      	b.n	8004a64 <HAL_RCC_OscConfig+0x324>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x30c>
 8004a32:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a38:	f043 0304 	orr.w	r3, r3, #4
 8004a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0x324>
 8004a4c:	4b58      	ldr	r3, [pc, #352]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a50:	4a57      	ldr	r2, [pc, #348]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a58:	4b55      	ldr	r3, [pc, #340]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5c:	4a54      	ldr	r2, [pc, #336]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	f023 0304 	bic.w	r3, r3, #4
 8004a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fd ff52 	bl	8002914 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fd ff4e 	bl	8002914 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0cb      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ee      	beq.n	8004a74 <HAL_RCC_OscConfig+0x334>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a98:	f7fd ff3c 	bl	8002914 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa0:	f7fd ff38 	bl	8002914 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0b5      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1ee      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac8:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	4a38      	ldr	r2, [pc, #224]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a1 	beq.w	8004c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ade:	4b34      	ldr	r3, [pc, #208]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d05c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d141      	bne.n	8004b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <HAL_RCC_OscConfig+0x478>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fd ff0c 	bl	8002914 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fd ff08 	bl	8002914 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e087      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b12:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	491b      	ldr	r1, [pc, #108]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x478>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4e:	f7fd fee1 	bl	8002914 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fd fedd 	bl	8002914 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e05c      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b68:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x416>
 8004b74:	e054      	b.n	8004c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <HAL_RCC_OscConfig+0x478>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fd feca 	bl	8002914 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fd fec6 	bl	8002914 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e045      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x444>
 8004ba2:	e03d      	b.n	8004c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e038      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40007000 	.word	0x40007000
 8004bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x4ec>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d028      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d121      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d11a      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bec:	4013      	ands	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d111      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	3b01      	subs	r3, #1
 8004c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800

08004c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0cc      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b68      	ldr	r3, [pc, #416]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d90c      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b65      	ldr	r3, [pc, #404]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b63      	ldr	r3, [pc, #396]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0b8      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d020      	beq.n	8004cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c84:	4b59      	ldr	r3, [pc, #356]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a58      	ldr	r2, [pc, #352]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c9c:	4b53      	ldr	r3, [pc, #332]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a52      	ldr	r2, [pc, #328]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b50      	ldr	r3, [pc, #320]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	494d      	ldr	r1, [pc, #308]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d044      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d119      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e07f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b3f      	ldr	r3, [pc, #252]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e06f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e067      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b37      	ldr	r3, [pc, #220]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4934      	ldr	r1, [pc, #208]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fd fdf8 	bl	8002914 <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fd fdf4 	bl	8002914 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d20c      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b22      	ldr	r3, [pc, #136]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e032      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d84:	4b19      	ldr	r3, [pc, #100]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4916      	ldr	r1, [pc, #88]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da2:	4b12      	ldr	r3, [pc, #72]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	490e      	ldr	r1, [pc, #56]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db6:	f000 f821 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	490a      	ldr	r1, [pc, #40]	@ (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	5ccb      	ldrb	r3, [r1, r3]
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	4a09      	ldr	r2, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dd2:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fd fd58 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023c00 	.word	0x40023c00
 8004dec:	40023800 	.word	0x40023800
 8004df0:	08009c18 	.word	0x08009c18
 8004df4:	200000e8 	.word	0x200000e8
 8004df8:	200000ec 	.word	0x200000ec

08004dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e00:	b090      	sub	sp, #64	@ 0x40
 8004e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e14:	4b59      	ldr	r3, [pc, #356]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d00d      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x40>
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	f200 80a1 	bhi.w	8004f68 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x34>
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e2e:	e09b      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e30:	4b53      	ldr	r3, [pc, #332]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e34:	e09b      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e36:	4b53      	ldr	r3, [pc, #332]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e3a:	e098      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e46:	4b4d      	ldr	r3, [pc, #308]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e52:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	2200      	movs	r2, #0
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e64:	2100      	movs	r1, #0
 8004e66:	4b47      	ldr	r3, [pc, #284]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e68:	fb03 f201 	mul.w	r2, r3, r1
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	fb00 f303 	mul.w	r3, r0, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	4a43      	ldr	r2, [pc, #268]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e76:	fba0 1202 	umull	r1, r2, r0, r2
 8004e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e82:	4413      	add	r3, r2
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e88:	2200      	movs	r2, #0
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	61fa      	str	r2, [r7, #28]
 8004e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e96:	f7fb fef1 	bl	8000c7c <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea2:	e053      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea4:	4b35      	ldr	r3, [pc, #212]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	099b      	lsrs	r3, r3, #6
 8004eaa:	2200      	movs	r2, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	617a      	str	r2, [r7, #20]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eb6:	f04f 0b00 	mov.w	fp, #0
 8004eba:	4652      	mov	r2, sl
 8004ebc:	465b      	mov	r3, fp
 8004ebe:	f04f 0000 	mov.w	r0, #0
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	0159      	lsls	r1, r3, #5
 8004ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ecc:	0150      	lsls	r0, r2, #5
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ed6:	eb63 090b 	sbc.w	r9, r3, fp
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ee6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004eea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004eee:	ebb2 0408 	subs.w	r4, r2, r8
 8004ef2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	00eb      	lsls	r3, r5, #3
 8004f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f04:	00e2      	lsls	r2, r4, #3
 8004f06:	4614      	mov	r4, r2
 8004f08:	461d      	mov	r5, r3
 8004f0a:	eb14 030a 	adds.w	r3, r4, sl
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	eb45 030b 	adc.w	r3, r5, fp
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f22:	4629      	mov	r1, r5
 8004f24:	028b      	lsls	r3, r1, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	028a      	lsls	r2, r1, #10
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f36:	2200      	movs	r2, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	60fa      	str	r2, [r7, #12]
 8004f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f40:	f7fb fe9c 	bl	8000c7c <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	3301      	adds	r3, #1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3740      	adds	r7, #64	@ 0x40
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	017d7840 	.word	0x017d7840

08004f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	@ (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200000e8 	.word	0x200000e8

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a9b      	lsrs	r3, r3, #10
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	@ (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	08009c28 	.word	0x08009c28

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffdc 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0b5b      	lsrs	r3, r3, #13
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	@ (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	08009c28 	.word	0x08009c28

08004ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e041      	b.n	8005086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd f9ca 	bl	80023b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 fb1c 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e03c      	b.n	8005122 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <HAL_TIM_Base_Start+0xa0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <HAL_TIM_Base_Start+0x5c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c2:	d013      	beq.n	80050ec <HAL_TIM_Base_Start+0x5c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005134 <HAL_TIM_Base_Start+0xa4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <HAL_TIM_Base_Start+0x5c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <HAL_TIM_Base_Start+0xa8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d009      	beq.n	80050ec <HAL_TIM_Base_Start+0x5c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a17      	ldr	r2, [pc, #92]	@ (800513c <HAL_TIM_Base_Start+0xac>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIM_Base_Start+0x5c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <HAL_TIM_Base_Start+0xb0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d111      	bne.n	8005110 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d010      	beq.n	8005120 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	e007      	b.n	8005120 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40014000 	.word	0x40014000

08005144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e041      	b.n	80051da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f839 	bl	80051e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fa72 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <HAL_TIM_PWM_Start+0x24>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	e022      	b.n	8005262 <HAL_TIM_PWM_Start+0x6a>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d109      	bne.n	8005236 <HAL_TIM_PWM_Start+0x3e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e015      	b.n	8005262 <HAL_TIM_PWM_Start+0x6a>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d109      	bne.n	8005250 <HAL_TIM_PWM_Start+0x58>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	e008      	b.n	8005262 <HAL_TIM_PWM_Start+0x6a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e068      	b.n	800533c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start+0x82>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005278:	e013      	b.n	80052a2 <HAL_TIM_PWM_Start+0xaa>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0x92>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005288:	e00b      	b.n	80052a2 <HAL_TIM_PWM_Start+0xaa>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005298:	e003      	b.n	80052a2 <HAL_TIM_PWM_Start+0xaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fc8a 	bl	8005bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a23      	ldr	r2, [pc, #140]	@ (8005344 <HAL_TIM_PWM_Start+0x14c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <HAL_TIM_PWM_Start+0x14c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d018      	beq.n	8005306 <HAL_TIM_PWM_Start+0x10e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d013      	beq.n	8005306 <HAL_TIM_PWM_Start+0x10e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <HAL_TIM_PWM_Start+0x150>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_TIM_PWM_Start+0x10e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a17      	ldr	r2, [pc, #92]	@ (800534c <HAL_TIM_PWM_Start+0x154>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d009      	beq.n	8005306 <HAL_TIM_PWM_Start+0x10e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a16      	ldr	r2, [pc, #88]	@ (8005350 <HAL_TIM_PWM_Start+0x158>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_TIM_PWM_Start+0x10e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a14      	ldr	r2, [pc, #80]	@ (8005354 <HAL_TIM_PWM_Start+0x15c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b06      	cmp	r3, #6
 8005316:	d010      	beq.n	800533a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	e007      	b.n	800533a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40014000 	.word	0x40014000

08005358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005372:	2302      	movs	r3, #2
 8005374:	e0ae      	b.n	80054d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b0c      	cmp	r3, #12
 8005382:	f200 809f 	bhi.w	80054c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053c1 	.word	0x080053c1
 8005390:	080054c5 	.word	0x080054c5
 8005394:	080054c5 	.word	0x080054c5
 8005398:	080054c5 	.word	0x080054c5
 800539c:	08005401 	.word	0x08005401
 80053a0:	080054c5 	.word	0x080054c5
 80053a4:	080054c5 	.word	0x080054c5
 80053a8:	080054c5 	.word	0x080054c5
 80053ac:	08005443 	.word	0x08005443
 80053b0:	080054c5 	.word	0x080054c5
 80053b4:	080054c5 	.word	0x080054c5
 80053b8:	080054c5 	.word	0x080054c5
 80053bc:	08005483 	.word	0x08005483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f9d6 	bl	8005778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0208 	orr.w	r2, r2, #8
 80053da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0204 	bic.w	r2, r2, #4
 80053ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6999      	ldr	r1, [r3, #24]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	619a      	str	r2, [r3, #24]
      break;
 80053fe:	e064      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fa1c 	bl	8005844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800541a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	619a      	str	r2, [r3, #24]
      break;
 8005440:	e043      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa67 	bl	800591c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0208 	orr.w	r2, r2, #8
 800545c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0204 	bic.w	r2, r2, #4
 800546c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69d9      	ldr	r1, [r3, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	61da      	str	r2, [r3, #28]
      break;
 8005480:	e023      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fab1 	bl	80059f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69d9      	ldr	r1, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	61da      	str	r2, [r3, #28]
      break;
 80054c2:	e002      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
      break;
 80054c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_TIM_ConfigClockSource+0x1c>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e0b4      	b.n	8005662 <HAL_TIM_ConfigClockSource+0x186>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800551e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005530:	d03e      	beq.n	80055b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005536:	f200 8087 	bhi.w	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553e:	f000 8086 	beq.w	800564e <HAL_TIM_ConfigClockSource+0x172>
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005546:	d87f      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b70      	cmp	r3, #112	@ 0x70
 800554a:	d01a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xa6>
 800554c:	2b70      	cmp	r3, #112	@ 0x70
 800554e:	d87b      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b60      	cmp	r3, #96	@ 0x60
 8005552:	d050      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005554:	2b60      	cmp	r3, #96	@ 0x60
 8005556:	d877      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b50      	cmp	r3, #80	@ 0x50
 800555a:	d03c      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0xfa>
 800555c:	2b50      	cmp	r3, #80	@ 0x50
 800555e:	d873      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b40      	cmp	r3, #64	@ 0x40
 8005562:	d058      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x13a>
 8005564:	2b40      	cmp	r3, #64	@ 0x40
 8005566:	d86f      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b30      	cmp	r3, #48	@ 0x30
 800556a:	d064      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x15a>
 800556c:	2b30      	cmp	r3, #48	@ 0x30
 800556e:	d86b      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b20      	cmp	r3, #32
 8005572:	d060      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x15a>
 8005574:	2b20      	cmp	r3, #32
 8005576:	d867      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d05c      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	2b10      	cmp	r3, #16
 800557e:	d05a      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x15a>
 8005580:	e062      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005592:	f000 faf7 	bl	8005b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	609a      	str	r2, [r3, #8]
      break;
 80055ae:	e04f      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055c0:	f000 fae0 	bl	8005b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055d2:	609a      	str	r2, [r3, #8]
      break;
 80055d4:	e03c      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 fa54 	bl	8005a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2150      	movs	r1, #80	@ 0x50
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 faad 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80055f4:	e02c      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005602:	461a      	mov	r2, r3
 8005604:	f000 fa73 	bl	8005aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2160      	movs	r1, #96	@ 0x60
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa9d 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005614:	e01c      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005622:	461a      	mov	r2, r3
 8005624:	f000 fa34 	bl	8005a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2140      	movs	r1, #64	@ 0x40
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fa8d 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005634:	e00c      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f000 fa84 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005646:	e003      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e000      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800564e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a37      	ldr	r2, [pc, #220]	@ (800575c <TIM_Base_SetConfig+0xf0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0x38>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0x38>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a34      	ldr	r2, [pc, #208]	@ (8005760 <TIM_Base_SetConfig+0xf4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0x38>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a33      	ldr	r2, [pc, #204]	@ (8005764 <TIM_Base_SetConfig+0xf8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x38>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a32      	ldr	r2, [pc, #200]	@ (8005768 <TIM_Base_SetConfig+0xfc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a28      	ldr	r2, [pc, #160]	@ (800575c <TIM_Base_SetConfig+0xf0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01b      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c4:	d017      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a25      	ldr	r2, [pc, #148]	@ (8005760 <TIM_Base_SetConfig+0xf4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a24      	ldr	r2, [pc, #144]	@ (8005764 <TIM_Base_SetConfig+0xf8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a23      	ldr	r2, [pc, #140]	@ (8005768 <TIM_Base_SetConfig+0xfc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a22      	ldr	r2, [pc, #136]	@ (800576c <TIM_Base_SetConfig+0x100>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a21      	ldr	r2, [pc, #132]	@ (8005770 <TIM_Base_SetConfig+0x104>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_Base_SetConfig+0x8a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a20      	ldr	r2, [pc, #128]	@ (8005774 <TIM_Base_SetConfig+0x108>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d108      	bne.n	8005708 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a0c      	ldr	r2, [pc, #48]	@ (800575c <TIM_Base_SetConfig+0xf0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d103      	bne.n	8005736 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0201 	bic.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0302 	bic.w	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005840 <TIM_OC1_SetConfig+0xc8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10c      	bne.n	80057ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0308 	bic.w	r3, r3, #8
 80057da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a13      	ldr	r2, [pc, #76]	@ (8005840 <TIM_OC1_SetConfig+0xc8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d111      	bne.n	800581a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	621a      	str	r2, [r3, #32]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40010000 	.word	0x40010000

08005844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f023 0210 	bic.w	r2, r3, #16
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0320 	bic.w	r3, r3, #32
 800588e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a1e      	ldr	r2, [pc, #120]	@ (8005918 <TIM_OC2_SetConfig+0xd4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d10d      	bne.n	80058c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <TIM_OC2_SetConfig+0xd4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d113      	bne.n	80058f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000

0800591c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1d      	ldr	r2, [pc, #116]	@ (80059ec <TIM_OC3_SetConfig+0xd0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d10d      	bne.n	8005996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a14      	ldr	r2, [pc, #80]	@ (80059ec <TIM_OC3_SetConfig+0xd0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d113      	bne.n	80059c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40010000 	.word	0x40010000

080059f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	031b      	lsls	r3, r3, #12
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a10      	ldr	r2, [pc, #64]	@ (8005a8c <TIM_OC4_SetConfig+0x9c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d109      	bne.n	8005a64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	019b      	lsls	r3, r3, #6
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000

08005a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 030a 	bic.w	r3, r3, #10
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0210 	bic.w	r2, r3, #16
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f043 0307 	orr.w	r3, r3, #7
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e050      	b.n	8005cca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c74:	d013      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a18      	ldr	r2, [pc, #96]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a16      	ldr	r2, [pc, #88]	@ (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a13      	ldr	r2, [pc, #76]	@ (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40014000 	.word	0x40014000

08005cec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e03d      	b.n	8005d84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e042      	b.n	8005e28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fb6a 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	@ 0x24
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fe09 	bl	80069ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	@ 0x28
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d175      	bne.n	8005f3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_UART_Transmit+0x2c>
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e06e      	b.n	8005f3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2221      	movs	r2, #33	@ 0x21
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e6e:	f7fc fd51 	bl	8002914 <HAL_GetTick>
 8005e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	88fa      	ldrh	r2, [r7, #6]
 8005e7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d108      	bne.n	8005e9c <HAL_UART_Transmit+0x6c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e003      	b.n	8005ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ea4:	e02e      	b.n	8005f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2180      	movs	r1, #128	@ 0x80
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fb6d 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e03a      	b.n	8005f3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e007      	b.n	8005ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1cb      	bne.n	8005ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2140      	movs	r1, #64	@ 0x40
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fb39 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e006      	b.n	8005f3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
  }
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b08c      	sub	sp, #48	@ 0x30
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	4613      	mov	r3, r2
 8005f52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d14a      	bne.n	8005ff6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e043      	b.n	8005ff8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fb5d 	bl	8006642 <UART_Start_Receive_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d12c      	bne.n	8005ff0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d125      	bne.n	8005fea <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f043 0310 	orr.w	r3, r3, #16
 8005fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6a39      	ldr	r1, [r7, #32]
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005fe8:	e002      	b.n	8005ff0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ff4:	e000      	b.n	8005ff8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
  }
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3730      	adds	r7, #48	@ 0x30
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b0ba      	sub	sp, #232	@ 0xe8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006026:	2300      	movs	r3, #0
 8006028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800603e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_UART_IRQHandler+0x66>
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fc05 	bl	800686e <UART_Receive_IT>
      return;
 8006064:	e273      	b.n	800654e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80de 	beq.w	800622c <HAL_UART_IRQHandler+0x22c>
 8006070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800607c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006080:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80d1 	beq.w	800622c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_UART_IRQHandler+0xae>
 8006096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_UART_IRQHandler+0xd2>
 80060ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	f043 0202 	orr.w	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_UART_IRQHandler+0xf6>
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f043 0204 	orr.w	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d011      	beq.n	8006126 <HAL_UART_IRQHandler+0x126>
 8006102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d105      	bne.n	800611a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800610e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611e:	f043 0208 	orr.w	r2, r3, #8
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 820a 	beq.w	8006544 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_UART_IRQHandler+0x14e>
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb90 	bl	800686e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <HAL_UART_IRQHandler+0x17a>
 8006172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d04f      	beq.n	800621a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa9b 	bl	80066b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618a:	2b40      	cmp	r3, #64	@ 0x40
 800618c:	d141      	bne.n	8006212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1d9      	bne.n	800618e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d013      	beq.n	800620a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e6:	4a8a      	ldr	r2, [pc, #552]	@ (8006410 <HAL_UART_IRQHandler+0x410>)
 80061e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd fd38 	bl	8003c64 <HAL_DMA_Abort_IT>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d016      	beq.n	8006228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	e00e      	b.n	8006228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9b6 	bl	800657c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006210:	e00a      	b.n	8006228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f9b2 	bl	800657c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	e006      	b.n	8006228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f9ae 	bl	800657c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006226:	e18d      	b.n	8006544 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	bf00      	nop
    return;
 800622a:	e18b      	b.n	8006544 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	2b01      	cmp	r3, #1
 8006232:	f040 8167 	bne.w	8006504 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8160 	beq.w	8006504 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8159 	beq.w	8006504 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006272:	2b40      	cmp	r3, #64	@ 0x40
 8006274:	f040 80ce 	bne.w	8006414 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80a9 	beq.w	80063e0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006296:	429a      	cmp	r2, r3
 8006298:	f080 80a2 	bcs.w	80063e0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ae:	f000 8088 	beq.w	80063c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1d9      	bne.n	80062b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3314      	adds	r3, #20
 8006304:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800630e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006322:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800632a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e1      	bne.n	80062fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3314      	adds	r3, #20
 8006340:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800634a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800634c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3314      	adds	r3, #20
 800635a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800635e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006360:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800636c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e3      	bne.n	800633a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e3      	bne.n	8006380 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fd fbe1 	bl	8003b84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fb f8ff 	bl	80015dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80063de:	e0b3      	b.n	8006548 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063e8:	429a      	cmp	r2, r3
 80063ea:	f040 80ad 	bne.w	8006548 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f8:	f040 80a6 	bne.w	8006548 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fb f8e7 	bl	80015dc <HAL_UARTEx_RxEventCallback>
      return;
 800640e:	e09b      	b.n	8006548 <HAL_UART_IRQHandler+0x548>
 8006410:	0800677d 	.word	0x0800677d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800641c:	b29b      	uxth	r3, r3
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 808e 	beq.w	800654c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8089 	beq.w	800654c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800644a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800645e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800646c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e3      	bne.n	800643a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	623b      	str	r3, [r7, #32]
   return(result);
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006496:	633a      	str	r2, [r7, #48]	@ 0x30
 8006498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800649c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e3      	bne.n	8006472 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0310 	bic.w	r3, r3, #16
 80064ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064dc:	61fa      	str	r2, [r7, #28]
 80064de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	69b9      	ldr	r1, [r7, #24]
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e3      	bne.n	80064b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fb f86d 	bl	80015dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006502:	e023      	b.n	800654c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_UART_IRQHandler+0x524>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f93e 	bl	800679e <UART_Transmit_IT>
    return;
 8006522:	e014      	b.n	800654e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <HAL_UART_IRQHandler+0x54e>
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f97e 	bl	800683e <UART_EndTransmit_IT>
    return;
 8006542:	e004      	b.n	800654e <HAL_UART_IRQHandler+0x54e>
    return;
 8006544:	bf00      	nop
 8006546:	e002      	b.n	800654e <HAL_UART_IRQHandler+0x54e>
      return;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <HAL_UART_IRQHandler+0x54e>
      return;
 800654c:	bf00      	nop
  }
}
 800654e:	37e8      	adds	r7, #232	@ 0xe8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a0:	e03b      	b.n	800661a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a8:	d037      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fc f9b3 	bl	8002914 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e03a      	b.n	800663a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d023      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x8a>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b80      	cmp	r3, #128	@ 0x80
 80065d6:	d020      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x8a>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b40      	cmp	r3, #64	@ 0x40
 80065dc:	d01d      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d116      	bne.n	800661a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f857 	bl	80066b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2208      	movs	r2, #8
 800660c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e00f      	b.n	800663a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	429a      	cmp	r2, r3
 8006636:	d0b4      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	4613      	mov	r3, r2
 800664e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2222      	movs	r2, #34	@ 0x22
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006686:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0220 	orr.w	r2, r2, #32
 80066a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b095      	sub	sp, #84	@ 0x54
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066de:	643a      	str	r2, [r7, #64]	@ 0x40
 80066e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e5      	bne.n	80066be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3314      	adds	r3, #20
 80066f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	61fb      	str	r3, [r7, #28]
   return(result);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672a:	2b01      	cmp	r3, #1
 800672c:	d119      	bne.n	8006762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	60bb      	str	r3, [r7, #8]
   return(result);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	647b      	str	r3, [r7, #68]	@ 0x44
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674e:	61ba      	str	r2, [r7, #24]
 8006750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	613b      	str	r3, [r7, #16]
   return(result);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e5      	bne.n	800672e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006770:	bf00      	nop
 8006772:	3754      	adds	r7, #84	@ 0x54
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff fef3 	bl	800657c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b21      	cmp	r3, #33	@ 0x21
 80067b0:	d13e      	bne.n	8006830 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ba:	d114      	bne.n	80067e6 <UART_Transmit_IT+0x48>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d110      	bne.n	80067e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	1c9a      	adds	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	621a      	str	r2, [r3, #32]
 80067e4:	e008      	b.n	80067f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	1c59      	adds	r1, r3, #1
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6211      	str	r1, [r2, #32]
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29b      	uxth	r3, r3
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4619      	mov	r1, r3
 8006806:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10f      	bne.n	800682c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800681a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800682a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006854:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fe78 	bl	8006554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b08c      	sub	sp, #48	@ 0x30
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b22      	cmp	r3, #34	@ 0x22
 8006888:	f040 80aa 	bne.w	80069e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006894:	d115      	bne.n	80068c2 <UART_Receive_IT+0x54>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d111      	bne.n	80068c2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ba:	1c9a      	adds	r2, r3, #2
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	629a      	str	r2, [r3, #40]	@ 0x28
 80068c0:	e024      	b.n	800690c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d0:	d007      	beq.n	80068e2 <UART_Receive_IT+0x74>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <UART_Receive_IT+0x82>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e008      	b.n	8006902 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006900:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29b      	uxth	r3, r3
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4619      	mov	r1, r3
 800691a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800691c:	2b00      	cmp	r3, #0
 800691e:	d15d      	bne.n	80069dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0220 	bic.w	r2, r2, #32
 800692e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800693e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006962:	2b01      	cmp	r3, #1
 8006964:	d135      	bne.n	80069d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	613b      	str	r3, [r7, #16]
   return(result);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f023 0310 	bic.w	r3, r3, #16
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698c:	623a      	str	r2, [r7, #32]
 800698e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	6a3a      	ldr	r2, [r7, #32]
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	61bb      	str	r3, [r7, #24]
   return(result);
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e5      	bne.n	800696c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d10a      	bne.n	80069c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fa fe06 	bl	80015dc <HAL_UARTEx_RxEventCallback>
 80069d0:	e002      	b.n	80069d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fdc8 	bl	8006568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e002      	b.n	80069e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	e000      	b.n	80069e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3730      	adds	r7, #48	@ 0x30
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f0:	b0c0      	sub	sp, #256	@ 0x100
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	68d9      	ldr	r1, [r3, #12]
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	ea40 0301 	orr.w	r3, r0, r1
 8006a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a44:	f021 010c 	bic.w	r1, r1, #12
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a52:	430b      	orrs	r3, r1
 8006a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a66:	6999      	ldr	r1, [r3, #24]
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	ea40 0301 	orr.w	r3, r0, r1
 8006a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8006cb8 <UART_SetConfig+0x2cc>)
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d005      	beq.n	8006a8c <UART_SetConfig+0xa0>
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b8d      	ldr	r3, [pc, #564]	@ (8006cbc <UART_SetConfig+0x2d0>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d104      	bne.n	8006a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a8c:	f7fe fa9c 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8006a90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a94:	e003      	b.n	8006a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a96:	f7fe fa83 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aa8:	f040 810c 	bne.w	8006cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	1891      	adds	r1, r2, r2
 8006ac4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ac6:	415b      	adcs	r3, r3
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ace:	4621      	mov	r1, r4
 8006ad0:	eb12 0801 	adds.w	r8, r2, r1
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	eb43 0901 	adc.w	r9, r3, r1
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aee:	4690      	mov	r8, r2
 8006af0:	4699      	mov	r9, r3
 8006af2:	4623      	mov	r3, r4
 8006af4:	eb18 0303 	adds.w	r3, r8, r3
 8006af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006afc:	462b      	mov	r3, r5
 8006afe:	eb49 0303 	adc.w	r3, r9, r3
 8006b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	18db      	adds	r3, r3, r3
 8006b1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b20:	4613      	mov	r3, r2
 8006b22:	eb42 0303 	adc.w	r3, r2, r3
 8006b26:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b30:	f7fa f8a4 	bl	8000c7c <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4b61      	ldr	r3, [pc, #388]	@ (8006cc0 <UART_SetConfig+0x2d4>)
 8006b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	011c      	lsls	r4, r3, #4
 8006b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	1891      	adds	r1, r2, r2
 8006b5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b5c:	415b      	adcs	r3, r3
 8006b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b64:	4641      	mov	r1, r8
 8006b66:	eb12 0a01 	adds.w	sl, r2, r1
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b84:	4692      	mov	sl, r2
 8006b86:	469b      	mov	fp, r3
 8006b88:	4643      	mov	r3, r8
 8006b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b92:	464b      	mov	r3, r9
 8006b94:	eb4b 0303 	adc.w	r3, fp, r3
 8006b98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	18db      	adds	r3, r3, r3
 8006bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	eb42 0303 	adc.w	r3, r2, r3
 8006bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bc6:	f7fa f859 	bl	8000c7c <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc0 <UART_SetConfig+0x2d4>)
 8006bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2264      	movs	r2, #100	@ 0x64
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	1acb      	subs	r3, r1, r3
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006be6:	4b36      	ldr	r3, [pc, #216]	@ (8006cc0 <UART_SetConfig+0x2d4>)
 8006be8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bf4:	441c      	add	r4, r3
 8006bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c10:	415b      	adcs	r3, r3
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c18:	4641      	mov	r1, r8
 8006c1a:	1851      	adds	r1, r2, r1
 8006c1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c1e:	4649      	mov	r1, r9
 8006c20:	414b      	adcs	r3, r1
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c30:	4659      	mov	r1, fp
 8006c32:	00cb      	lsls	r3, r1, #3
 8006c34:	4651      	mov	r1, sl
 8006c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	00ca      	lsls	r2, r1, #3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	4642      	mov	r2, r8
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	460a      	mov	r2, r1
 8006c50:	eb42 0303 	adc.w	r3, r2, r3
 8006c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	18db      	adds	r3, r3, r3
 8006c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c72:	4613      	mov	r3, r2
 8006c74:	eb42 0303 	adc.w	r3, r2, r3
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c82:	f7f9 fffb 	bl	8000c7c <__aeabi_uldivmod>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <UART_SetConfig+0x2d4>)
 8006c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	2164      	movs	r1, #100	@ 0x64
 8006c94:	fb01 f303 	mul.w	r3, r1, r3
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	3332      	adds	r3, #50	@ 0x32
 8006c9e:	4a08      	ldr	r2, [pc, #32]	@ (8006cc0 <UART_SetConfig+0x2d4>)
 8006ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	f003 0207 	and.w	r2, r3, #7
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4422      	add	r2, r4
 8006cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cb4:	e106      	b.n	8006ec4 <UART_SetConfig+0x4d8>
 8006cb6:	bf00      	nop
 8006cb8:	40011000 	.word	0x40011000
 8006cbc:	40011400 	.word	0x40011400
 8006cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	464b      	mov	r3, r9
 8006cda:	1891      	adds	r1, r2, r2
 8006cdc:	6239      	str	r1, [r7, #32]
 8006cde:	415b      	adcs	r3, r3
 8006ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	1854      	adds	r4, r2, r1
 8006cea:	4649      	mov	r1, r9
 8006cec:	eb43 0501 	adc.w	r5, r3, r1
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	00eb      	lsls	r3, r5, #3
 8006cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cfe:	00e2      	lsls	r2, r4, #3
 8006d00:	4614      	mov	r4, r2
 8006d02:	461d      	mov	r5, r3
 8006d04:	4643      	mov	r3, r8
 8006d06:	18e3      	adds	r3, r4, r3
 8006d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	eb45 0303 	adc.w	r3, r5, r3
 8006d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d32:	4629      	mov	r1, r5
 8006d34:	008b      	lsls	r3, r1, #2
 8006d36:	4621      	mov	r1, r4
 8006d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	008a      	lsls	r2, r1, #2
 8006d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d44:	f7f9 ff9a 	bl	8000c7c <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4b60      	ldr	r3, [pc, #384]	@ (8006ed0 <UART_SetConfig+0x4e4>)
 8006d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	011c      	lsls	r4, r3, #4
 8006d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	1891      	adds	r1, r2, r2
 8006d6e:	61b9      	str	r1, [r7, #24]
 8006d70:	415b      	adcs	r3, r3
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d78:	4641      	mov	r1, r8
 8006d7a:	1851      	adds	r1, r2, r1
 8006d7c:	6139      	str	r1, [r7, #16]
 8006d7e:	4649      	mov	r1, r9
 8006d80:	414b      	adcs	r3, r1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d90:	4659      	mov	r1, fp
 8006d92:	00cb      	lsls	r3, r1, #3
 8006d94:	4651      	mov	r1, sl
 8006d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d9a:	4651      	mov	r1, sl
 8006d9c:	00ca      	lsls	r2, r1, #3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4619      	mov	r1, r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	4642      	mov	r2, r8
 8006da6:	189b      	adds	r3, r3, r2
 8006da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dac:	464b      	mov	r3, r9
 8006dae:	460a      	mov	r2, r1
 8006db0:	eb42 0303 	adc.w	r3, r2, r3
 8006db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	008b      	lsls	r3, r1, #2
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dda:	4641      	mov	r1, r8
 8006ddc:	008a      	lsls	r2, r1, #2
 8006dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006de2:	f7f9 ff4b 	bl	8000c7c <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	4b38      	ldr	r3, [pc, #224]	@ (8006ed0 <UART_SetConfig+0x4e4>)
 8006dee:	fba3 2301 	umull	r2, r3, r3, r1
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2264      	movs	r2, #100	@ 0x64
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	1acb      	subs	r3, r1, r3
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	3332      	adds	r3, #50	@ 0x32
 8006e00:	4a33      	ldr	r2, [pc, #204]	@ (8006ed0 <UART_SetConfig+0x4e4>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e0c:	441c      	add	r4, r3
 8006e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e12:	2200      	movs	r2, #0
 8006e14:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e16:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	1891      	adds	r1, r2, r2
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	415b      	adcs	r3, r3
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	1851      	adds	r1, r2, r1
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	4649      	mov	r1, r9
 8006e34:	414b      	adcs	r3, r1
 8006e36:	607b      	str	r3, [r7, #4]
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e44:	4659      	mov	r1, fp
 8006e46:	00cb      	lsls	r3, r1, #3
 8006e48:	4651      	mov	r1, sl
 8006e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4e:	4651      	mov	r1, sl
 8006e50:	00ca      	lsls	r2, r1, #3
 8006e52:	4610      	mov	r0, r2
 8006e54:	4619      	mov	r1, r3
 8006e56:	4603      	mov	r3, r0
 8006e58:	4642      	mov	r2, r8
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e5e:	464b      	mov	r3, r9
 8006e60:	460a      	mov	r2, r1
 8006e62:	eb42 0303 	adc.w	r3, r2, r3
 8006e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e72:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e80:	4649      	mov	r1, r9
 8006e82:	008b      	lsls	r3, r1, #2
 8006e84:	4641      	mov	r1, r8
 8006e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	008a      	lsls	r2, r1, #2
 8006e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e92:	f7f9 fef3 	bl	8000c7c <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <UART_SetConfig+0x4e4>)
 8006e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	2164      	movs	r1, #100	@ 0x64
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	3332      	adds	r3, #50	@ 0x32
 8006eae:	4a08      	ldr	r2, [pc, #32]	@ (8006ed0 <UART_SetConfig+0x4e4>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f003 020f 	and.w	r2, r3, #15
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4422      	add	r2, r4
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed0:	51eb851f 	.word	0x51eb851f

08006ed4 <atof>:
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f000 bea7 	b.w	8007c28 <strtod>
	...

08006edc <std>:
 8006edc:	2300      	movs	r3, #0
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eea:	6083      	str	r3, [r0, #8]
 8006eec:	8181      	strh	r1, [r0, #12]
 8006eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ef0:	81c2      	strh	r2, [r0, #14]
 8006ef2:	6183      	str	r3, [r0, #24]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	305c      	adds	r0, #92	@ 0x5c
 8006efa:	f000 febf 	bl	8007c7c <memset>
 8006efe:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <std+0x58>)
 8006f00:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f02:	4b0d      	ldr	r3, [pc, #52]	@ (8006f38 <std+0x5c>)
 8006f04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f06:	4b0d      	ldr	r3, [pc, #52]	@ (8006f3c <std+0x60>)
 8006f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f40 <std+0x64>)
 8006f0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f44 <std+0x68>)
 8006f10:	6224      	str	r4, [r4, #32]
 8006f12:	429c      	cmp	r4, r3
 8006f14:	d006      	beq.n	8006f24 <std+0x48>
 8006f16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f1a:	4294      	cmp	r4, r2
 8006f1c:	d002      	beq.n	8006f24 <std+0x48>
 8006f1e:	33d0      	adds	r3, #208	@ 0xd0
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d105      	bne.n	8006f30 <std+0x54>
 8006f24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2c:	f000 bef8 	b.w	8007d20 <__retarget_lock_init_recursive>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop
 8006f34:	08008ff9 	.word	0x08008ff9
 8006f38:	0800901b 	.word	0x0800901b
 8006f3c:	08009053 	.word	0x08009053
 8006f40:	08009077 	.word	0x08009077
 8006f44:	20000614 	.word	0x20000614

08006f48 <stdio_exit_handler>:
 8006f48:	4a02      	ldr	r2, [pc, #8]	@ (8006f54 <stdio_exit_handler+0xc>)
 8006f4a:	4903      	ldr	r1, [pc, #12]	@ (8006f58 <stdio_exit_handler+0x10>)
 8006f4c:	4803      	ldr	r0, [pc, #12]	@ (8006f5c <stdio_exit_handler+0x14>)
 8006f4e:	f000 be77 	b.w	8007c40 <_fwalk_sglue>
 8006f52:	bf00      	nop
 8006f54:	200000f4 	.word	0x200000f4
 8006f58:	0800863d 	.word	0x0800863d
 8006f5c:	20000270 	.word	0x20000270

08006f60 <cleanup_stdio>:
 8006f60:	6841      	ldr	r1, [r0, #4]
 8006f62:	4b0c      	ldr	r3, [pc, #48]	@ (8006f94 <cleanup_stdio+0x34>)
 8006f64:	4299      	cmp	r1, r3
 8006f66:	b510      	push	{r4, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	d001      	beq.n	8006f70 <cleanup_stdio+0x10>
 8006f6c:	f001 fb66 	bl	800863c <_fflush_r>
 8006f70:	68a1      	ldr	r1, [r4, #8]
 8006f72:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <cleanup_stdio+0x38>)
 8006f74:	4299      	cmp	r1, r3
 8006f76:	d002      	beq.n	8006f7e <cleanup_stdio+0x1e>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 fb5f 	bl	800863c <_fflush_r>
 8006f7e:	68e1      	ldr	r1, [r4, #12]
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <cleanup_stdio+0x3c>)
 8006f82:	4299      	cmp	r1, r3
 8006f84:	d004      	beq.n	8006f90 <cleanup_stdio+0x30>
 8006f86:	4620      	mov	r0, r4
 8006f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f8c:	f001 bb56 	b.w	800863c <_fflush_r>
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	bf00      	nop
 8006f94:	20000614 	.word	0x20000614
 8006f98:	2000067c 	.word	0x2000067c
 8006f9c:	200006e4 	.word	0x200006e4

08006fa0 <global_stdio_init.part.0>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd0 <global_stdio_init.part.0+0x30>)
 8006fa4:	4c0b      	ldr	r4, [pc, #44]	@ (8006fd4 <global_stdio_init.part.0+0x34>)
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd8 <global_stdio_init.part.0+0x38>)
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	4620      	mov	r0, r4
 8006fac:	2200      	movs	r2, #0
 8006fae:	2104      	movs	r1, #4
 8006fb0:	f7ff ff94 	bl	8006edc <std>
 8006fb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2109      	movs	r1, #9
 8006fbc:	f7ff ff8e 	bl	8006edc <std>
 8006fc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fca:	2112      	movs	r1, #18
 8006fcc:	f7ff bf86 	b.w	8006edc <std>
 8006fd0:	2000074c 	.word	0x2000074c
 8006fd4:	20000614 	.word	0x20000614
 8006fd8:	08006f49 	.word	0x08006f49

08006fdc <__sfp_lock_acquire>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	@ (8006fe4 <__sfp_lock_acquire+0x8>)
 8006fde:	f000 bea0 	b.w	8007d22 <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20000751 	.word	0x20000751

08006fe8 <__sfp_lock_release>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	@ (8006ff0 <__sfp_lock_release+0x8>)
 8006fea:	f000 be9b 	b.w	8007d24 <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20000751 	.word	0x20000751

08006ff4 <__sinit>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	f7ff fff0 	bl	8006fdc <__sfp_lock_acquire>
 8006ffc:	6a23      	ldr	r3, [r4, #32]
 8006ffe:	b11b      	cbz	r3, 8007008 <__sinit+0x14>
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	f7ff bff0 	b.w	8006fe8 <__sfp_lock_release>
 8007008:	4b04      	ldr	r3, [pc, #16]	@ (800701c <__sinit+0x28>)
 800700a:	6223      	str	r3, [r4, #32]
 800700c:	4b04      	ldr	r3, [pc, #16]	@ (8007020 <__sinit+0x2c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1f5      	bne.n	8007000 <__sinit+0xc>
 8007014:	f7ff ffc4 	bl	8006fa0 <global_stdio_init.part.0>
 8007018:	e7f2      	b.n	8007000 <__sinit+0xc>
 800701a:	bf00      	nop
 800701c:	08006f61 	.word	0x08006f61
 8007020:	2000074c 	.word	0x2000074c

08007024 <sulp>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	460d      	mov	r5, r1
 800702a:	ec45 4b10 	vmov	d0, r4, r5
 800702e:	4616      	mov	r6, r2
 8007030:	f001 fea4 	bl	8008d7c <__ulp>
 8007034:	ec51 0b10 	vmov	r0, r1, d0
 8007038:	b17e      	cbz	r6, 800705a <sulp+0x36>
 800703a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800703e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007042:	2b00      	cmp	r3, #0
 8007044:	dd09      	ble.n	800705a <sulp+0x36>
 8007046:	051b      	lsls	r3, r3, #20
 8007048:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800704c:	2400      	movs	r4, #0
 800704e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007052:	4622      	mov	r2, r4
 8007054:	462b      	mov	r3, r5
 8007056:	f7f9 fadf 	bl	8000618 <__aeabi_dmul>
 800705a:	ec41 0b10 	vmov	d0, r0, r1
 800705e:	bd70      	pop	{r4, r5, r6, pc}

08007060 <_strtod_l>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b09f      	sub	sp, #124	@ 0x7c
 8007066:	460c      	mov	r4, r1
 8007068:	9217      	str	r2, [sp, #92]	@ 0x5c
 800706a:	2200      	movs	r2, #0
 800706c:	921a      	str	r2, [sp, #104]	@ 0x68
 800706e:	9005      	str	r0, [sp, #20]
 8007070:	f04f 0a00 	mov.w	sl, #0
 8007074:	f04f 0b00 	mov.w	fp, #0
 8007078:	460a      	mov	r2, r1
 800707a:	9219      	str	r2, [sp, #100]	@ 0x64
 800707c:	7811      	ldrb	r1, [r2, #0]
 800707e:	292b      	cmp	r1, #43	@ 0x2b
 8007080:	d04a      	beq.n	8007118 <_strtod_l+0xb8>
 8007082:	d838      	bhi.n	80070f6 <_strtod_l+0x96>
 8007084:	290d      	cmp	r1, #13
 8007086:	d832      	bhi.n	80070ee <_strtod_l+0x8e>
 8007088:	2908      	cmp	r1, #8
 800708a:	d832      	bhi.n	80070f2 <_strtod_l+0x92>
 800708c:	2900      	cmp	r1, #0
 800708e:	d03b      	beq.n	8007108 <_strtod_l+0xa8>
 8007090:	2200      	movs	r2, #0
 8007092:	920e      	str	r2, [sp, #56]	@ 0x38
 8007094:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007096:	782a      	ldrb	r2, [r5, #0]
 8007098:	2a30      	cmp	r2, #48	@ 0x30
 800709a:	f040 80b2 	bne.w	8007202 <_strtod_l+0x1a2>
 800709e:	786a      	ldrb	r2, [r5, #1]
 80070a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070a4:	2a58      	cmp	r2, #88	@ 0x58
 80070a6:	d16e      	bne.n	8007186 <_strtod_l+0x126>
 80070a8:	9302      	str	r3, [sp, #8]
 80070aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	4a8f      	ldr	r2, [pc, #572]	@ (80072f0 <_strtod_l+0x290>)
 80070b4:	9805      	ldr	r0, [sp, #20]
 80070b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070b8:	a919      	add	r1, sp, #100	@ 0x64
 80070ba:	f000 feb5 	bl	8007e28 <__gethex>
 80070be:	f010 060f 	ands.w	r6, r0, #15
 80070c2:	4604      	mov	r4, r0
 80070c4:	d005      	beq.n	80070d2 <_strtod_l+0x72>
 80070c6:	2e06      	cmp	r6, #6
 80070c8:	d128      	bne.n	800711c <_strtod_l+0xbc>
 80070ca:	3501      	adds	r5, #1
 80070cc:	2300      	movs	r3, #0
 80070ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80070d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80070d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f040 858e 	bne.w	8007bf6 <_strtod_l+0xb96>
 80070da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070dc:	b1cb      	cbz	r3, 8007112 <_strtod_l+0xb2>
 80070de:	4652      	mov	r2, sl
 80070e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80070e4:	ec43 2b10 	vmov	d0, r2, r3
 80070e8:	b01f      	add	sp, #124	@ 0x7c
 80070ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ee:	2920      	cmp	r1, #32
 80070f0:	d1ce      	bne.n	8007090 <_strtod_l+0x30>
 80070f2:	3201      	adds	r2, #1
 80070f4:	e7c1      	b.n	800707a <_strtod_l+0x1a>
 80070f6:	292d      	cmp	r1, #45	@ 0x2d
 80070f8:	d1ca      	bne.n	8007090 <_strtod_l+0x30>
 80070fa:	2101      	movs	r1, #1
 80070fc:	910e      	str	r1, [sp, #56]	@ 0x38
 80070fe:	1c51      	adds	r1, r2, #1
 8007100:	9119      	str	r1, [sp, #100]	@ 0x64
 8007102:	7852      	ldrb	r2, [r2, #1]
 8007104:	2a00      	cmp	r2, #0
 8007106:	d1c5      	bne.n	8007094 <_strtod_l+0x34>
 8007108:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800710a:	9419      	str	r4, [sp, #100]	@ 0x64
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 8570 	bne.w	8007bf2 <_strtod_l+0xb92>
 8007112:	4652      	mov	r2, sl
 8007114:	465b      	mov	r3, fp
 8007116:	e7e5      	b.n	80070e4 <_strtod_l+0x84>
 8007118:	2100      	movs	r1, #0
 800711a:	e7ef      	b.n	80070fc <_strtod_l+0x9c>
 800711c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800711e:	b13a      	cbz	r2, 8007130 <_strtod_l+0xd0>
 8007120:	2135      	movs	r1, #53	@ 0x35
 8007122:	a81c      	add	r0, sp, #112	@ 0x70
 8007124:	f001 ff24 	bl	8008f70 <__copybits>
 8007128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800712a:	9805      	ldr	r0, [sp, #20]
 800712c:	f001 fafa 	bl	8008724 <_Bfree>
 8007130:	3e01      	subs	r6, #1
 8007132:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007134:	2e04      	cmp	r6, #4
 8007136:	d806      	bhi.n	8007146 <_strtod_l+0xe6>
 8007138:	e8df f006 	tbb	[pc, r6]
 800713c:	201d0314 	.word	0x201d0314
 8007140:	14          	.byte	0x14
 8007141:	00          	.byte	0x00
 8007142:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007146:	05e1      	lsls	r1, r4, #23
 8007148:	bf48      	it	mi
 800714a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800714e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007152:	0d1b      	lsrs	r3, r3, #20
 8007154:	051b      	lsls	r3, r3, #20
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1bb      	bne.n	80070d2 <_strtod_l+0x72>
 800715a:	f000 fdb7 	bl	8007ccc <__errno>
 800715e:	2322      	movs	r3, #34	@ 0x22
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	e7b6      	b.n	80070d2 <_strtod_l+0x72>
 8007164:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007168:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800716c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007170:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007174:	e7e7      	b.n	8007146 <_strtod_l+0xe6>
 8007176:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80072f8 <_strtod_l+0x298>
 800717a:	e7e4      	b.n	8007146 <_strtod_l+0xe6>
 800717c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007180:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007184:	e7df      	b.n	8007146 <_strtod_l+0xe6>
 8007186:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	9219      	str	r2, [sp, #100]	@ 0x64
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	2b30      	cmp	r3, #48	@ 0x30
 8007190:	d0f9      	beq.n	8007186 <_strtod_l+0x126>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d09d      	beq.n	80070d2 <_strtod_l+0x72>
 8007196:	2301      	movs	r3, #1
 8007198:	2700      	movs	r7, #0
 800719a:	9308      	str	r3, [sp, #32]
 800719c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719e:	930c      	str	r3, [sp, #48]	@ 0x30
 80071a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80071a2:	46b9      	mov	r9, r7
 80071a4:	220a      	movs	r2, #10
 80071a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071a8:	7805      	ldrb	r5, [r0, #0]
 80071aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071ae:	b2d9      	uxtb	r1, r3
 80071b0:	2909      	cmp	r1, #9
 80071b2:	d928      	bls.n	8007206 <_strtod_l+0x1a6>
 80071b4:	494f      	ldr	r1, [pc, #316]	@ (80072f4 <_strtod_l+0x294>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	f000 fd75 	bl	8007ca6 <strncmp>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d032      	beq.n	8007226 <_strtod_l+0x1c6>
 80071c0:	2000      	movs	r0, #0
 80071c2:	462a      	mov	r2, r5
 80071c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80071c6:	464d      	mov	r5, r9
 80071c8:	4603      	mov	r3, r0
 80071ca:	2a65      	cmp	r2, #101	@ 0x65
 80071cc:	d001      	beq.n	80071d2 <_strtod_l+0x172>
 80071ce:	2a45      	cmp	r2, #69	@ 0x45
 80071d0:	d114      	bne.n	80071fc <_strtod_l+0x19c>
 80071d2:	b91d      	cbnz	r5, 80071dc <_strtod_l+0x17c>
 80071d4:	9a08      	ldr	r2, [sp, #32]
 80071d6:	4302      	orrs	r2, r0
 80071d8:	d096      	beq.n	8007108 <_strtod_l+0xa8>
 80071da:	2500      	movs	r5, #0
 80071dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80071de:	1c62      	adds	r2, r4, #1
 80071e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80071e2:	7862      	ldrb	r2, [r4, #1]
 80071e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80071e6:	d07a      	beq.n	80072de <_strtod_l+0x27e>
 80071e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80071ea:	d07e      	beq.n	80072ea <_strtod_l+0x28a>
 80071ec:	f04f 0c00 	mov.w	ip, #0
 80071f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80071f4:	2909      	cmp	r1, #9
 80071f6:	f240 8085 	bls.w	8007304 <_strtod_l+0x2a4>
 80071fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80071fc:	f04f 0800 	mov.w	r8, #0
 8007200:	e0a5      	b.n	800734e <_strtod_l+0x2ee>
 8007202:	2300      	movs	r3, #0
 8007204:	e7c8      	b.n	8007198 <_strtod_l+0x138>
 8007206:	f1b9 0f08 	cmp.w	r9, #8
 800720a:	bfd8      	it	le
 800720c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800720e:	f100 0001 	add.w	r0, r0, #1
 8007212:	bfda      	itte	le
 8007214:	fb02 3301 	mlale	r3, r2, r1, r3
 8007218:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800721a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800721e:	f109 0901 	add.w	r9, r9, #1
 8007222:	9019      	str	r0, [sp, #100]	@ 0x64
 8007224:	e7bf      	b.n	80071a6 <_strtod_l+0x146>
 8007226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	9219      	str	r2, [sp, #100]	@ 0x64
 800722c:	785a      	ldrb	r2, [r3, #1]
 800722e:	f1b9 0f00 	cmp.w	r9, #0
 8007232:	d03b      	beq.n	80072ac <_strtod_l+0x24c>
 8007234:	900a      	str	r0, [sp, #40]	@ 0x28
 8007236:	464d      	mov	r5, r9
 8007238:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800723c:	2b09      	cmp	r3, #9
 800723e:	d912      	bls.n	8007266 <_strtod_l+0x206>
 8007240:	2301      	movs	r3, #1
 8007242:	e7c2      	b.n	80071ca <_strtod_l+0x16a>
 8007244:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	9219      	str	r2, [sp, #100]	@ 0x64
 800724a:	785a      	ldrb	r2, [r3, #1]
 800724c:	3001      	adds	r0, #1
 800724e:	2a30      	cmp	r2, #48	@ 0x30
 8007250:	d0f8      	beq.n	8007244 <_strtod_l+0x1e4>
 8007252:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007256:	2b08      	cmp	r3, #8
 8007258:	f200 84d2 	bhi.w	8007c00 <_strtod_l+0xba0>
 800725c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800725e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007260:	2000      	movs	r0, #0
 8007262:	930c      	str	r3, [sp, #48]	@ 0x30
 8007264:	4605      	mov	r5, r0
 8007266:	3a30      	subs	r2, #48	@ 0x30
 8007268:	f100 0301 	add.w	r3, r0, #1
 800726c:	d018      	beq.n	80072a0 <_strtod_l+0x240>
 800726e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007270:	4419      	add	r1, r3
 8007272:	910a      	str	r1, [sp, #40]	@ 0x28
 8007274:	462e      	mov	r6, r5
 8007276:	f04f 0e0a 	mov.w	lr, #10
 800727a:	1c71      	adds	r1, r6, #1
 800727c:	eba1 0c05 	sub.w	ip, r1, r5
 8007280:	4563      	cmp	r3, ip
 8007282:	dc15      	bgt.n	80072b0 <_strtod_l+0x250>
 8007284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007288:	182b      	adds	r3, r5, r0
 800728a:	2b08      	cmp	r3, #8
 800728c:	f105 0501 	add.w	r5, r5, #1
 8007290:	4405      	add	r5, r0
 8007292:	dc1a      	bgt.n	80072ca <_strtod_l+0x26a>
 8007294:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007296:	230a      	movs	r3, #10
 8007298:	fb03 2301 	mla	r3, r3, r1, r2
 800729c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800729e:	2300      	movs	r3, #0
 80072a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072a2:	1c51      	adds	r1, r2, #1
 80072a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80072a6:	7852      	ldrb	r2, [r2, #1]
 80072a8:	4618      	mov	r0, r3
 80072aa:	e7c5      	b.n	8007238 <_strtod_l+0x1d8>
 80072ac:	4648      	mov	r0, r9
 80072ae:	e7ce      	b.n	800724e <_strtod_l+0x1ee>
 80072b0:	2e08      	cmp	r6, #8
 80072b2:	dc05      	bgt.n	80072c0 <_strtod_l+0x260>
 80072b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80072b6:	fb0e f606 	mul.w	r6, lr, r6
 80072ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80072bc:	460e      	mov	r6, r1
 80072be:	e7dc      	b.n	800727a <_strtod_l+0x21a>
 80072c0:	2910      	cmp	r1, #16
 80072c2:	bfd8      	it	le
 80072c4:	fb0e f707 	mulle.w	r7, lr, r7
 80072c8:	e7f8      	b.n	80072bc <_strtod_l+0x25c>
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	bfdc      	itt	le
 80072ce:	230a      	movle	r3, #10
 80072d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80072d4:	e7e3      	b.n	800729e <_strtod_l+0x23e>
 80072d6:	2300      	movs	r3, #0
 80072d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072da:	2301      	movs	r3, #1
 80072dc:	e77a      	b.n	80071d4 <_strtod_l+0x174>
 80072de:	f04f 0c00 	mov.w	ip, #0
 80072e2:	1ca2      	adds	r2, r4, #2
 80072e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80072e6:	78a2      	ldrb	r2, [r4, #2]
 80072e8:	e782      	b.n	80071f0 <_strtod_l+0x190>
 80072ea:	f04f 0c01 	mov.w	ip, #1
 80072ee:	e7f8      	b.n	80072e2 <_strtod_l+0x282>
 80072f0:	08009db4 	.word	0x08009db4
 80072f4:	08009c38 	.word	0x08009c38
 80072f8:	7ff00000 	.word	0x7ff00000
 80072fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072fe:	1c51      	adds	r1, r2, #1
 8007300:	9119      	str	r1, [sp, #100]	@ 0x64
 8007302:	7852      	ldrb	r2, [r2, #1]
 8007304:	2a30      	cmp	r2, #48	@ 0x30
 8007306:	d0f9      	beq.n	80072fc <_strtod_l+0x29c>
 8007308:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800730c:	2908      	cmp	r1, #8
 800730e:	f63f af75 	bhi.w	80071fc <_strtod_l+0x19c>
 8007312:	3a30      	subs	r2, #48	@ 0x30
 8007314:	9209      	str	r2, [sp, #36]	@ 0x24
 8007316:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007318:	920f      	str	r2, [sp, #60]	@ 0x3c
 800731a:	f04f 080a 	mov.w	r8, #10
 800731e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007320:	1c56      	adds	r6, r2, #1
 8007322:	9619      	str	r6, [sp, #100]	@ 0x64
 8007324:	7852      	ldrb	r2, [r2, #1]
 8007326:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800732a:	f1be 0f09 	cmp.w	lr, #9
 800732e:	d939      	bls.n	80073a4 <_strtod_l+0x344>
 8007330:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007332:	1a76      	subs	r6, r6, r1
 8007334:	2e08      	cmp	r6, #8
 8007336:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800733a:	dc03      	bgt.n	8007344 <_strtod_l+0x2e4>
 800733c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800733e:	4588      	cmp	r8, r1
 8007340:	bfa8      	it	ge
 8007342:	4688      	movge	r8, r1
 8007344:	f1bc 0f00 	cmp.w	ip, #0
 8007348:	d001      	beq.n	800734e <_strtod_l+0x2ee>
 800734a:	f1c8 0800 	rsb	r8, r8, #0
 800734e:	2d00      	cmp	r5, #0
 8007350:	d14e      	bne.n	80073f0 <_strtod_l+0x390>
 8007352:	9908      	ldr	r1, [sp, #32]
 8007354:	4308      	orrs	r0, r1
 8007356:	f47f aebc 	bne.w	80070d2 <_strtod_l+0x72>
 800735a:	2b00      	cmp	r3, #0
 800735c:	f47f aed4 	bne.w	8007108 <_strtod_l+0xa8>
 8007360:	2a69      	cmp	r2, #105	@ 0x69
 8007362:	d028      	beq.n	80073b6 <_strtod_l+0x356>
 8007364:	dc25      	bgt.n	80073b2 <_strtod_l+0x352>
 8007366:	2a49      	cmp	r2, #73	@ 0x49
 8007368:	d025      	beq.n	80073b6 <_strtod_l+0x356>
 800736a:	2a4e      	cmp	r2, #78	@ 0x4e
 800736c:	f47f aecc 	bne.w	8007108 <_strtod_l+0xa8>
 8007370:	499a      	ldr	r1, [pc, #616]	@ (80075dc <_strtod_l+0x57c>)
 8007372:	a819      	add	r0, sp, #100	@ 0x64
 8007374:	f000 ff7a 	bl	800826c <__match>
 8007378:	2800      	cmp	r0, #0
 800737a:	f43f aec5 	beq.w	8007108 <_strtod_l+0xa8>
 800737e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b28      	cmp	r3, #40	@ 0x28
 8007384:	d12e      	bne.n	80073e4 <_strtod_l+0x384>
 8007386:	4996      	ldr	r1, [pc, #600]	@ (80075e0 <_strtod_l+0x580>)
 8007388:	aa1c      	add	r2, sp, #112	@ 0x70
 800738a:	a819      	add	r0, sp, #100	@ 0x64
 800738c:	f000 ff82 	bl	8008294 <__hexnan>
 8007390:	2805      	cmp	r0, #5
 8007392:	d127      	bne.n	80073e4 <_strtod_l+0x384>
 8007394:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007396:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800739a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800739e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073a2:	e696      	b.n	80070d2 <_strtod_l+0x72>
 80073a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073a6:	fb08 2101 	mla	r1, r8, r1, r2
 80073aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b0:	e7b5      	b.n	800731e <_strtod_l+0x2be>
 80073b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80073b4:	e7da      	b.n	800736c <_strtod_l+0x30c>
 80073b6:	498b      	ldr	r1, [pc, #556]	@ (80075e4 <_strtod_l+0x584>)
 80073b8:	a819      	add	r0, sp, #100	@ 0x64
 80073ba:	f000 ff57 	bl	800826c <__match>
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f aea2 	beq.w	8007108 <_strtod_l+0xa8>
 80073c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073c6:	4988      	ldr	r1, [pc, #544]	@ (80075e8 <_strtod_l+0x588>)
 80073c8:	3b01      	subs	r3, #1
 80073ca:	a819      	add	r0, sp, #100	@ 0x64
 80073cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80073ce:	f000 ff4d 	bl	800826c <__match>
 80073d2:	b910      	cbnz	r0, 80073da <_strtod_l+0x37a>
 80073d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073d6:	3301      	adds	r3, #1
 80073d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80073da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80075f8 <_strtod_l+0x598>
 80073de:	f04f 0a00 	mov.w	sl, #0
 80073e2:	e676      	b.n	80070d2 <_strtod_l+0x72>
 80073e4:	4881      	ldr	r0, [pc, #516]	@ (80075ec <_strtod_l+0x58c>)
 80073e6:	f000 fcaf 	bl	8007d48 <nan>
 80073ea:	ec5b ab10 	vmov	sl, fp, d0
 80073ee:	e670      	b.n	80070d2 <_strtod_l+0x72>
 80073f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80073f4:	eba8 0303 	sub.w	r3, r8, r3
 80073f8:	f1b9 0f00 	cmp.w	r9, #0
 80073fc:	bf08      	it	eq
 80073fe:	46a9      	moveq	r9, r5
 8007400:	2d10      	cmp	r5, #16
 8007402:	9309      	str	r3, [sp, #36]	@ 0x24
 8007404:	462c      	mov	r4, r5
 8007406:	bfa8      	it	ge
 8007408:	2410      	movge	r4, #16
 800740a:	f7f9 f88b 	bl	8000524 <__aeabi_ui2d>
 800740e:	2d09      	cmp	r5, #9
 8007410:	4682      	mov	sl, r0
 8007412:	468b      	mov	fp, r1
 8007414:	dc13      	bgt.n	800743e <_strtod_l+0x3de>
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	f43f ae5a 	beq.w	80070d2 <_strtod_l+0x72>
 800741e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007420:	dd78      	ble.n	8007514 <_strtod_l+0x4b4>
 8007422:	2b16      	cmp	r3, #22
 8007424:	dc5f      	bgt.n	80074e6 <_strtod_l+0x486>
 8007426:	4972      	ldr	r1, [pc, #456]	@ (80075f0 <_strtod_l+0x590>)
 8007428:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800742c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007430:	4652      	mov	r2, sl
 8007432:	465b      	mov	r3, fp
 8007434:	f7f9 f8f0 	bl	8000618 <__aeabi_dmul>
 8007438:	4682      	mov	sl, r0
 800743a:	468b      	mov	fp, r1
 800743c:	e649      	b.n	80070d2 <_strtod_l+0x72>
 800743e:	4b6c      	ldr	r3, [pc, #432]	@ (80075f0 <_strtod_l+0x590>)
 8007440:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007444:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007448:	f7f9 f8e6 	bl	8000618 <__aeabi_dmul>
 800744c:	4682      	mov	sl, r0
 800744e:	4638      	mov	r0, r7
 8007450:	468b      	mov	fp, r1
 8007452:	f7f9 f867 	bl	8000524 <__aeabi_ui2d>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4650      	mov	r0, sl
 800745c:	4659      	mov	r1, fp
 800745e:	f7f8 ff25 	bl	80002ac <__adddf3>
 8007462:	2d0f      	cmp	r5, #15
 8007464:	4682      	mov	sl, r0
 8007466:	468b      	mov	fp, r1
 8007468:	ddd5      	ble.n	8007416 <_strtod_l+0x3b6>
 800746a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746c:	1b2c      	subs	r4, r5, r4
 800746e:	441c      	add	r4, r3
 8007470:	2c00      	cmp	r4, #0
 8007472:	f340 8093 	ble.w	800759c <_strtod_l+0x53c>
 8007476:	f014 030f 	ands.w	r3, r4, #15
 800747a:	d00a      	beq.n	8007492 <_strtod_l+0x432>
 800747c:	495c      	ldr	r1, [pc, #368]	@ (80075f0 <_strtod_l+0x590>)
 800747e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007482:	4652      	mov	r2, sl
 8007484:	465b      	mov	r3, fp
 8007486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800748a:	f7f9 f8c5 	bl	8000618 <__aeabi_dmul>
 800748e:	4682      	mov	sl, r0
 8007490:	468b      	mov	fp, r1
 8007492:	f034 040f 	bics.w	r4, r4, #15
 8007496:	d073      	beq.n	8007580 <_strtod_l+0x520>
 8007498:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800749c:	dd49      	ble.n	8007532 <_strtod_l+0x4d2>
 800749e:	2400      	movs	r4, #0
 80074a0:	46a0      	mov	r8, r4
 80074a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074a4:	46a1      	mov	r9, r4
 80074a6:	9a05      	ldr	r2, [sp, #20]
 80074a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80075f8 <_strtod_l+0x598>
 80074ac:	2322      	movs	r3, #34	@ 0x22
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	f04f 0a00 	mov.w	sl, #0
 80074b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f43f ae0b 	beq.w	80070d2 <_strtod_l+0x72>
 80074bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074be:	9805      	ldr	r0, [sp, #20]
 80074c0:	f001 f930 	bl	8008724 <_Bfree>
 80074c4:	9805      	ldr	r0, [sp, #20]
 80074c6:	4649      	mov	r1, r9
 80074c8:	f001 f92c 	bl	8008724 <_Bfree>
 80074cc:	9805      	ldr	r0, [sp, #20]
 80074ce:	4641      	mov	r1, r8
 80074d0:	f001 f928 	bl	8008724 <_Bfree>
 80074d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074d6:	9805      	ldr	r0, [sp, #20]
 80074d8:	f001 f924 	bl	8008724 <_Bfree>
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	4621      	mov	r1, r4
 80074e0:	f001 f920 	bl	8008724 <_Bfree>
 80074e4:	e5f5      	b.n	80070d2 <_strtod_l+0x72>
 80074e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80074ec:	4293      	cmp	r3, r2
 80074ee:	dbbc      	blt.n	800746a <_strtod_l+0x40a>
 80074f0:	4c3f      	ldr	r4, [pc, #252]	@ (80075f0 <_strtod_l+0x590>)
 80074f2:	f1c5 050f 	rsb	r5, r5, #15
 80074f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074fa:	4652      	mov	r2, sl
 80074fc:	465b      	mov	r3, fp
 80074fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007502:	f7f9 f889 	bl	8000618 <__aeabi_dmul>
 8007506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007508:	1b5d      	subs	r5, r3, r5
 800750a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800750e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007512:	e78f      	b.n	8007434 <_strtod_l+0x3d4>
 8007514:	3316      	adds	r3, #22
 8007516:	dba8      	blt.n	800746a <_strtod_l+0x40a>
 8007518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751a:	eba3 0808 	sub.w	r8, r3, r8
 800751e:	4b34      	ldr	r3, [pc, #208]	@ (80075f0 <_strtod_l+0x590>)
 8007520:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007524:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	f7f9 f99e 	bl	800086c <__aeabi_ddiv>
 8007530:	e782      	b.n	8007438 <_strtod_l+0x3d8>
 8007532:	2300      	movs	r3, #0
 8007534:	4f2f      	ldr	r7, [pc, #188]	@ (80075f4 <_strtod_l+0x594>)
 8007536:	1124      	asrs	r4, r4, #4
 8007538:	4650      	mov	r0, sl
 800753a:	4659      	mov	r1, fp
 800753c:	461e      	mov	r6, r3
 800753e:	2c01      	cmp	r4, #1
 8007540:	dc21      	bgt.n	8007586 <_strtod_l+0x526>
 8007542:	b10b      	cbz	r3, 8007548 <_strtod_l+0x4e8>
 8007544:	4682      	mov	sl, r0
 8007546:	468b      	mov	fp, r1
 8007548:	492a      	ldr	r1, [pc, #168]	@ (80075f4 <_strtod_l+0x594>)
 800754a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800754e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007552:	4652      	mov	r2, sl
 8007554:	465b      	mov	r3, fp
 8007556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755a:	f7f9 f85d 	bl	8000618 <__aeabi_dmul>
 800755e:	4b26      	ldr	r3, [pc, #152]	@ (80075f8 <_strtod_l+0x598>)
 8007560:	460a      	mov	r2, r1
 8007562:	400b      	ands	r3, r1
 8007564:	4925      	ldr	r1, [pc, #148]	@ (80075fc <_strtod_l+0x59c>)
 8007566:	428b      	cmp	r3, r1
 8007568:	4682      	mov	sl, r0
 800756a:	d898      	bhi.n	800749e <_strtod_l+0x43e>
 800756c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007570:	428b      	cmp	r3, r1
 8007572:	bf86      	itte	hi
 8007574:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007600 <_strtod_l+0x5a0>
 8007578:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800757c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007580:	2300      	movs	r3, #0
 8007582:	9308      	str	r3, [sp, #32]
 8007584:	e076      	b.n	8007674 <_strtod_l+0x614>
 8007586:	07e2      	lsls	r2, r4, #31
 8007588:	d504      	bpl.n	8007594 <_strtod_l+0x534>
 800758a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758e:	f7f9 f843 	bl	8000618 <__aeabi_dmul>
 8007592:	2301      	movs	r3, #1
 8007594:	3601      	adds	r6, #1
 8007596:	1064      	asrs	r4, r4, #1
 8007598:	3708      	adds	r7, #8
 800759a:	e7d0      	b.n	800753e <_strtod_l+0x4de>
 800759c:	d0f0      	beq.n	8007580 <_strtod_l+0x520>
 800759e:	4264      	negs	r4, r4
 80075a0:	f014 020f 	ands.w	r2, r4, #15
 80075a4:	d00a      	beq.n	80075bc <_strtod_l+0x55c>
 80075a6:	4b12      	ldr	r3, [pc, #72]	@ (80075f0 <_strtod_l+0x590>)
 80075a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ac:	4650      	mov	r0, sl
 80075ae:	4659      	mov	r1, fp
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f7f9 f95a 	bl	800086c <__aeabi_ddiv>
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	1124      	asrs	r4, r4, #4
 80075be:	d0df      	beq.n	8007580 <_strtod_l+0x520>
 80075c0:	2c1f      	cmp	r4, #31
 80075c2:	dd1f      	ble.n	8007604 <_strtod_l+0x5a4>
 80075c4:	2400      	movs	r4, #0
 80075c6:	46a0      	mov	r8, r4
 80075c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075ca:	46a1      	mov	r9, r4
 80075cc:	9a05      	ldr	r2, [sp, #20]
 80075ce:	2322      	movs	r3, #34	@ 0x22
 80075d0:	f04f 0a00 	mov.w	sl, #0
 80075d4:	f04f 0b00 	mov.w	fp, #0
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e76b      	b.n	80074b4 <_strtod_l+0x454>
 80075dc:	08009c43 	.word	0x08009c43
 80075e0:	08009da0 	.word	0x08009da0
 80075e4:	08009c3a 	.word	0x08009c3a
 80075e8:	08009c3d 	.word	0x08009c3d
 80075ec:	08009d6a 	.word	0x08009d6a
 80075f0:	08009f28 	.word	0x08009f28
 80075f4:	08009f00 	.word	0x08009f00
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	7ca00000 	.word	0x7ca00000
 8007600:	7fefffff 	.word	0x7fefffff
 8007604:	f014 0310 	ands.w	r3, r4, #16
 8007608:	bf18      	it	ne
 800760a:	236a      	movne	r3, #106	@ 0x6a
 800760c:	4ea9      	ldr	r6, [pc, #676]	@ (80078b4 <_strtod_l+0x854>)
 800760e:	9308      	str	r3, [sp, #32]
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	2300      	movs	r3, #0
 8007616:	07e7      	lsls	r7, r4, #31
 8007618:	d504      	bpl.n	8007624 <_strtod_l+0x5c4>
 800761a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800761e:	f7f8 fffb 	bl	8000618 <__aeabi_dmul>
 8007622:	2301      	movs	r3, #1
 8007624:	1064      	asrs	r4, r4, #1
 8007626:	f106 0608 	add.w	r6, r6, #8
 800762a:	d1f4      	bne.n	8007616 <_strtod_l+0x5b6>
 800762c:	b10b      	cbz	r3, 8007632 <_strtod_l+0x5d2>
 800762e:	4682      	mov	sl, r0
 8007630:	468b      	mov	fp, r1
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	b1b3      	cbz	r3, 8007664 <_strtod_l+0x604>
 8007636:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800763a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800763e:	2b00      	cmp	r3, #0
 8007640:	4659      	mov	r1, fp
 8007642:	dd0f      	ble.n	8007664 <_strtod_l+0x604>
 8007644:	2b1f      	cmp	r3, #31
 8007646:	dd56      	ble.n	80076f6 <_strtod_l+0x696>
 8007648:	2b34      	cmp	r3, #52	@ 0x34
 800764a:	bfde      	ittt	le
 800764c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007650:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007654:	4093      	lslle	r3, r2
 8007656:	f04f 0a00 	mov.w	sl, #0
 800765a:	bfcc      	ite	gt
 800765c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007660:	ea03 0b01 	andle.w	fp, r3, r1
 8007664:	2200      	movs	r2, #0
 8007666:	2300      	movs	r3, #0
 8007668:	4650      	mov	r0, sl
 800766a:	4659      	mov	r1, fp
 800766c:	f7f9 fa3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007670:	2800      	cmp	r0, #0
 8007672:	d1a7      	bne.n	80075c4 <_strtod_l+0x564>
 8007674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800767a:	9805      	ldr	r0, [sp, #20]
 800767c:	462b      	mov	r3, r5
 800767e:	464a      	mov	r2, r9
 8007680:	f001 f8b8 	bl	80087f4 <__s2b>
 8007684:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007686:	2800      	cmp	r0, #0
 8007688:	f43f af09 	beq.w	800749e <_strtod_l+0x43e>
 800768c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800768e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007690:	2a00      	cmp	r2, #0
 8007692:	eba3 0308 	sub.w	r3, r3, r8
 8007696:	bfa8      	it	ge
 8007698:	2300      	movge	r3, #0
 800769a:	9312      	str	r3, [sp, #72]	@ 0x48
 800769c:	2400      	movs	r4, #0
 800769e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80076a4:	46a0      	mov	r8, r4
 80076a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a8:	9805      	ldr	r0, [sp, #20]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	f000 fffa 	bl	80086a4 <_Balloc>
 80076b0:	4681      	mov	r9, r0
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f43f aef7 	beq.w	80074a6 <_strtod_l+0x446>
 80076b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	3202      	adds	r2, #2
 80076be:	f103 010c 	add.w	r1, r3, #12
 80076c2:	0092      	lsls	r2, r2, #2
 80076c4:	300c      	adds	r0, #12
 80076c6:	f000 fb2e 	bl	8007d26 <memcpy>
 80076ca:	ec4b ab10 	vmov	d0, sl, fp
 80076ce:	9805      	ldr	r0, [sp, #20]
 80076d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80076d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80076d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076d8:	f001 fbc0 	bl	8008e5c <__d2b>
 80076dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f aee1 	beq.w	80074a6 <_strtod_l+0x446>
 80076e4:	9805      	ldr	r0, [sp, #20]
 80076e6:	2101      	movs	r1, #1
 80076e8:	f001 f91a 	bl	8008920 <__i2b>
 80076ec:	4680      	mov	r8, r0
 80076ee:	b948      	cbnz	r0, 8007704 <_strtod_l+0x6a4>
 80076f0:	f04f 0800 	mov.w	r8, #0
 80076f4:	e6d7      	b.n	80074a6 <_strtod_l+0x446>
 80076f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	ea03 0a0a 	and.w	sl, r3, sl
 8007702:	e7af      	b.n	8007664 <_strtod_l+0x604>
 8007704:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007706:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007708:	2d00      	cmp	r5, #0
 800770a:	bfab      	itete	ge
 800770c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800770e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007710:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007712:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007714:	bfac      	ite	ge
 8007716:	18ef      	addge	r7, r5, r3
 8007718:	1b5e      	sublt	r6, r3, r5
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	1aed      	subs	r5, r5, r3
 800771e:	4415      	add	r5, r2
 8007720:	4b65      	ldr	r3, [pc, #404]	@ (80078b8 <_strtod_l+0x858>)
 8007722:	3d01      	subs	r5, #1
 8007724:	429d      	cmp	r5, r3
 8007726:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800772a:	da50      	bge.n	80077ce <_strtod_l+0x76e>
 800772c:	1b5b      	subs	r3, r3, r5
 800772e:	2b1f      	cmp	r3, #31
 8007730:	eba2 0203 	sub.w	r2, r2, r3
 8007734:	f04f 0101 	mov.w	r1, #1
 8007738:	dc3d      	bgt.n	80077b6 <_strtod_l+0x756>
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007740:	2300      	movs	r3, #0
 8007742:	9310      	str	r3, [sp, #64]	@ 0x40
 8007744:	18bd      	adds	r5, r7, r2
 8007746:	9b08      	ldr	r3, [sp, #32]
 8007748:	42af      	cmp	r7, r5
 800774a:	4416      	add	r6, r2
 800774c:	441e      	add	r6, r3
 800774e:	463b      	mov	r3, r7
 8007750:	bfa8      	it	ge
 8007752:	462b      	movge	r3, r5
 8007754:	42b3      	cmp	r3, r6
 8007756:	bfa8      	it	ge
 8007758:	4633      	movge	r3, r6
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfc2      	ittt	gt
 800775e:	1aed      	subgt	r5, r5, r3
 8007760:	1af6      	subgt	r6, r6, r3
 8007762:	1aff      	subgt	r7, r7, r3
 8007764:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd16      	ble.n	8007798 <_strtod_l+0x738>
 800776a:	4641      	mov	r1, r8
 800776c:	9805      	ldr	r0, [sp, #20]
 800776e:	461a      	mov	r2, r3
 8007770:	f001 f98e 	bl	8008a90 <__pow5mult>
 8007774:	4680      	mov	r8, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	d0ba      	beq.n	80076f0 <_strtod_l+0x690>
 800777a:	4601      	mov	r1, r0
 800777c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800777e:	9805      	ldr	r0, [sp, #20]
 8007780:	f001 f8e4 	bl	800894c <__multiply>
 8007784:	900a      	str	r0, [sp, #40]	@ 0x28
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f ae8d 	beq.w	80074a6 <_strtod_l+0x446>
 800778c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800778e:	9805      	ldr	r0, [sp, #20]
 8007790:	f000 ffc8 	bl	8008724 <_Bfree>
 8007794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007796:	931a      	str	r3, [sp, #104]	@ 0x68
 8007798:	2d00      	cmp	r5, #0
 800779a:	dc1d      	bgt.n	80077d8 <_strtod_l+0x778>
 800779c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd23      	ble.n	80077ea <_strtod_l+0x78a>
 80077a2:	4649      	mov	r1, r9
 80077a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077a6:	9805      	ldr	r0, [sp, #20]
 80077a8:	f001 f972 	bl	8008a90 <__pow5mult>
 80077ac:	4681      	mov	r9, r0
 80077ae:	b9e0      	cbnz	r0, 80077ea <_strtod_l+0x78a>
 80077b0:	f04f 0900 	mov.w	r9, #0
 80077b4:	e677      	b.n	80074a6 <_strtod_l+0x446>
 80077b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077c2:	35e2      	adds	r5, #226	@ 0xe2
 80077c4:	fa01 f305 	lsl.w	r3, r1, r5
 80077c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80077ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077cc:	e7ba      	b.n	8007744 <_strtod_l+0x6e4>
 80077ce:	2300      	movs	r3, #0
 80077d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80077d2:	2301      	movs	r3, #1
 80077d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077d6:	e7b5      	b.n	8007744 <_strtod_l+0x6e4>
 80077d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077da:	9805      	ldr	r0, [sp, #20]
 80077dc:	462a      	mov	r2, r5
 80077de:	f001 f9b1 	bl	8008b44 <__lshift>
 80077e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d1d9      	bne.n	800779c <_strtod_l+0x73c>
 80077e8:	e65d      	b.n	80074a6 <_strtod_l+0x446>
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	dd07      	ble.n	80077fe <_strtod_l+0x79e>
 80077ee:	4649      	mov	r1, r9
 80077f0:	9805      	ldr	r0, [sp, #20]
 80077f2:	4632      	mov	r2, r6
 80077f4:	f001 f9a6 	bl	8008b44 <__lshift>
 80077f8:	4681      	mov	r9, r0
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d0d8      	beq.n	80077b0 <_strtod_l+0x750>
 80077fe:	2f00      	cmp	r7, #0
 8007800:	dd08      	ble.n	8007814 <_strtod_l+0x7b4>
 8007802:	4641      	mov	r1, r8
 8007804:	9805      	ldr	r0, [sp, #20]
 8007806:	463a      	mov	r2, r7
 8007808:	f001 f99c 	bl	8008b44 <__lshift>
 800780c:	4680      	mov	r8, r0
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f ae49 	beq.w	80074a6 <_strtod_l+0x446>
 8007814:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007816:	9805      	ldr	r0, [sp, #20]
 8007818:	464a      	mov	r2, r9
 800781a:	f001 fa1b 	bl	8008c54 <__mdiff>
 800781e:	4604      	mov	r4, r0
 8007820:	2800      	cmp	r0, #0
 8007822:	f43f ae40 	beq.w	80074a6 <_strtod_l+0x446>
 8007826:	68c3      	ldr	r3, [r0, #12]
 8007828:	930f      	str	r3, [sp, #60]	@ 0x3c
 800782a:	2300      	movs	r3, #0
 800782c:	60c3      	str	r3, [r0, #12]
 800782e:	4641      	mov	r1, r8
 8007830:	f001 f9f4 	bl	8008c1c <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	da45      	bge.n	80078c4 <_strtod_l+0x864>
 8007838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783a:	ea53 030a 	orrs.w	r3, r3, sl
 800783e:	d16b      	bne.n	8007918 <_strtod_l+0x8b8>
 8007840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007844:	2b00      	cmp	r3, #0
 8007846:	d167      	bne.n	8007918 <_strtod_l+0x8b8>
 8007848:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800784c:	0d1b      	lsrs	r3, r3, #20
 800784e:	051b      	lsls	r3, r3, #20
 8007850:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007854:	d960      	bls.n	8007918 <_strtod_l+0x8b8>
 8007856:	6963      	ldr	r3, [r4, #20]
 8007858:	b913      	cbnz	r3, 8007860 <_strtod_l+0x800>
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	2b01      	cmp	r3, #1
 800785e:	dd5b      	ble.n	8007918 <_strtod_l+0x8b8>
 8007860:	4621      	mov	r1, r4
 8007862:	2201      	movs	r2, #1
 8007864:	9805      	ldr	r0, [sp, #20]
 8007866:	f001 f96d 	bl	8008b44 <__lshift>
 800786a:	4641      	mov	r1, r8
 800786c:	4604      	mov	r4, r0
 800786e:	f001 f9d5 	bl	8008c1c <__mcmp>
 8007872:	2800      	cmp	r0, #0
 8007874:	dd50      	ble.n	8007918 <_strtod_l+0x8b8>
 8007876:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800787a:	9a08      	ldr	r2, [sp, #32]
 800787c:	0d1b      	lsrs	r3, r3, #20
 800787e:	051b      	lsls	r3, r3, #20
 8007880:	2a00      	cmp	r2, #0
 8007882:	d06a      	beq.n	800795a <_strtod_l+0x8fa>
 8007884:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007888:	d867      	bhi.n	800795a <_strtod_l+0x8fa>
 800788a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800788e:	f67f ae9d 	bls.w	80075cc <_strtod_l+0x56c>
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <_strtod_l+0x85c>)
 8007894:	4650      	mov	r0, sl
 8007896:	4659      	mov	r1, fp
 8007898:	2200      	movs	r2, #0
 800789a:	f7f8 febd 	bl	8000618 <__aeabi_dmul>
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <_strtod_l+0x860>)
 80078a0:	400b      	ands	r3, r1
 80078a2:	4682      	mov	sl, r0
 80078a4:	468b      	mov	fp, r1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f ae08 	bne.w	80074bc <_strtod_l+0x45c>
 80078ac:	9a05      	ldr	r2, [sp, #20]
 80078ae:	2322      	movs	r3, #34	@ 0x22
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e603      	b.n	80074bc <_strtod_l+0x45c>
 80078b4:	08009dc8 	.word	0x08009dc8
 80078b8:	fffffc02 	.word	0xfffffc02
 80078bc:	39500000 	.word	0x39500000
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80078c8:	d165      	bne.n	8007996 <_strtod_l+0x936>
 80078ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d0:	b35a      	cbz	r2, 800792a <_strtod_l+0x8ca>
 80078d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007b50 <_strtod_l+0xaf0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d12b      	bne.n	8007930 <_strtod_l+0x8d0>
 80078d8:	9b08      	ldr	r3, [sp, #32]
 80078da:	4651      	mov	r1, sl
 80078dc:	b303      	cbz	r3, 8007920 <_strtod_l+0x8c0>
 80078de:	4b9d      	ldr	r3, [pc, #628]	@ (8007b54 <_strtod_l+0xaf4>)
 80078e0:	465a      	mov	r2, fp
 80078e2:	4013      	ands	r3, r2
 80078e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ec:	d81b      	bhi.n	8007926 <_strtod_l+0x8c6>
 80078ee:	0d1b      	lsrs	r3, r3, #20
 80078f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d119      	bne.n	8007930 <_strtod_l+0x8d0>
 80078fc:	4b96      	ldr	r3, [pc, #600]	@ (8007b58 <_strtod_l+0xaf8>)
 80078fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007900:	429a      	cmp	r2, r3
 8007902:	d102      	bne.n	800790a <_strtod_l+0x8aa>
 8007904:	3101      	adds	r1, #1
 8007906:	f43f adce 	beq.w	80074a6 <_strtod_l+0x446>
 800790a:	4b92      	ldr	r3, [pc, #584]	@ (8007b54 <_strtod_l+0xaf4>)
 800790c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800790e:	401a      	ands	r2, r3
 8007910:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007914:	f04f 0a00 	mov.w	sl, #0
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1b9      	bne.n	8007892 <_strtod_l+0x832>
 800791e:	e5cd      	b.n	80074bc <_strtod_l+0x45c>
 8007920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007924:	e7e8      	b.n	80078f8 <_strtod_l+0x898>
 8007926:	4613      	mov	r3, r2
 8007928:	e7e6      	b.n	80078f8 <_strtod_l+0x898>
 800792a:	ea53 030a 	orrs.w	r3, r3, sl
 800792e:	d0a2      	beq.n	8007876 <_strtod_l+0x816>
 8007930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007932:	b1db      	cbz	r3, 800796c <_strtod_l+0x90c>
 8007934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007936:	4213      	tst	r3, r2
 8007938:	d0ee      	beq.n	8007918 <_strtod_l+0x8b8>
 800793a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800793c:	9a08      	ldr	r2, [sp, #32]
 800793e:	4650      	mov	r0, sl
 8007940:	4659      	mov	r1, fp
 8007942:	b1bb      	cbz	r3, 8007974 <_strtod_l+0x914>
 8007944:	f7ff fb6e 	bl	8007024 <sulp>
 8007948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800794c:	ec53 2b10 	vmov	r2, r3, d0
 8007950:	f7f8 fcac 	bl	80002ac <__adddf3>
 8007954:	4682      	mov	sl, r0
 8007956:	468b      	mov	fp, r1
 8007958:	e7de      	b.n	8007918 <_strtod_l+0x8b8>
 800795a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800795e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007962:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007966:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800796a:	e7d5      	b.n	8007918 <_strtod_l+0x8b8>
 800796c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800796e:	ea13 0f0a 	tst.w	r3, sl
 8007972:	e7e1      	b.n	8007938 <_strtod_l+0x8d8>
 8007974:	f7ff fb56 	bl	8007024 <sulp>
 8007978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800797c:	ec53 2b10 	vmov	r2, r3, d0
 8007980:	f7f8 fc92 	bl	80002a8 <__aeabi_dsub>
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4682      	mov	sl, r0
 800798a:	468b      	mov	fp, r1
 800798c:	f7f9 f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8007990:	2800      	cmp	r0, #0
 8007992:	d0c1      	beq.n	8007918 <_strtod_l+0x8b8>
 8007994:	e61a      	b.n	80075cc <_strtod_l+0x56c>
 8007996:	4641      	mov	r1, r8
 8007998:	4620      	mov	r0, r4
 800799a:	f001 fab7 	bl	8008f0c <__ratio>
 800799e:	ec57 6b10 	vmov	r6, r7, d0
 80079a2:	2200      	movs	r2, #0
 80079a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f9 f8b0 	bl	8000b10 <__aeabi_dcmple>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d06f      	beq.n	8007a94 <_strtod_l+0xa34>
 80079b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d17a      	bne.n	8007ab0 <_strtod_l+0xa50>
 80079ba:	f1ba 0f00 	cmp.w	sl, #0
 80079be:	d158      	bne.n	8007a72 <_strtod_l+0xa12>
 80079c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d15a      	bne.n	8007a80 <_strtod_l+0xa20>
 80079ca:	4b64      	ldr	r3, [pc, #400]	@ (8007b5c <_strtod_l+0xafc>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	4630      	mov	r0, r6
 80079d0:	4639      	mov	r1, r7
 80079d2:	f7f9 f893 	bl	8000afc <__aeabi_dcmplt>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d159      	bne.n	8007a8e <_strtod_l+0xa2e>
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	4b60      	ldr	r3, [pc, #384]	@ (8007b60 <_strtod_l+0xb00>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7f8 fe19 	bl	8000618 <__aeabi_dmul>
 80079e6:	4606      	mov	r6, r0
 80079e8:	460f      	mov	r7, r1
 80079ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80079ee:	9606      	str	r6, [sp, #24]
 80079f0:	9307      	str	r3, [sp, #28]
 80079f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079f6:	4d57      	ldr	r5, [pc, #348]	@ (8007b54 <_strtod_l+0xaf4>)
 80079f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079fe:	401d      	ands	r5, r3
 8007a00:	4b58      	ldr	r3, [pc, #352]	@ (8007b64 <_strtod_l+0xb04>)
 8007a02:	429d      	cmp	r5, r3
 8007a04:	f040 80b2 	bne.w	8007b6c <_strtod_l+0xb0c>
 8007a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a0e:	ec4b ab10 	vmov	d0, sl, fp
 8007a12:	f001 f9b3 	bl	8008d7c <__ulp>
 8007a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a1a:	ec51 0b10 	vmov	r0, r1, d0
 8007a1e:	f7f8 fdfb 	bl	8000618 <__aeabi_dmul>
 8007a22:	4652      	mov	r2, sl
 8007a24:	465b      	mov	r3, fp
 8007a26:	f7f8 fc41 	bl	80002ac <__adddf3>
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4949      	ldr	r1, [pc, #292]	@ (8007b54 <_strtod_l+0xaf4>)
 8007a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007b68 <_strtod_l+0xb08>)
 8007a30:	4019      	ands	r1, r3
 8007a32:	4291      	cmp	r1, r2
 8007a34:	4682      	mov	sl, r0
 8007a36:	d942      	bls.n	8007abe <_strtod_l+0xa5e>
 8007a38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a3a:	4b47      	ldr	r3, [pc, #284]	@ (8007b58 <_strtod_l+0xaf8>)
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d103      	bne.n	8007a48 <_strtod_l+0x9e8>
 8007a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a42:	3301      	adds	r3, #1
 8007a44:	f43f ad2f 	beq.w	80074a6 <_strtod_l+0x446>
 8007a48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007b58 <_strtod_l+0xaf8>
 8007a4c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007a50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a52:	9805      	ldr	r0, [sp, #20]
 8007a54:	f000 fe66 	bl	8008724 <_Bfree>
 8007a58:	9805      	ldr	r0, [sp, #20]
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f000 fe62 	bl	8008724 <_Bfree>
 8007a60:	9805      	ldr	r0, [sp, #20]
 8007a62:	4641      	mov	r1, r8
 8007a64:	f000 fe5e 	bl	8008724 <_Bfree>
 8007a68:	9805      	ldr	r0, [sp, #20]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f000 fe5a 	bl	8008724 <_Bfree>
 8007a70:	e619      	b.n	80076a6 <_strtod_l+0x646>
 8007a72:	f1ba 0f01 	cmp.w	sl, #1
 8007a76:	d103      	bne.n	8007a80 <_strtod_l+0xa20>
 8007a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f43f ada6 	beq.w	80075cc <_strtod_l+0x56c>
 8007a80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007b30 <_strtod_l+0xad0>
 8007a84:	4f35      	ldr	r7, [pc, #212]	@ (8007b5c <_strtod_l+0xafc>)
 8007a86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	e7b1      	b.n	80079f2 <_strtod_l+0x992>
 8007a8e:	4f34      	ldr	r7, [pc, #208]	@ (8007b60 <_strtod_l+0xb00>)
 8007a90:	2600      	movs	r6, #0
 8007a92:	e7aa      	b.n	80079ea <_strtod_l+0x98a>
 8007a94:	4b32      	ldr	r3, [pc, #200]	@ (8007b60 <_strtod_l+0xb00>)
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f7f8 fdbc 	bl	8000618 <__aeabi_dmul>
 8007aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d09f      	beq.n	80079ea <_strtod_l+0x98a>
 8007aaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007aae:	e7a0      	b.n	80079f2 <_strtod_l+0x992>
 8007ab0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007b38 <_strtod_l+0xad8>
 8007ab4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ab8:	ec57 6b17 	vmov	r6, r7, d7
 8007abc:	e799      	b.n	80079f2 <_strtod_l+0x992>
 8007abe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1c1      	bne.n	8007a50 <_strtod_l+0x9f0>
 8007acc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ad0:	0d1b      	lsrs	r3, r3, #20
 8007ad2:	051b      	lsls	r3, r3, #20
 8007ad4:	429d      	cmp	r5, r3
 8007ad6:	d1bb      	bne.n	8007a50 <_strtod_l+0x9f0>
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 f8e6 	bl	8000cac <__aeabi_d2lz>
 8007ae0:	f7f8 fd6c 	bl	80005bc <__aeabi_l2d>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fbdc 	bl	80002a8 <__aeabi_dsub>
 8007af0:	460b      	mov	r3, r1
 8007af2:	4602      	mov	r2, r0
 8007af4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007af8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007afe:	ea46 060a 	orr.w	r6, r6, sl
 8007b02:	431e      	orrs	r6, r3
 8007b04:	d06f      	beq.n	8007be6 <_strtod_l+0xb86>
 8007b06:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b40 <_strtod_l+0xae0>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fff6 	bl	8000afc <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f47f acd3 	bne.w	80074bc <_strtod_l+0x45c>
 8007b16:	a30c      	add	r3, pc, #48	@ (adr r3, 8007b48 <_strtod_l+0xae8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b20:	f7f9 f80a 	bl	8000b38 <__aeabi_dcmpgt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d093      	beq.n	8007a50 <_strtod_l+0x9f0>
 8007b28:	e4c8      	b.n	80074bc <_strtod_l+0x45c>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	00000000 	.word	0x00000000
 8007b34:	bff00000 	.word	0xbff00000
 8007b38:	00000000 	.word	0x00000000
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	94a03595 	.word	0x94a03595
 8007b44:	3fdfffff 	.word	0x3fdfffff
 8007b48:	35afe535 	.word	0x35afe535
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	000fffff 	.word	0x000fffff
 8007b54:	7ff00000 	.word	0x7ff00000
 8007b58:	7fefffff 	.word	0x7fefffff
 8007b5c:	3ff00000 	.word	0x3ff00000
 8007b60:	3fe00000 	.word	0x3fe00000
 8007b64:	7fe00000 	.word	0x7fe00000
 8007b68:	7c9fffff 	.word	0x7c9fffff
 8007b6c:	9b08      	ldr	r3, [sp, #32]
 8007b6e:	b323      	cbz	r3, 8007bba <_strtod_l+0xb5a>
 8007b70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b74:	d821      	bhi.n	8007bba <_strtod_l+0xb5a>
 8007b76:	a328      	add	r3, pc, #160	@ (adr r3, 8007c18 <_strtod_l+0xbb8>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	f7f8 ffc6 	bl	8000b10 <__aeabi_dcmple>
 8007b84:	b1a0      	cbz	r0, 8007bb0 <_strtod_l+0xb50>
 8007b86:	4639      	mov	r1, r7
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7f9 f807 	bl	8000b9c <__aeabi_d2uiz>
 8007b8e:	2801      	cmp	r0, #1
 8007b90:	bf38      	it	cc
 8007b92:	2001      	movcc	r0, #1
 8007b94:	f7f8 fcc6 	bl	8000524 <__aeabi_ui2d>
 8007b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	b9fb      	cbnz	r3, 8007be0 <_strtod_l+0xb80>
 8007ba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ba4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007ba6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ba8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007bac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007bb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007bb6:	1b5b      	subs	r3, r3, r5
 8007bb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007bbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bc2:	f001 f8db 	bl	8008d7c <__ulp>
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	ec53 2b10 	vmov	r2, r3, d0
 8007bcc:	4659      	mov	r1, fp
 8007bce:	f7f8 fd23 	bl	8000618 <__aeabi_dmul>
 8007bd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bd6:	f7f8 fb69 	bl	80002ac <__adddf3>
 8007bda:	4682      	mov	sl, r0
 8007bdc:	468b      	mov	fp, r1
 8007bde:	e770      	b.n	8007ac2 <_strtod_l+0xa62>
 8007be0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007be4:	e7e0      	b.n	8007ba8 <_strtod_l+0xb48>
 8007be6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c20 <_strtod_l+0xbc0>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 ff86 	bl	8000afc <__aeabi_dcmplt>
 8007bf0:	e798      	b.n	8007b24 <_strtod_l+0xac4>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007bf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007bf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	f7ff ba6d 	b.w	80070da <_strtod_l+0x7a>
 8007c00:	2a65      	cmp	r2, #101	@ 0x65
 8007c02:	f43f ab68 	beq.w	80072d6 <_strtod_l+0x276>
 8007c06:	2a45      	cmp	r2, #69	@ 0x45
 8007c08:	f43f ab65 	beq.w	80072d6 <_strtod_l+0x276>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f7ff bba0 	b.w	8007352 <_strtod_l+0x2f2>
 8007c12:	bf00      	nop
 8007c14:	f3af 8000 	nop.w
 8007c18:	ffc00000 	.word	0xffc00000
 8007c1c:	41dfffff 	.word	0x41dfffff
 8007c20:	94a03595 	.word	0x94a03595
 8007c24:	3fcfffff 	.word	0x3fcfffff

08007c28 <strtod>:
 8007c28:	460a      	mov	r2, r1
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	4802      	ldr	r0, [pc, #8]	@ (8007c38 <strtod+0x10>)
 8007c2e:	4b03      	ldr	r3, [pc, #12]	@ (8007c3c <strtod+0x14>)
 8007c30:	6800      	ldr	r0, [r0, #0]
 8007c32:	f7ff ba15 	b.w	8007060 <_strtod_l>
 8007c36:	bf00      	nop
 8007c38:	2000026c 	.word	0x2000026c
 8007c3c:	20000100 	.word	0x20000100

08007c40 <_fwalk_sglue>:
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	4607      	mov	r7, r0
 8007c46:	4688      	mov	r8, r1
 8007c48:	4614      	mov	r4, r2
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c50:	f1b9 0901 	subs.w	r9, r9, #1
 8007c54:	d505      	bpl.n	8007c62 <_fwalk_sglue+0x22>
 8007c56:	6824      	ldr	r4, [r4, #0]
 8007c58:	2c00      	cmp	r4, #0
 8007c5a:	d1f7      	bne.n	8007c4c <_fwalk_sglue+0xc>
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c62:	89ab      	ldrh	r3, [r5, #12]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d907      	bls.n	8007c78 <_fwalk_sglue+0x38>
 8007c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	d003      	beq.n	8007c78 <_fwalk_sglue+0x38>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4638      	mov	r0, r7
 8007c74:	47c0      	blx	r8
 8007c76:	4306      	orrs	r6, r0
 8007c78:	3568      	adds	r5, #104	@ 0x68
 8007c7a:	e7e9      	b.n	8007c50 <_fwalk_sglue+0x10>

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <strchr>:
 8007c8c:	b2c9      	uxtb	r1, r1
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c96:	b112      	cbz	r2, 8007c9e <strchr+0x12>
 8007c98:	428a      	cmp	r2, r1
 8007c9a:	d1f9      	bne.n	8007c90 <strchr+0x4>
 8007c9c:	4770      	bx	lr
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	bf18      	it	ne
 8007ca2:	2000      	movne	r0, #0
 8007ca4:	4770      	bx	lr

08007ca6 <strncmp>:
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	b16a      	cbz	r2, 8007cc6 <strncmp+0x20>
 8007caa:	3901      	subs	r1, #1
 8007cac:	1884      	adds	r4, r0, r2
 8007cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cb2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d103      	bne.n	8007cc2 <strncmp+0x1c>
 8007cba:	42a0      	cmp	r0, r4
 8007cbc:	d001      	beq.n	8007cc2 <strncmp+0x1c>
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	d1f5      	bne.n	8007cae <strncmp+0x8>
 8007cc2:	1ad0      	subs	r0, r2, r3
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	e7fc      	b.n	8007cc4 <strncmp+0x1e>
	...

08007ccc <__errno>:
 8007ccc:	4b01      	ldr	r3, [pc, #4]	@ (8007cd4 <__errno+0x8>)
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	2000026c 	.word	0x2000026c

08007cd8 <__libc_init_array>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4d0d      	ldr	r5, [pc, #52]	@ (8007d10 <__libc_init_array+0x38>)
 8007cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d14 <__libc_init_array+0x3c>)
 8007cde:	1b64      	subs	r4, r4, r5
 8007ce0:	10a4      	asrs	r4, r4, #2
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	42a6      	cmp	r6, r4
 8007ce6:	d109      	bne.n	8007cfc <__libc_init_array+0x24>
 8007ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d18 <__libc_init_array+0x40>)
 8007cea:	4c0c      	ldr	r4, [pc, #48]	@ (8007d1c <__libc_init_array+0x44>)
 8007cec:	f001 ff6c 	bl	8009bc8 <_init>
 8007cf0:	1b64      	subs	r4, r4, r5
 8007cf2:	10a4      	asrs	r4, r4, #2
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	42a6      	cmp	r6, r4
 8007cf8:	d105      	bne.n	8007d06 <__libc_init_array+0x2e>
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d00:	4798      	blx	r3
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7ee      	b.n	8007ce4 <__libc_init_array+0xc>
 8007d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0a:	4798      	blx	r3
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	e7f2      	b.n	8007cf6 <__libc_init_array+0x1e>
 8007d10:	08009ff8 	.word	0x08009ff8
 8007d14:	08009ff8 	.word	0x08009ff8
 8007d18:	08009ff8 	.word	0x08009ff8
 8007d1c:	08009ffc 	.word	0x08009ffc

08007d20 <__retarget_lock_init_recursive>:
 8007d20:	4770      	bx	lr

08007d22 <__retarget_lock_acquire_recursive>:
 8007d22:	4770      	bx	lr

08007d24 <__retarget_lock_release_recursive>:
 8007d24:	4770      	bx	lr

08007d26 <memcpy>:
 8007d26:	440a      	add	r2, r1
 8007d28:	4291      	cmp	r1, r2
 8007d2a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d2e:	d100      	bne.n	8007d32 <memcpy+0xc>
 8007d30:	4770      	bx	lr
 8007d32:	b510      	push	{r4, lr}
 8007d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d3c:	4291      	cmp	r1, r2
 8007d3e:	d1f9      	bne.n	8007d34 <memcpy+0xe>
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	0000      	movs	r0, r0
 8007d44:	0000      	movs	r0, r0
	...

08007d48 <nan>:
 8007d48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d50 <nan+0x8>
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	00000000 	.word	0x00000000
 8007d54:	7ff80000 	.word	0x7ff80000

08007d58 <rshift>:
 8007d58:	6903      	ldr	r3, [r0, #16]
 8007d5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d66:	f100 0414 	add.w	r4, r0, #20
 8007d6a:	dd45      	ble.n	8007df8 <rshift+0xa0>
 8007d6c:	f011 011f 	ands.w	r1, r1, #31
 8007d70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d78:	d10c      	bne.n	8007d94 <rshift+0x3c>
 8007d7a:	f100 0710 	add.w	r7, r0, #16
 8007d7e:	4629      	mov	r1, r5
 8007d80:	42b1      	cmp	r1, r6
 8007d82:	d334      	bcc.n	8007dee <rshift+0x96>
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	1eea      	subs	r2, r5, #3
 8007d8a:	4296      	cmp	r6, r2
 8007d8c:	bf38      	it	cc
 8007d8e:	2300      	movcc	r3, #0
 8007d90:	4423      	add	r3, r4
 8007d92:	e015      	b.n	8007dc0 <rshift+0x68>
 8007d94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d98:	f1c1 0820 	rsb	r8, r1, #32
 8007d9c:	40cf      	lsrs	r7, r1
 8007d9e:	f105 0e04 	add.w	lr, r5, #4
 8007da2:	46a1      	mov	r9, r4
 8007da4:	4576      	cmp	r6, lr
 8007da6:	46f4      	mov	ip, lr
 8007da8:	d815      	bhi.n	8007dd6 <rshift+0x7e>
 8007daa:	1a9a      	subs	r2, r3, r2
 8007dac:	0092      	lsls	r2, r2, #2
 8007dae:	3a04      	subs	r2, #4
 8007db0:	3501      	adds	r5, #1
 8007db2:	42ae      	cmp	r6, r5
 8007db4:	bf38      	it	cc
 8007db6:	2200      	movcc	r2, #0
 8007db8:	18a3      	adds	r3, r4, r2
 8007dba:	50a7      	str	r7, [r4, r2]
 8007dbc:	b107      	cbz	r7, 8007dc0 <rshift+0x68>
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	1b1a      	subs	r2, r3, r4
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dc8:	bf08      	it	eq
 8007dca:	2300      	moveq	r3, #0
 8007dcc:	6102      	str	r2, [r0, #16]
 8007dce:	bf08      	it	eq
 8007dd0:	6143      	streq	r3, [r0, #20]
 8007dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dd6:	f8dc c000 	ldr.w	ip, [ip]
 8007dda:	fa0c fc08 	lsl.w	ip, ip, r8
 8007dde:	ea4c 0707 	orr.w	r7, ip, r7
 8007de2:	f849 7b04 	str.w	r7, [r9], #4
 8007de6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007dea:	40cf      	lsrs	r7, r1
 8007dec:	e7da      	b.n	8007da4 <rshift+0x4c>
 8007dee:	f851 cb04 	ldr.w	ip, [r1], #4
 8007df2:	f847 cf04 	str.w	ip, [r7, #4]!
 8007df6:	e7c3      	b.n	8007d80 <rshift+0x28>
 8007df8:	4623      	mov	r3, r4
 8007dfa:	e7e1      	b.n	8007dc0 <rshift+0x68>

08007dfc <__hexdig_fun>:
 8007dfc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d802      	bhi.n	8007e0a <__hexdig_fun+0xe>
 8007e04:	3820      	subs	r0, #32
 8007e06:	b2c0      	uxtb	r0, r0
 8007e08:	4770      	bx	lr
 8007e0a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d801      	bhi.n	8007e16 <__hexdig_fun+0x1a>
 8007e12:	3847      	subs	r0, #71	@ 0x47
 8007e14:	e7f7      	b.n	8007e06 <__hexdig_fun+0xa>
 8007e16:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d801      	bhi.n	8007e22 <__hexdig_fun+0x26>
 8007e1e:	3827      	subs	r0, #39	@ 0x27
 8007e20:	e7f1      	b.n	8007e06 <__hexdig_fun+0xa>
 8007e22:	2000      	movs	r0, #0
 8007e24:	4770      	bx	lr
	...

08007e28 <__gethex>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	468a      	mov	sl, r1
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	680b      	ldr	r3, [r1, #0]
 8007e34:	9001      	str	r0, [sp, #4]
 8007e36:	4690      	mov	r8, r2
 8007e38:	1c9c      	adds	r4, r3, #2
 8007e3a:	46a1      	mov	r9, r4
 8007e3c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e40:	2830      	cmp	r0, #48	@ 0x30
 8007e42:	d0fa      	beq.n	8007e3a <__gethex+0x12>
 8007e44:	eba9 0303 	sub.w	r3, r9, r3
 8007e48:	f1a3 0b02 	sub.w	fp, r3, #2
 8007e4c:	f7ff ffd6 	bl	8007dfc <__hexdig_fun>
 8007e50:	4605      	mov	r5, r0
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d168      	bne.n	8007f28 <__gethex+0x100>
 8007e56:	49a0      	ldr	r1, [pc, #640]	@ (80080d8 <__gethex+0x2b0>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4648      	mov	r0, r9
 8007e5c:	f7ff ff23 	bl	8007ca6 <strncmp>
 8007e60:	4607      	mov	r7, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d167      	bne.n	8007f36 <__gethex+0x10e>
 8007e66:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007e6a:	4626      	mov	r6, r4
 8007e6c:	f7ff ffc6 	bl	8007dfc <__hexdig_fun>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d062      	beq.n	8007f3a <__gethex+0x112>
 8007e74:	4623      	mov	r3, r4
 8007e76:	7818      	ldrb	r0, [r3, #0]
 8007e78:	2830      	cmp	r0, #48	@ 0x30
 8007e7a:	4699      	mov	r9, r3
 8007e7c:	f103 0301 	add.w	r3, r3, #1
 8007e80:	d0f9      	beq.n	8007e76 <__gethex+0x4e>
 8007e82:	f7ff ffbb 	bl	8007dfc <__hexdig_fun>
 8007e86:	fab0 f580 	clz	r5, r0
 8007e8a:	096d      	lsrs	r5, r5, #5
 8007e8c:	f04f 0b01 	mov.w	fp, #1
 8007e90:	464a      	mov	r2, r9
 8007e92:	4616      	mov	r6, r2
 8007e94:	3201      	adds	r2, #1
 8007e96:	7830      	ldrb	r0, [r6, #0]
 8007e98:	f7ff ffb0 	bl	8007dfc <__hexdig_fun>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d1f8      	bne.n	8007e92 <__gethex+0x6a>
 8007ea0:	498d      	ldr	r1, [pc, #564]	@ (80080d8 <__gethex+0x2b0>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff fefe 	bl	8007ca6 <strncmp>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d13f      	bne.n	8007f2e <__gethex+0x106>
 8007eae:	b944      	cbnz	r4, 8007ec2 <__gethex+0x9a>
 8007eb0:	1c74      	adds	r4, r6, #1
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	7830      	ldrb	r0, [r6, #0]
 8007eba:	f7ff ff9f 	bl	8007dfc <__hexdig_fun>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1f8      	bne.n	8007eb4 <__gethex+0x8c>
 8007ec2:	1ba4      	subs	r4, r4, r6
 8007ec4:	00a7      	lsls	r7, r4, #2
 8007ec6:	7833      	ldrb	r3, [r6, #0]
 8007ec8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007ecc:	2b50      	cmp	r3, #80	@ 0x50
 8007ece:	d13e      	bne.n	8007f4e <__gethex+0x126>
 8007ed0:	7873      	ldrb	r3, [r6, #1]
 8007ed2:	2b2b      	cmp	r3, #43	@ 0x2b
 8007ed4:	d033      	beq.n	8007f3e <__gethex+0x116>
 8007ed6:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ed8:	d034      	beq.n	8007f44 <__gethex+0x11c>
 8007eda:	1c71      	adds	r1, r6, #1
 8007edc:	2400      	movs	r4, #0
 8007ede:	7808      	ldrb	r0, [r1, #0]
 8007ee0:	f7ff ff8c 	bl	8007dfc <__hexdig_fun>
 8007ee4:	1e43      	subs	r3, r0, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b18      	cmp	r3, #24
 8007eea:	d830      	bhi.n	8007f4e <__gethex+0x126>
 8007eec:	f1a0 0210 	sub.w	r2, r0, #16
 8007ef0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ef4:	f7ff ff82 	bl	8007dfc <__hexdig_fun>
 8007ef8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007efc:	fa5f fc8c 	uxtb.w	ip, ip
 8007f00:	f1bc 0f18 	cmp.w	ip, #24
 8007f04:	f04f 030a 	mov.w	r3, #10
 8007f08:	d91e      	bls.n	8007f48 <__gethex+0x120>
 8007f0a:	b104      	cbz	r4, 8007f0e <__gethex+0xe6>
 8007f0c:	4252      	negs	r2, r2
 8007f0e:	4417      	add	r7, r2
 8007f10:	f8ca 1000 	str.w	r1, [sl]
 8007f14:	b1ed      	cbz	r5, 8007f52 <__gethex+0x12a>
 8007f16:	f1bb 0f00 	cmp.w	fp, #0
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2506      	moveq	r5, #6
 8007f1e:	2500      	movne	r5, #0
 8007f20:	4628      	mov	r0, r5
 8007f22:	b005      	add	sp, #20
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	2500      	movs	r5, #0
 8007f2a:	462c      	mov	r4, r5
 8007f2c:	e7b0      	b.n	8007e90 <__gethex+0x68>
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	d1c7      	bne.n	8007ec2 <__gethex+0x9a>
 8007f32:	4627      	mov	r7, r4
 8007f34:	e7c7      	b.n	8007ec6 <__gethex+0x9e>
 8007f36:	464e      	mov	r6, r9
 8007f38:	462f      	mov	r7, r5
 8007f3a:	2501      	movs	r5, #1
 8007f3c:	e7c3      	b.n	8007ec6 <__gethex+0x9e>
 8007f3e:	2400      	movs	r4, #0
 8007f40:	1cb1      	adds	r1, r6, #2
 8007f42:	e7cc      	b.n	8007ede <__gethex+0xb6>
 8007f44:	2401      	movs	r4, #1
 8007f46:	e7fb      	b.n	8007f40 <__gethex+0x118>
 8007f48:	fb03 0002 	mla	r0, r3, r2, r0
 8007f4c:	e7ce      	b.n	8007eec <__gethex+0xc4>
 8007f4e:	4631      	mov	r1, r6
 8007f50:	e7de      	b.n	8007f10 <__gethex+0xe8>
 8007f52:	eba6 0309 	sub.w	r3, r6, r9
 8007f56:	3b01      	subs	r3, #1
 8007f58:	4629      	mov	r1, r5
 8007f5a:	2b07      	cmp	r3, #7
 8007f5c:	dc0a      	bgt.n	8007f74 <__gethex+0x14c>
 8007f5e:	9801      	ldr	r0, [sp, #4]
 8007f60:	f000 fba0 	bl	80086a4 <_Balloc>
 8007f64:	4604      	mov	r4, r0
 8007f66:	b940      	cbnz	r0, 8007f7a <__gethex+0x152>
 8007f68:	4b5c      	ldr	r3, [pc, #368]	@ (80080dc <__gethex+0x2b4>)
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	21e4      	movs	r1, #228	@ 0xe4
 8007f6e:	485c      	ldr	r0, [pc, #368]	@ (80080e0 <__gethex+0x2b8>)
 8007f70:	f001 f8e8 	bl	8009144 <__assert_func>
 8007f74:	3101      	adds	r1, #1
 8007f76:	105b      	asrs	r3, r3, #1
 8007f78:	e7ef      	b.n	8007f5a <__gethex+0x132>
 8007f7a:	f100 0a14 	add.w	sl, r0, #20
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4655      	mov	r5, sl
 8007f82:	469b      	mov	fp, r3
 8007f84:	45b1      	cmp	r9, r6
 8007f86:	d337      	bcc.n	8007ff8 <__gethex+0x1d0>
 8007f88:	f845 bb04 	str.w	fp, [r5], #4
 8007f8c:	eba5 050a 	sub.w	r5, r5, sl
 8007f90:	10ad      	asrs	r5, r5, #2
 8007f92:	6125      	str	r5, [r4, #16]
 8007f94:	4658      	mov	r0, fp
 8007f96:	f000 fc77 	bl	8008888 <__hi0bits>
 8007f9a:	016d      	lsls	r5, r5, #5
 8007f9c:	f8d8 6000 	ldr.w	r6, [r8]
 8007fa0:	1a2d      	subs	r5, r5, r0
 8007fa2:	42b5      	cmp	r5, r6
 8007fa4:	dd54      	ble.n	8008050 <__gethex+0x228>
 8007fa6:	1bad      	subs	r5, r5, r6
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4620      	mov	r0, r4
 8007fac:	f001 f803 	bl	8008fb6 <__any_on>
 8007fb0:	4681      	mov	r9, r0
 8007fb2:	b178      	cbz	r0, 8007fd4 <__gethex+0x1ac>
 8007fb4:	1e6b      	subs	r3, r5, #1
 8007fb6:	1159      	asrs	r1, r3, #5
 8007fb8:	f003 021f 	and.w	r2, r3, #31
 8007fbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007fc0:	f04f 0901 	mov.w	r9, #1
 8007fc4:	fa09 f202 	lsl.w	r2, r9, r2
 8007fc8:	420a      	tst	r2, r1
 8007fca:	d003      	beq.n	8007fd4 <__gethex+0x1ac>
 8007fcc:	454b      	cmp	r3, r9
 8007fce:	dc36      	bgt.n	800803e <__gethex+0x216>
 8007fd0:	f04f 0902 	mov.w	r9, #2
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f7ff febe 	bl	8007d58 <rshift>
 8007fdc:	442f      	add	r7, r5
 8007fde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fe2:	42bb      	cmp	r3, r7
 8007fe4:	da42      	bge.n	800806c <__gethex+0x244>
 8007fe6:	9801      	ldr	r0, [sp, #4]
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f000 fb9b 	bl	8008724 <_Bfree>
 8007fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	25a3      	movs	r5, #163	@ 0xa3
 8007ff6:	e793      	b.n	8007f20 <__gethex+0xf8>
 8007ff8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007ffc:	2a2e      	cmp	r2, #46	@ 0x2e
 8007ffe:	d012      	beq.n	8008026 <__gethex+0x1fe>
 8008000:	2b20      	cmp	r3, #32
 8008002:	d104      	bne.n	800800e <__gethex+0x1e6>
 8008004:	f845 bb04 	str.w	fp, [r5], #4
 8008008:	f04f 0b00 	mov.w	fp, #0
 800800c:	465b      	mov	r3, fp
 800800e:	7830      	ldrb	r0, [r6, #0]
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	f7ff fef3 	bl	8007dfc <__hexdig_fun>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	f000 000f 	and.w	r0, r0, #15
 800801c:	4098      	lsls	r0, r3
 800801e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008022:	3304      	adds	r3, #4
 8008024:	e7ae      	b.n	8007f84 <__gethex+0x15c>
 8008026:	45b1      	cmp	r9, r6
 8008028:	d8ea      	bhi.n	8008000 <__gethex+0x1d8>
 800802a:	492b      	ldr	r1, [pc, #172]	@ (80080d8 <__gethex+0x2b0>)
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fe38 	bl	8007ca6 <strncmp>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	2800      	cmp	r0, #0
 800803a:	d1e1      	bne.n	8008000 <__gethex+0x1d8>
 800803c:	e7a2      	b.n	8007f84 <__gethex+0x15c>
 800803e:	1ea9      	subs	r1, r5, #2
 8008040:	4620      	mov	r0, r4
 8008042:	f000 ffb8 	bl	8008fb6 <__any_on>
 8008046:	2800      	cmp	r0, #0
 8008048:	d0c2      	beq.n	8007fd0 <__gethex+0x1a8>
 800804a:	f04f 0903 	mov.w	r9, #3
 800804e:	e7c1      	b.n	8007fd4 <__gethex+0x1ac>
 8008050:	da09      	bge.n	8008066 <__gethex+0x23e>
 8008052:	1b75      	subs	r5, r6, r5
 8008054:	4621      	mov	r1, r4
 8008056:	9801      	ldr	r0, [sp, #4]
 8008058:	462a      	mov	r2, r5
 800805a:	f000 fd73 	bl	8008b44 <__lshift>
 800805e:	1b7f      	subs	r7, r7, r5
 8008060:	4604      	mov	r4, r0
 8008062:	f100 0a14 	add.w	sl, r0, #20
 8008066:	f04f 0900 	mov.w	r9, #0
 800806a:	e7b8      	b.n	8007fde <__gethex+0x1b6>
 800806c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008070:	42bd      	cmp	r5, r7
 8008072:	dd6f      	ble.n	8008154 <__gethex+0x32c>
 8008074:	1bed      	subs	r5, r5, r7
 8008076:	42ae      	cmp	r6, r5
 8008078:	dc34      	bgt.n	80080e4 <__gethex+0x2bc>
 800807a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d022      	beq.n	80080c8 <__gethex+0x2a0>
 8008082:	2b03      	cmp	r3, #3
 8008084:	d024      	beq.n	80080d0 <__gethex+0x2a8>
 8008086:	2b01      	cmp	r3, #1
 8008088:	d115      	bne.n	80080b6 <__gethex+0x28e>
 800808a:	42ae      	cmp	r6, r5
 800808c:	d113      	bne.n	80080b6 <__gethex+0x28e>
 800808e:	2e01      	cmp	r6, #1
 8008090:	d10b      	bne.n	80080aa <__gethex+0x282>
 8008092:	9a02      	ldr	r2, [sp, #8]
 8008094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	2301      	movs	r3, #1
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	f8ca 3000 	str.w	r3, [sl]
 80080a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080a4:	2562      	movs	r5, #98	@ 0x62
 80080a6:	601c      	str	r4, [r3, #0]
 80080a8:	e73a      	b.n	8007f20 <__gethex+0xf8>
 80080aa:	1e71      	subs	r1, r6, #1
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 ff82 	bl	8008fb6 <__any_on>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d1ed      	bne.n	8008092 <__gethex+0x26a>
 80080b6:	9801      	ldr	r0, [sp, #4]
 80080b8:	4621      	mov	r1, r4
 80080ba:	f000 fb33 	bl	8008724 <_Bfree>
 80080be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080c0:	2300      	movs	r3, #0
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	2550      	movs	r5, #80	@ 0x50
 80080c6:	e72b      	b.n	8007f20 <__gethex+0xf8>
 80080c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f3      	bne.n	80080b6 <__gethex+0x28e>
 80080ce:	e7e0      	b.n	8008092 <__gethex+0x26a>
 80080d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1dd      	bne.n	8008092 <__gethex+0x26a>
 80080d6:	e7ee      	b.n	80080b6 <__gethex+0x28e>
 80080d8:	08009c38 	.word	0x08009c38
 80080dc:	08009c4e 	.word	0x08009c4e
 80080e0:	08009c5f 	.word	0x08009c5f
 80080e4:	1e6f      	subs	r7, r5, #1
 80080e6:	f1b9 0f00 	cmp.w	r9, #0
 80080ea:	d130      	bne.n	800814e <__gethex+0x326>
 80080ec:	b127      	cbz	r7, 80080f8 <__gethex+0x2d0>
 80080ee:	4639      	mov	r1, r7
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 ff60 	bl	8008fb6 <__any_on>
 80080f6:	4681      	mov	r9, r0
 80080f8:	117a      	asrs	r2, r7, #5
 80080fa:	2301      	movs	r3, #1
 80080fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008100:	f007 071f 	and.w	r7, r7, #31
 8008104:	40bb      	lsls	r3, r7
 8008106:	4213      	tst	r3, r2
 8008108:	4629      	mov	r1, r5
 800810a:	4620      	mov	r0, r4
 800810c:	bf18      	it	ne
 800810e:	f049 0902 	orrne.w	r9, r9, #2
 8008112:	f7ff fe21 	bl	8007d58 <rshift>
 8008116:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800811a:	1b76      	subs	r6, r6, r5
 800811c:	2502      	movs	r5, #2
 800811e:	f1b9 0f00 	cmp.w	r9, #0
 8008122:	d047      	beq.n	80081b4 <__gethex+0x38c>
 8008124:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d015      	beq.n	8008158 <__gethex+0x330>
 800812c:	2b03      	cmp	r3, #3
 800812e:	d017      	beq.n	8008160 <__gethex+0x338>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d109      	bne.n	8008148 <__gethex+0x320>
 8008134:	f019 0f02 	tst.w	r9, #2
 8008138:	d006      	beq.n	8008148 <__gethex+0x320>
 800813a:	f8da 3000 	ldr.w	r3, [sl]
 800813e:	ea49 0903 	orr.w	r9, r9, r3
 8008142:	f019 0f01 	tst.w	r9, #1
 8008146:	d10e      	bne.n	8008166 <__gethex+0x33e>
 8008148:	f045 0510 	orr.w	r5, r5, #16
 800814c:	e032      	b.n	80081b4 <__gethex+0x38c>
 800814e:	f04f 0901 	mov.w	r9, #1
 8008152:	e7d1      	b.n	80080f8 <__gethex+0x2d0>
 8008154:	2501      	movs	r5, #1
 8008156:	e7e2      	b.n	800811e <__gethex+0x2f6>
 8008158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800815a:	f1c3 0301 	rsb	r3, r3, #1
 800815e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <__gethex+0x320>
 8008166:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800816a:	f104 0314 	add.w	r3, r4, #20
 800816e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008172:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008176:	f04f 0c00 	mov.w	ip, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008180:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008184:	d01b      	beq.n	80081be <__gethex+0x396>
 8008186:	3201      	adds	r2, #1
 8008188:	6002      	str	r2, [r0, #0]
 800818a:	2d02      	cmp	r5, #2
 800818c:	f104 0314 	add.w	r3, r4, #20
 8008190:	d13c      	bne.n	800820c <__gethex+0x3e4>
 8008192:	f8d8 2000 	ldr.w	r2, [r8]
 8008196:	3a01      	subs	r2, #1
 8008198:	42b2      	cmp	r2, r6
 800819a:	d109      	bne.n	80081b0 <__gethex+0x388>
 800819c:	1171      	asrs	r1, r6, #5
 800819e:	2201      	movs	r2, #1
 80081a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081a4:	f006 061f 	and.w	r6, r6, #31
 80081a8:	fa02 f606 	lsl.w	r6, r2, r6
 80081ac:	421e      	tst	r6, r3
 80081ae:	d13a      	bne.n	8008226 <__gethex+0x3fe>
 80081b0:	f045 0520 	orr.w	r5, r5, #32
 80081b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081b6:	601c      	str	r4, [r3, #0]
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	601f      	str	r7, [r3, #0]
 80081bc:	e6b0      	b.n	8007f20 <__gethex+0xf8>
 80081be:	4299      	cmp	r1, r3
 80081c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80081c4:	d8d9      	bhi.n	800817a <__gethex+0x352>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	459b      	cmp	fp, r3
 80081ca:	db17      	blt.n	80081fc <__gethex+0x3d4>
 80081cc:	6861      	ldr	r1, [r4, #4]
 80081ce:	9801      	ldr	r0, [sp, #4]
 80081d0:	3101      	adds	r1, #1
 80081d2:	f000 fa67 	bl	80086a4 <_Balloc>
 80081d6:	4681      	mov	r9, r0
 80081d8:	b918      	cbnz	r0, 80081e2 <__gethex+0x3ba>
 80081da:	4b1a      	ldr	r3, [pc, #104]	@ (8008244 <__gethex+0x41c>)
 80081dc:	4602      	mov	r2, r0
 80081de:	2184      	movs	r1, #132	@ 0x84
 80081e0:	e6c5      	b.n	8007f6e <__gethex+0x146>
 80081e2:	6922      	ldr	r2, [r4, #16]
 80081e4:	3202      	adds	r2, #2
 80081e6:	f104 010c 	add.w	r1, r4, #12
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	300c      	adds	r0, #12
 80081ee:	f7ff fd9a 	bl	8007d26 <memcpy>
 80081f2:	4621      	mov	r1, r4
 80081f4:	9801      	ldr	r0, [sp, #4]
 80081f6:	f000 fa95 	bl	8008724 <_Bfree>
 80081fa:	464c      	mov	r4, r9
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008204:	6122      	str	r2, [r4, #16]
 8008206:	2201      	movs	r2, #1
 8008208:	615a      	str	r2, [r3, #20]
 800820a:	e7be      	b.n	800818a <__gethex+0x362>
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	455a      	cmp	r2, fp
 8008210:	dd0b      	ble.n	800822a <__gethex+0x402>
 8008212:	2101      	movs	r1, #1
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff fd9f 	bl	8007d58 <rshift>
 800821a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800821e:	3701      	adds	r7, #1
 8008220:	42bb      	cmp	r3, r7
 8008222:	f6ff aee0 	blt.w	8007fe6 <__gethex+0x1be>
 8008226:	2501      	movs	r5, #1
 8008228:	e7c2      	b.n	80081b0 <__gethex+0x388>
 800822a:	f016 061f 	ands.w	r6, r6, #31
 800822e:	d0fa      	beq.n	8008226 <__gethex+0x3fe>
 8008230:	4453      	add	r3, sl
 8008232:	f1c6 0620 	rsb	r6, r6, #32
 8008236:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800823a:	f000 fb25 	bl	8008888 <__hi0bits>
 800823e:	42b0      	cmp	r0, r6
 8008240:	dbe7      	blt.n	8008212 <__gethex+0x3ea>
 8008242:	e7f0      	b.n	8008226 <__gethex+0x3fe>
 8008244:	08009c4e 	.word	0x08009c4e

08008248 <L_shift>:
 8008248:	f1c2 0208 	rsb	r2, r2, #8
 800824c:	0092      	lsls	r2, r2, #2
 800824e:	b570      	push	{r4, r5, r6, lr}
 8008250:	f1c2 0620 	rsb	r6, r2, #32
 8008254:	6843      	ldr	r3, [r0, #4]
 8008256:	6804      	ldr	r4, [r0, #0]
 8008258:	fa03 f506 	lsl.w	r5, r3, r6
 800825c:	432c      	orrs	r4, r5
 800825e:	40d3      	lsrs	r3, r2
 8008260:	6004      	str	r4, [r0, #0]
 8008262:	f840 3f04 	str.w	r3, [r0, #4]!
 8008266:	4288      	cmp	r0, r1
 8008268:	d3f4      	bcc.n	8008254 <L_shift+0xc>
 800826a:	bd70      	pop	{r4, r5, r6, pc}

0800826c <__match>:
 800826c:	b530      	push	{r4, r5, lr}
 800826e:	6803      	ldr	r3, [r0, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008276:	b914      	cbnz	r4, 800827e <__match+0x12>
 8008278:	6003      	str	r3, [r0, #0]
 800827a:	2001      	movs	r0, #1
 800827c:	bd30      	pop	{r4, r5, pc}
 800827e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008282:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008286:	2d19      	cmp	r5, #25
 8008288:	bf98      	it	ls
 800828a:	3220      	addls	r2, #32
 800828c:	42a2      	cmp	r2, r4
 800828e:	d0f0      	beq.n	8008272 <__match+0x6>
 8008290:	2000      	movs	r0, #0
 8008292:	e7f3      	b.n	800827c <__match+0x10>

08008294 <__hexnan>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	680b      	ldr	r3, [r1, #0]
 800829a:	6801      	ldr	r1, [r0, #0]
 800829c:	115e      	asrs	r6, r3, #5
 800829e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082a2:	f013 031f 	ands.w	r3, r3, #31
 80082a6:	b087      	sub	sp, #28
 80082a8:	bf18      	it	ne
 80082aa:	3604      	addne	r6, #4
 80082ac:	2500      	movs	r5, #0
 80082ae:	1f37      	subs	r7, r6, #4
 80082b0:	4682      	mov	sl, r0
 80082b2:	4690      	mov	r8, r2
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80082ba:	46b9      	mov	r9, r7
 80082bc:	463c      	mov	r4, r7
 80082be:	9502      	str	r5, [sp, #8]
 80082c0:	46ab      	mov	fp, r5
 80082c2:	784a      	ldrb	r2, [r1, #1]
 80082c4:	1c4b      	adds	r3, r1, #1
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	b342      	cbz	r2, 800831c <__hexnan+0x88>
 80082ca:	4610      	mov	r0, r2
 80082cc:	9105      	str	r1, [sp, #20]
 80082ce:	9204      	str	r2, [sp, #16]
 80082d0:	f7ff fd94 	bl	8007dfc <__hexdig_fun>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d151      	bne.n	800837c <__hexnan+0xe8>
 80082d8:	9a04      	ldr	r2, [sp, #16]
 80082da:	9905      	ldr	r1, [sp, #20]
 80082dc:	2a20      	cmp	r2, #32
 80082de:	d818      	bhi.n	8008312 <__hexnan+0x7e>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	459b      	cmp	fp, r3
 80082e4:	dd13      	ble.n	800830e <__hexnan+0x7a>
 80082e6:	454c      	cmp	r4, r9
 80082e8:	d206      	bcs.n	80082f8 <__hexnan+0x64>
 80082ea:	2d07      	cmp	r5, #7
 80082ec:	dc04      	bgt.n	80082f8 <__hexnan+0x64>
 80082ee:	462a      	mov	r2, r5
 80082f0:	4649      	mov	r1, r9
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff ffa8 	bl	8008248 <L_shift>
 80082f8:	4544      	cmp	r4, r8
 80082fa:	d952      	bls.n	80083a2 <__hexnan+0x10e>
 80082fc:	2300      	movs	r3, #0
 80082fe:	f1a4 0904 	sub.w	r9, r4, #4
 8008302:	f844 3c04 	str.w	r3, [r4, #-4]
 8008306:	f8cd b008 	str.w	fp, [sp, #8]
 800830a:	464c      	mov	r4, r9
 800830c:	461d      	mov	r5, r3
 800830e:	9903      	ldr	r1, [sp, #12]
 8008310:	e7d7      	b.n	80082c2 <__hexnan+0x2e>
 8008312:	2a29      	cmp	r2, #41	@ 0x29
 8008314:	d157      	bne.n	80083c6 <__hexnan+0x132>
 8008316:	3102      	adds	r1, #2
 8008318:	f8ca 1000 	str.w	r1, [sl]
 800831c:	f1bb 0f00 	cmp.w	fp, #0
 8008320:	d051      	beq.n	80083c6 <__hexnan+0x132>
 8008322:	454c      	cmp	r4, r9
 8008324:	d206      	bcs.n	8008334 <__hexnan+0xa0>
 8008326:	2d07      	cmp	r5, #7
 8008328:	dc04      	bgt.n	8008334 <__hexnan+0xa0>
 800832a:	462a      	mov	r2, r5
 800832c:	4649      	mov	r1, r9
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff ff8a 	bl	8008248 <L_shift>
 8008334:	4544      	cmp	r4, r8
 8008336:	d936      	bls.n	80083a6 <__hexnan+0x112>
 8008338:	f1a8 0204 	sub.w	r2, r8, #4
 800833c:	4623      	mov	r3, r4
 800833e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008342:	f842 1f04 	str.w	r1, [r2, #4]!
 8008346:	429f      	cmp	r7, r3
 8008348:	d2f9      	bcs.n	800833e <__hexnan+0xaa>
 800834a:	1b3b      	subs	r3, r7, r4
 800834c:	f023 0303 	bic.w	r3, r3, #3
 8008350:	3304      	adds	r3, #4
 8008352:	3401      	adds	r4, #1
 8008354:	3e03      	subs	r6, #3
 8008356:	42b4      	cmp	r4, r6
 8008358:	bf88      	it	hi
 800835a:	2304      	movhi	r3, #4
 800835c:	4443      	add	r3, r8
 800835e:	2200      	movs	r2, #0
 8008360:	f843 2b04 	str.w	r2, [r3], #4
 8008364:	429f      	cmp	r7, r3
 8008366:	d2fb      	bcs.n	8008360 <__hexnan+0xcc>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	b91b      	cbnz	r3, 8008374 <__hexnan+0xe0>
 800836c:	4547      	cmp	r7, r8
 800836e:	d128      	bne.n	80083c2 <__hexnan+0x12e>
 8008370:	2301      	movs	r3, #1
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	2005      	movs	r0, #5
 8008376:	b007      	add	sp, #28
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	3501      	adds	r5, #1
 800837e:	2d08      	cmp	r5, #8
 8008380:	f10b 0b01 	add.w	fp, fp, #1
 8008384:	dd06      	ble.n	8008394 <__hexnan+0x100>
 8008386:	4544      	cmp	r4, r8
 8008388:	d9c1      	bls.n	800830e <__hexnan+0x7a>
 800838a:	2300      	movs	r3, #0
 800838c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008390:	2501      	movs	r5, #1
 8008392:	3c04      	subs	r4, #4
 8008394:	6822      	ldr	r2, [r4, #0]
 8008396:	f000 000f 	and.w	r0, r0, #15
 800839a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800839e:	6020      	str	r0, [r4, #0]
 80083a0:	e7b5      	b.n	800830e <__hexnan+0x7a>
 80083a2:	2508      	movs	r5, #8
 80083a4:	e7b3      	b.n	800830e <__hexnan+0x7a>
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0dd      	beq.n	8008368 <__hexnan+0xd4>
 80083ac:	f1c3 0320 	rsb	r3, r3, #32
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083b4:	40da      	lsrs	r2, r3
 80083b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80083ba:	4013      	ands	r3, r2
 80083bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80083c0:	e7d2      	b.n	8008368 <__hexnan+0xd4>
 80083c2:	3f04      	subs	r7, #4
 80083c4:	e7d0      	b.n	8008368 <__hexnan+0xd4>
 80083c6:	2004      	movs	r0, #4
 80083c8:	e7d5      	b.n	8008376 <__hexnan+0xe2>
	...

080083cc <sbrk_aligned>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4e0f      	ldr	r6, [pc, #60]	@ (800840c <sbrk_aligned+0x40>)
 80083d0:	460c      	mov	r4, r1
 80083d2:	6831      	ldr	r1, [r6, #0]
 80083d4:	4605      	mov	r5, r0
 80083d6:	b911      	cbnz	r1, 80083de <sbrk_aligned+0x12>
 80083d8:	f000 fe82 	bl	80090e0 <_sbrk_r>
 80083dc:	6030      	str	r0, [r6, #0]
 80083de:	4621      	mov	r1, r4
 80083e0:	4628      	mov	r0, r5
 80083e2:	f000 fe7d 	bl	80090e0 <_sbrk_r>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	d103      	bne.n	80083f2 <sbrk_aligned+0x26>
 80083ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80083ee:	4620      	mov	r0, r4
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
 80083f2:	1cc4      	adds	r4, r0, #3
 80083f4:	f024 0403 	bic.w	r4, r4, #3
 80083f8:	42a0      	cmp	r0, r4
 80083fa:	d0f8      	beq.n	80083ee <sbrk_aligned+0x22>
 80083fc:	1a21      	subs	r1, r4, r0
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 fe6e 	bl	80090e0 <_sbrk_r>
 8008404:	3001      	adds	r0, #1
 8008406:	d1f2      	bne.n	80083ee <sbrk_aligned+0x22>
 8008408:	e7ef      	b.n	80083ea <sbrk_aligned+0x1e>
 800840a:	bf00      	nop
 800840c:	20000754 	.word	0x20000754

08008410 <_malloc_r>:
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008414:	1ccd      	adds	r5, r1, #3
 8008416:	f025 0503 	bic.w	r5, r5, #3
 800841a:	3508      	adds	r5, #8
 800841c:	2d0c      	cmp	r5, #12
 800841e:	bf38      	it	cc
 8008420:	250c      	movcc	r5, #12
 8008422:	2d00      	cmp	r5, #0
 8008424:	4606      	mov	r6, r0
 8008426:	db01      	blt.n	800842c <_malloc_r+0x1c>
 8008428:	42a9      	cmp	r1, r5
 800842a:	d904      	bls.n	8008436 <_malloc_r+0x26>
 800842c:	230c      	movs	r3, #12
 800842e:	6033      	str	r3, [r6, #0]
 8008430:	2000      	movs	r0, #0
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800850c <_malloc_r+0xfc>
 800843a:	f000 f927 	bl	800868c <__malloc_lock>
 800843e:	f8d8 3000 	ldr.w	r3, [r8]
 8008442:	461c      	mov	r4, r3
 8008444:	bb44      	cbnz	r4, 8008498 <_malloc_r+0x88>
 8008446:	4629      	mov	r1, r5
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff ffbf 	bl	80083cc <sbrk_aligned>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	4604      	mov	r4, r0
 8008452:	d158      	bne.n	8008506 <_malloc_r+0xf6>
 8008454:	f8d8 4000 	ldr.w	r4, [r8]
 8008458:	4627      	mov	r7, r4
 800845a:	2f00      	cmp	r7, #0
 800845c:	d143      	bne.n	80084e6 <_malloc_r+0xd6>
 800845e:	2c00      	cmp	r4, #0
 8008460:	d04b      	beq.n	80084fa <_malloc_r+0xea>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	4639      	mov	r1, r7
 8008466:	4630      	mov	r0, r6
 8008468:	eb04 0903 	add.w	r9, r4, r3
 800846c:	f000 fe38 	bl	80090e0 <_sbrk_r>
 8008470:	4581      	cmp	r9, r0
 8008472:	d142      	bne.n	80084fa <_malloc_r+0xea>
 8008474:	6821      	ldr	r1, [r4, #0]
 8008476:	1a6d      	subs	r5, r5, r1
 8008478:	4629      	mov	r1, r5
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ffa6 	bl	80083cc <sbrk_aligned>
 8008480:	3001      	adds	r0, #1
 8008482:	d03a      	beq.n	80084fa <_malloc_r+0xea>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	442b      	add	r3, r5
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	f8d8 3000 	ldr.w	r3, [r8]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	bb62      	cbnz	r2, 80084ec <_malloc_r+0xdc>
 8008492:	f8c8 7000 	str.w	r7, [r8]
 8008496:	e00f      	b.n	80084b8 <_malloc_r+0xa8>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	1b52      	subs	r2, r2, r5
 800849c:	d420      	bmi.n	80084e0 <_malloc_r+0xd0>
 800849e:	2a0b      	cmp	r2, #11
 80084a0:	d917      	bls.n	80084d2 <_malloc_r+0xc2>
 80084a2:	1961      	adds	r1, r4, r5
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	6025      	str	r5, [r4, #0]
 80084a8:	bf18      	it	ne
 80084aa:	6059      	strne	r1, [r3, #4]
 80084ac:	6863      	ldr	r3, [r4, #4]
 80084ae:	bf08      	it	eq
 80084b0:	f8c8 1000 	streq.w	r1, [r8]
 80084b4:	5162      	str	r2, [r4, r5]
 80084b6:	604b      	str	r3, [r1, #4]
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f8ed 	bl	8008698 <__malloc_unlock>
 80084be:	f104 000b 	add.w	r0, r4, #11
 80084c2:	1d23      	adds	r3, r4, #4
 80084c4:	f020 0007 	bic.w	r0, r0, #7
 80084c8:	1ac2      	subs	r2, r0, r3
 80084ca:	bf1c      	itt	ne
 80084cc:	1a1b      	subne	r3, r3, r0
 80084ce:	50a3      	strne	r3, [r4, r2]
 80084d0:	e7af      	b.n	8008432 <_malloc_r+0x22>
 80084d2:	6862      	ldr	r2, [r4, #4]
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	bf0c      	ite	eq
 80084d8:	f8c8 2000 	streq.w	r2, [r8]
 80084dc:	605a      	strne	r2, [r3, #4]
 80084de:	e7eb      	b.n	80084b8 <_malloc_r+0xa8>
 80084e0:	4623      	mov	r3, r4
 80084e2:	6864      	ldr	r4, [r4, #4]
 80084e4:	e7ae      	b.n	8008444 <_malloc_r+0x34>
 80084e6:	463c      	mov	r4, r7
 80084e8:	687f      	ldr	r7, [r7, #4]
 80084ea:	e7b6      	b.n	800845a <_malloc_r+0x4a>
 80084ec:	461a      	mov	r2, r3
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	d1fb      	bne.n	80084ec <_malloc_r+0xdc>
 80084f4:	2300      	movs	r3, #0
 80084f6:	6053      	str	r3, [r2, #4]
 80084f8:	e7de      	b.n	80084b8 <_malloc_r+0xa8>
 80084fa:	230c      	movs	r3, #12
 80084fc:	6033      	str	r3, [r6, #0]
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f8ca 	bl	8008698 <__malloc_unlock>
 8008504:	e794      	b.n	8008430 <_malloc_r+0x20>
 8008506:	6005      	str	r5, [r0, #0]
 8008508:	e7d6      	b.n	80084b8 <_malloc_r+0xa8>
 800850a:	bf00      	nop
 800850c:	20000758 	.word	0x20000758

08008510 <__ascii_mbtowc>:
 8008510:	b082      	sub	sp, #8
 8008512:	b901      	cbnz	r1, 8008516 <__ascii_mbtowc+0x6>
 8008514:	a901      	add	r1, sp, #4
 8008516:	b142      	cbz	r2, 800852a <__ascii_mbtowc+0x1a>
 8008518:	b14b      	cbz	r3, 800852e <__ascii_mbtowc+0x1e>
 800851a:	7813      	ldrb	r3, [r2, #0]
 800851c:	600b      	str	r3, [r1, #0]
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	1e10      	subs	r0, r2, #0
 8008522:	bf18      	it	ne
 8008524:	2001      	movne	r0, #1
 8008526:	b002      	add	sp, #8
 8008528:	4770      	bx	lr
 800852a:	4610      	mov	r0, r2
 800852c:	e7fb      	b.n	8008526 <__ascii_mbtowc+0x16>
 800852e:	f06f 0001 	mvn.w	r0, #1
 8008532:	e7f8      	b.n	8008526 <__ascii_mbtowc+0x16>

08008534 <__sflush_r>:
 8008534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853c:	0716      	lsls	r6, r2, #28
 800853e:	4605      	mov	r5, r0
 8008540:	460c      	mov	r4, r1
 8008542:	d454      	bmi.n	80085ee <__sflush_r+0xba>
 8008544:	684b      	ldr	r3, [r1, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	dc02      	bgt.n	8008550 <__sflush_r+0x1c>
 800854a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd48      	ble.n	80085e2 <__sflush_r+0xae>
 8008550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008552:	2e00      	cmp	r6, #0
 8008554:	d045      	beq.n	80085e2 <__sflush_r+0xae>
 8008556:	2300      	movs	r3, #0
 8008558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800855c:	682f      	ldr	r7, [r5, #0]
 800855e:	6a21      	ldr	r1, [r4, #32]
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	d030      	beq.n	80085c6 <__sflush_r+0x92>
 8008564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	0759      	lsls	r1, r3, #29
 800856a:	d505      	bpl.n	8008578 <__sflush_r+0x44>
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008572:	b10b      	cbz	r3, 8008578 <__sflush_r+0x44>
 8008574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	2300      	movs	r3, #0
 800857a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800857c:	6a21      	ldr	r1, [r4, #32]
 800857e:	4628      	mov	r0, r5
 8008580:	47b0      	blx	r6
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	d106      	bne.n	8008596 <__sflush_r+0x62>
 8008588:	6829      	ldr	r1, [r5, #0]
 800858a:	291d      	cmp	r1, #29
 800858c:	d82b      	bhi.n	80085e6 <__sflush_r+0xb2>
 800858e:	4a2a      	ldr	r2, [pc, #168]	@ (8008638 <__sflush_r+0x104>)
 8008590:	40ca      	lsrs	r2, r1
 8008592:	07d6      	lsls	r6, r2, #31
 8008594:	d527      	bpl.n	80085e6 <__sflush_r+0xb2>
 8008596:	2200      	movs	r2, #0
 8008598:	6062      	str	r2, [r4, #4]
 800859a:	04d9      	lsls	r1, r3, #19
 800859c:	6922      	ldr	r2, [r4, #16]
 800859e:	6022      	str	r2, [r4, #0]
 80085a0:	d504      	bpl.n	80085ac <__sflush_r+0x78>
 80085a2:	1c42      	adds	r2, r0, #1
 80085a4:	d101      	bne.n	80085aa <__sflush_r+0x76>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	b903      	cbnz	r3, 80085ac <__sflush_r+0x78>
 80085aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80085ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ae:	602f      	str	r7, [r5, #0]
 80085b0:	b1b9      	cbz	r1, 80085e2 <__sflush_r+0xae>
 80085b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085b6:	4299      	cmp	r1, r3
 80085b8:	d002      	beq.n	80085c0 <__sflush_r+0x8c>
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 fdf4 	bl	80091a8 <_free_r>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c4:	e00d      	b.n	80085e2 <__sflush_r+0xae>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b0      	blx	r6
 80085cc:	4602      	mov	r2, r0
 80085ce:	1c50      	adds	r0, r2, #1
 80085d0:	d1c9      	bne.n	8008566 <__sflush_r+0x32>
 80085d2:	682b      	ldr	r3, [r5, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0c6      	beq.n	8008566 <__sflush_r+0x32>
 80085d8:	2b1d      	cmp	r3, #29
 80085da:	d001      	beq.n	80085e0 <__sflush_r+0xac>
 80085dc:	2b16      	cmp	r3, #22
 80085de:	d11e      	bne.n	800861e <__sflush_r+0xea>
 80085e0:	602f      	str	r7, [r5, #0]
 80085e2:	2000      	movs	r0, #0
 80085e4:	e022      	b.n	800862c <__sflush_r+0xf8>
 80085e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ea:	b21b      	sxth	r3, r3
 80085ec:	e01b      	b.n	8008626 <__sflush_r+0xf2>
 80085ee:	690f      	ldr	r7, [r1, #16]
 80085f0:	2f00      	cmp	r7, #0
 80085f2:	d0f6      	beq.n	80085e2 <__sflush_r+0xae>
 80085f4:	0793      	lsls	r3, r2, #30
 80085f6:	680e      	ldr	r6, [r1, #0]
 80085f8:	bf08      	it	eq
 80085fa:	694b      	ldreq	r3, [r1, #20]
 80085fc:	600f      	str	r7, [r1, #0]
 80085fe:	bf18      	it	ne
 8008600:	2300      	movne	r3, #0
 8008602:	eba6 0807 	sub.w	r8, r6, r7
 8008606:	608b      	str	r3, [r1, #8]
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	dde9      	ble.n	80085e2 <__sflush_r+0xae>
 800860e:	6a21      	ldr	r1, [r4, #32]
 8008610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008612:	4643      	mov	r3, r8
 8008614:	463a      	mov	r2, r7
 8008616:	4628      	mov	r0, r5
 8008618:	47b0      	blx	r6
 800861a:	2800      	cmp	r0, #0
 800861c:	dc08      	bgt.n	8008630 <__sflush_r+0xfc>
 800861e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	4407      	add	r7, r0
 8008632:	eba8 0800 	sub.w	r8, r8, r0
 8008636:	e7e7      	b.n	8008608 <__sflush_r+0xd4>
 8008638:	20400001 	.word	0x20400001

0800863c <_fflush_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	690b      	ldr	r3, [r1, #16]
 8008640:	4605      	mov	r5, r0
 8008642:	460c      	mov	r4, r1
 8008644:	b913      	cbnz	r3, 800864c <_fflush_r+0x10>
 8008646:	2500      	movs	r5, #0
 8008648:	4628      	mov	r0, r5
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	b118      	cbz	r0, 8008656 <_fflush_r+0x1a>
 800864e:	6a03      	ldr	r3, [r0, #32]
 8008650:	b90b      	cbnz	r3, 8008656 <_fflush_r+0x1a>
 8008652:	f7fe fccf 	bl	8006ff4 <__sinit>
 8008656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f3      	beq.n	8008646 <_fflush_r+0xa>
 800865e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008660:	07d0      	lsls	r0, r2, #31
 8008662:	d404      	bmi.n	800866e <_fflush_r+0x32>
 8008664:	0599      	lsls	r1, r3, #22
 8008666:	d402      	bmi.n	800866e <_fflush_r+0x32>
 8008668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800866a:	f7ff fb5a 	bl	8007d22 <__retarget_lock_acquire_recursive>
 800866e:	4628      	mov	r0, r5
 8008670:	4621      	mov	r1, r4
 8008672:	f7ff ff5f 	bl	8008534 <__sflush_r>
 8008676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008678:	07da      	lsls	r2, r3, #31
 800867a:	4605      	mov	r5, r0
 800867c:	d4e4      	bmi.n	8008648 <_fflush_r+0xc>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	059b      	lsls	r3, r3, #22
 8008682:	d4e1      	bmi.n	8008648 <_fflush_r+0xc>
 8008684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008686:	f7ff fb4d 	bl	8007d24 <__retarget_lock_release_recursive>
 800868a:	e7dd      	b.n	8008648 <_fflush_r+0xc>

0800868c <__malloc_lock>:
 800868c:	4801      	ldr	r0, [pc, #4]	@ (8008694 <__malloc_lock+0x8>)
 800868e:	f7ff bb48 	b.w	8007d22 <__retarget_lock_acquire_recursive>
 8008692:	bf00      	nop
 8008694:	20000750 	.word	0x20000750

08008698 <__malloc_unlock>:
 8008698:	4801      	ldr	r0, [pc, #4]	@ (80086a0 <__malloc_unlock+0x8>)
 800869a:	f7ff bb43 	b.w	8007d24 <__retarget_lock_release_recursive>
 800869e:	bf00      	nop
 80086a0:	20000750 	.word	0x20000750

080086a4 <_Balloc>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	69c6      	ldr	r6, [r0, #28]
 80086a8:	4604      	mov	r4, r0
 80086aa:	460d      	mov	r5, r1
 80086ac:	b976      	cbnz	r6, 80086cc <_Balloc+0x28>
 80086ae:	2010      	movs	r0, #16
 80086b0:	f000 fdc4 	bl	800923c <malloc>
 80086b4:	4602      	mov	r2, r0
 80086b6:	61e0      	str	r0, [r4, #28]
 80086b8:	b920      	cbnz	r0, 80086c4 <_Balloc+0x20>
 80086ba:	4b18      	ldr	r3, [pc, #96]	@ (800871c <_Balloc+0x78>)
 80086bc:	4818      	ldr	r0, [pc, #96]	@ (8008720 <_Balloc+0x7c>)
 80086be:	216b      	movs	r1, #107	@ 0x6b
 80086c0:	f000 fd40 	bl	8009144 <__assert_func>
 80086c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086c8:	6006      	str	r6, [r0, #0]
 80086ca:	60c6      	str	r6, [r0, #12]
 80086cc:	69e6      	ldr	r6, [r4, #28]
 80086ce:	68f3      	ldr	r3, [r6, #12]
 80086d0:	b183      	cbz	r3, 80086f4 <_Balloc+0x50>
 80086d2:	69e3      	ldr	r3, [r4, #28]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086da:	b9b8      	cbnz	r0, 800870c <_Balloc+0x68>
 80086dc:	2101      	movs	r1, #1
 80086de:	fa01 f605 	lsl.w	r6, r1, r5
 80086e2:	1d72      	adds	r2, r6, #5
 80086e4:	0092      	lsls	r2, r2, #2
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fd4a 	bl	8009180 <_calloc_r>
 80086ec:	b160      	cbz	r0, 8008708 <_Balloc+0x64>
 80086ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086f2:	e00e      	b.n	8008712 <_Balloc+0x6e>
 80086f4:	2221      	movs	r2, #33	@ 0x21
 80086f6:	2104      	movs	r1, #4
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fd41 	bl	8009180 <_calloc_r>
 80086fe:	69e3      	ldr	r3, [r4, #28]
 8008700:	60f0      	str	r0, [r6, #12]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e4      	bne.n	80086d2 <_Balloc+0x2e>
 8008708:	2000      	movs	r0, #0
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	6802      	ldr	r2, [r0, #0]
 800870e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008712:	2300      	movs	r3, #0
 8008714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008718:	e7f7      	b.n	800870a <_Balloc+0x66>
 800871a:	bf00      	nop
 800871c:	08009cbf 	.word	0x08009cbf
 8008720:	08009cd6 	.word	0x08009cd6

08008724 <_Bfree>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	69c6      	ldr	r6, [r0, #28]
 8008728:	4605      	mov	r5, r0
 800872a:	460c      	mov	r4, r1
 800872c:	b976      	cbnz	r6, 800874c <_Bfree+0x28>
 800872e:	2010      	movs	r0, #16
 8008730:	f000 fd84 	bl	800923c <malloc>
 8008734:	4602      	mov	r2, r0
 8008736:	61e8      	str	r0, [r5, #28]
 8008738:	b920      	cbnz	r0, 8008744 <_Bfree+0x20>
 800873a:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <_Bfree+0x3c>)
 800873c:	4809      	ldr	r0, [pc, #36]	@ (8008764 <_Bfree+0x40>)
 800873e:	218f      	movs	r1, #143	@ 0x8f
 8008740:	f000 fd00 	bl	8009144 <__assert_func>
 8008744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008748:	6006      	str	r6, [r0, #0]
 800874a:	60c6      	str	r6, [r0, #12]
 800874c:	b13c      	cbz	r4, 800875e <_Bfree+0x3a>
 800874e:	69eb      	ldr	r3, [r5, #28]
 8008750:	6862      	ldr	r2, [r4, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008758:	6021      	str	r1, [r4, #0]
 800875a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	08009cbf 	.word	0x08009cbf
 8008764:	08009cd6 	.word	0x08009cd6

08008768 <__multadd>:
 8008768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	690d      	ldr	r5, [r1, #16]
 800876e:	4607      	mov	r7, r0
 8008770:	460c      	mov	r4, r1
 8008772:	461e      	mov	r6, r3
 8008774:	f101 0c14 	add.w	ip, r1, #20
 8008778:	2000      	movs	r0, #0
 800877a:	f8dc 3000 	ldr.w	r3, [ip]
 800877e:	b299      	uxth	r1, r3
 8008780:	fb02 6101 	mla	r1, r2, r1, r6
 8008784:	0c1e      	lsrs	r6, r3, #16
 8008786:	0c0b      	lsrs	r3, r1, #16
 8008788:	fb02 3306 	mla	r3, r2, r6, r3
 800878c:	b289      	uxth	r1, r1
 800878e:	3001      	adds	r0, #1
 8008790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008794:	4285      	cmp	r5, r0
 8008796:	f84c 1b04 	str.w	r1, [ip], #4
 800879a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800879e:	dcec      	bgt.n	800877a <__multadd+0x12>
 80087a0:	b30e      	cbz	r6, 80087e6 <__multadd+0x7e>
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	dc19      	bgt.n	80087dc <__multadd+0x74>
 80087a8:	6861      	ldr	r1, [r4, #4]
 80087aa:	4638      	mov	r0, r7
 80087ac:	3101      	adds	r1, #1
 80087ae:	f7ff ff79 	bl	80086a4 <_Balloc>
 80087b2:	4680      	mov	r8, r0
 80087b4:	b928      	cbnz	r0, 80087c2 <__multadd+0x5a>
 80087b6:	4602      	mov	r2, r0
 80087b8:	4b0c      	ldr	r3, [pc, #48]	@ (80087ec <__multadd+0x84>)
 80087ba:	480d      	ldr	r0, [pc, #52]	@ (80087f0 <__multadd+0x88>)
 80087bc:	21ba      	movs	r1, #186	@ 0xba
 80087be:	f000 fcc1 	bl	8009144 <__assert_func>
 80087c2:	6922      	ldr	r2, [r4, #16]
 80087c4:	3202      	adds	r2, #2
 80087c6:	f104 010c 	add.w	r1, r4, #12
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	300c      	adds	r0, #12
 80087ce:	f7ff faaa 	bl	8007d26 <memcpy>
 80087d2:	4621      	mov	r1, r4
 80087d4:	4638      	mov	r0, r7
 80087d6:	f7ff ffa5 	bl	8008724 <_Bfree>
 80087da:	4644      	mov	r4, r8
 80087dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087e0:	3501      	adds	r5, #1
 80087e2:	615e      	str	r6, [r3, #20]
 80087e4:	6125      	str	r5, [r4, #16]
 80087e6:	4620      	mov	r0, r4
 80087e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ec:	08009c4e 	.word	0x08009c4e
 80087f0:	08009cd6 	.word	0x08009cd6

080087f4 <__s2b>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	460c      	mov	r4, r1
 80087fa:	4615      	mov	r5, r2
 80087fc:	461f      	mov	r7, r3
 80087fe:	2209      	movs	r2, #9
 8008800:	3308      	adds	r3, #8
 8008802:	4606      	mov	r6, r0
 8008804:	fb93 f3f2 	sdiv	r3, r3, r2
 8008808:	2100      	movs	r1, #0
 800880a:	2201      	movs	r2, #1
 800880c:	429a      	cmp	r2, r3
 800880e:	db09      	blt.n	8008824 <__s2b+0x30>
 8008810:	4630      	mov	r0, r6
 8008812:	f7ff ff47 	bl	80086a4 <_Balloc>
 8008816:	b940      	cbnz	r0, 800882a <__s2b+0x36>
 8008818:	4602      	mov	r2, r0
 800881a:	4b19      	ldr	r3, [pc, #100]	@ (8008880 <__s2b+0x8c>)
 800881c:	4819      	ldr	r0, [pc, #100]	@ (8008884 <__s2b+0x90>)
 800881e:	21d3      	movs	r1, #211	@ 0xd3
 8008820:	f000 fc90 	bl	8009144 <__assert_func>
 8008824:	0052      	lsls	r2, r2, #1
 8008826:	3101      	adds	r1, #1
 8008828:	e7f0      	b.n	800880c <__s2b+0x18>
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	6143      	str	r3, [r0, #20]
 800882e:	2d09      	cmp	r5, #9
 8008830:	f04f 0301 	mov.w	r3, #1
 8008834:	6103      	str	r3, [r0, #16]
 8008836:	dd16      	ble.n	8008866 <__s2b+0x72>
 8008838:	f104 0909 	add.w	r9, r4, #9
 800883c:	46c8      	mov	r8, r9
 800883e:	442c      	add	r4, r5
 8008840:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008844:	4601      	mov	r1, r0
 8008846:	3b30      	subs	r3, #48	@ 0x30
 8008848:	220a      	movs	r2, #10
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ff8c 	bl	8008768 <__multadd>
 8008850:	45a0      	cmp	r8, r4
 8008852:	d1f5      	bne.n	8008840 <__s2b+0x4c>
 8008854:	f1a5 0408 	sub.w	r4, r5, #8
 8008858:	444c      	add	r4, r9
 800885a:	1b2d      	subs	r5, r5, r4
 800885c:	1963      	adds	r3, r4, r5
 800885e:	42bb      	cmp	r3, r7
 8008860:	db04      	blt.n	800886c <__s2b+0x78>
 8008862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008866:	340a      	adds	r4, #10
 8008868:	2509      	movs	r5, #9
 800886a:	e7f6      	b.n	800885a <__s2b+0x66>
 800886c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008870:	4601      	mov	r1, r0
 8008872:	3b30      	subs	r3, #48	@ 0x30
 8008874:	220a      	movs	r2, #10
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ff76 	bl	8008768 <__multadd>
 800887c:	e7ee      	b.n	800885c <__s2b+0x68>
 800887e:	bf00      	nop
 8008880:	08009c4e 	.word	0x08009c4e
 8008884:	08009cd6 	.word	0x08009cd6

08008888 <__hi0bits>:
 8008888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800888c:	4603      	mov	r3, r0
 800888e:	bf36      	itet	cc
 8008890:	0403      	lslcc	r3, r0, #16
 8008892:	2000      	movcs	r0, #0
 8008894:	2010      	movcc	r0, #16
 8008896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800889a:	bf3c      	itt	cc
 800889c:	021b      	lslcc	r3, r3, #8
 800889e:	3008      	addcc	r0, #8
 80088a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088a4:	bf3c      	itt	cc
 80088a6:	011b      	lslcc	r3, r3, #4
 80088a8:	3004      	addcc	r0, #4
 80088aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ae:	bf3c      	itt	cc
 80088b0:	009b      	lslcc	r3, r3, #2
 80088b2:	3002      	addcc	r0, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db05      	blt.n	80088c4 <__hi0bits+0x3c>
 80088b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088bc:	f100 0001 	add.w	r0, r0, #1
 80088c0:	bf08      	it	eq
 80088c2:	2020      	moveq	r0, #32
 80088c4:	4770      	bx	lr

080088c6 <__lo0bits>:
 80088c6:	6803      	ldr	r3, [r0, #0]
 80088c8:	4602      	mov	r2, r0
 80088ca:	f013 0007 	ands.w	r0, r3, #7
 80088ce:	d00b      	beq.n	80088e8 <__lo0bits+0x22>
 80088d0:	07d9      	lsls	r1, r3, #31
 80088d2:	d421      	bmi.n	8008918 <__lo0bits+0x52>
 80088d4:	0798      	lsls	r0, r3, #30
 80088d6:	bf49      	itett	mi
 80088d8:	085b      	lsrmi	r3, r3, #1
 80088da:	089b      	lsrpl	r3, r3, #2
 80088dc:	2001      	movmi	r0, #1
 80088de:	6013      	strmi	r3, [r2, #0]
 80088e0:	bf5c      	itt	pl
 80088e2:	6013      	strpl	r3, [r2, #0]
 80088e4:	2002      	movpl	r0, #2
 80088e6:	4770      	bx	lr
 80088e8:	b299      	uxth	r1, r3
 80088ea:	b909      	cbnz	r1, 80088f0 <__lo0bits+0x2a>
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	2010      	movs	r0, #16
 80088f0:	b2d9      	uxtb	r1, r3
 80088f2:	b909      	cbnz	r1, 80088f8 <__lo0bits+0x32>
 80088f4:	3008      	adds	r0, #8
 80088f6:	0a1b      	lsrs	r3, r3, #8
 80088f8:	0719      	lsls	r1, r3, #28
 80088fa:	bf04      	itt	eq
 80088fc:	091b      	lsreq	r3, r3, #4
 80088fe:	3004      	addeq	r0, #4
 8008900:	0799      	lsls	r1, r3, #30
 8008902:	bf04      	itt	eq
 8008904:	089b      	lsreq	r3, r3, #2
 8008906:	3002      	addeq	r0, #2
 8008908:	07d9      	lsls	r1, r3, #31
 800890a:	d403      	bmi.n	8008914 <__lo0bits+0x4e>
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	f100 0001 	add.w	r0, r0, #1
 8008912:	d003      	beq.n	800891c <__lo0bits+0x56>
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	4770      	bx	lr
 8008918:	2000      	movs	r0, #0
 800891a:	4770      	bx	lr
 800891c:	2020      	movs	r0, #32
 800891e:	4770      	bx	lr

08008920 <__i2b>:
 8008920:	b510      	push	{r4, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	2101      	movs	r1, #1
 8008926:	f7ff febd 	bl	80086a4 <_Balloc>
 800892a:	4602      	mov	r2, r0
 800892c:	b928      	cbnz	r0, 800893a <__i2b+0x1a>
 800892e:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <__i2b+0x24>)
 8008930:	4805      	ldr	r0, [pc, #20]	@ (8008948 <__i2b+0x28>)
 8008932:	f240 1145 	movw	r1, #325	@ 0x145
 8008936:	f000 fc05 	bl	8009144 <__assert_func>
 800893a:	2301      	movs	r3, #1
 800893c:	6144      	str	r4, [r0, #20]
 800893e:	6103      	str	r3, [r0, #16]
 8008940:	bd10      	pop	{r4, pc}
 8008942:	bf00      	nop
 8008944:	08009c4e 	.word	0x08009c4e
 8008948:	08009cd6 	.word	0x08009cd6

0800894c <__multiply>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	4617      	mov	r7, r2
 8008952:	690a      	ldr	r2, [r1, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	429a      	cmp	r2, r3
 8008958:	bfa8      	it	ge
 800895a:	463b      	movge	r3, r7
 800895c:	4689      	mov	r9, r1
 800895e:	bfa4      	itt	ge
 8008960:	460f      	movge	r7, r1
 8008962:	4699      	movge	r9, r3
 8008964:	693d      	ldr	r5, [r7, #16]
 8008966:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	eb05 060a 	add.w	r6, r5, sl
 8008972:	42b3      	cmp	r3, r6
 8008974:	b085      	sub	sp, #20
 8008976:	bfb8      	it	lt
 8008978:	3101      	addlt	r1, #1
 800897a:	f7ff fe93 	bl	80086a4 <_Balloc>
 800897e:	b930      	cbnz	r0, 800898e <__multiply+0x42>
 8008980:	4602      	mov	r2, r0
 8008982:	4b41      	ldr	r3, [pc, #260]	@ (8008a88 <__multiply+0x13c>)
 8008984:	4841      	ldr	r0, [pc, #260]	@ (8008a8c <__multiply+0x140>)
 8008986:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800898a:	f000 fbdb 	bl	8009144 <__assert_func>
 800898e:	f100 0414 	add.w	r4, r0, #20
 8008992:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008996:	4623      	mov	r3, r4
 8008998:	2200      	movs	r2, #0
 800899a:	4573      	cmp	r3, lr
 800899c:	d320      	bcc.n	80089e0 <__multiply+0x94>
 800899e:	f107 0814 	add.w	r8, r7, #20
 80089a2:	f109 0114 	add.w	r1, r9, #20
 80089a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80089aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80089ae:	9302      	str	r3, [sp, #8]
 80089b0:	1beb      	subs	r3, r5, r7
 80089b2:	3b15      	subs	r3, #21
 80089b4:	f023 0303 	bic.w	r3, r3, #3
 80089b8:	3304      	adds	r3, #4
 80089ba:	3715      	adds	r7, #21
 80089bc:	42bd      	cmp	r5, r7
 80089be:	bf38      	it	cc
 80089c0:	2304      	movcc	r3, #4
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	9b02      	ldr	r3, [sp, #8]
 80089c6:	9103      	str	r1, [sp, #12]
 80089c8:	428b      	cmp	r3, r1
 80089ca:	d80c      	bhi.n	80089e6 <__multiply+0x9a>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	dd03      	ble.n	80089d8 <__multiply+0x8c>
 80089d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d055      	beq.n	8008a84 <__multiply+0x138>
 80089d8:	6106      	str	r6, [r0, #16]
 80089da:	b005      	add	sp, #20
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	f843 2b04 	str.w	r2, [r3], #4
 80089e4:	e7d9      	b.n	800899a <__multiply+0x4e>
 80089e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80089ea:	f1ba 0f00 	cmp.w	sl, #0
 80089ee:	d01f      	beq.n	8008a30 <__multiply+0xe4>
 80089f0:	46c4      	mov	ip, r8
 80089f2:	46a1      	mov	r9, r4
 80089f4:	2700      	movs	r7, #0
 80089f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089fa:	f8d9 3000 	ldr.w	r3, [r9]
 80089fe:	fa1f fb82 	uxth.w	fp, r2
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a08:	443b      	add	r3, r7
 8008a0a:	f8d9 7000 	ldr.w	r7, [r9]
 8008a0e:	0c12      	lsrs	r2, r2, #16
 8008a10:	0c3f      	lsrs	r7, r7, #16
 8008a12:	fb0a 7202 	mla	r2, sl, r2, r7
 8008a16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a20:	4565      	cmp	r5, ip
 8008a22:	f849 3b04 	str.w	r3, [r9], #4
 8008a26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008a2a:	d8e4      	bhi.n	80089f6 <__multiply+0xaa>
 8008a2c:	9b01      	ldr	r3, [sp, #4]
 8008a2e:	50e7      	str	r7, [r4, r3]
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a36:	3104      	adds	r1, #4
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	d020      	beq.n	8008a80 <__multiply+0x134>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4647      	mov	r7, r8
 8008a42:	46a4      	mov	ip, r4
 8008a44:	f04f 0a00 	mov.w	sl, #0
 8008a48:	f8b7 b000 	ldrh.w	fp, [r7]
 8008a4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008a50:	fb09 220b 	mla	r2, r9, fp, r2
 8008a54:	4452      	add	r2, sl
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a5c:	f84c 3b04 	str.w	r3, [ip], #4
 8008a60:	f857 3b04 	ldr.w	r3, [r7], #4
 8008a64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a68:	f8bc 3000 	ldrh.w	r3, [ip]
 8008a6c:	fb09 330a 	mla	r3, r9, sl, r3
 8008a70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008a74:	42bd      	cmp	r5, r7
 8008a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a7a:	d8e5      	bhi.n	8008a48 <__multiply+0xfc>
 8008a7c:	9a01      	ldr	r2, [sp, #4]
 8008a7e:	50a3      	str	r3, [r4, r2]
 8008a80:	3404      	adds	r4, #4
 8008a82:	e79f      	b.n	80089c4 <__multiply+0x78>
 8008a84:	3e01      	subs	r6, #1
 8008a86:	e7a1      	b.n	80089cc <__multiply+0x80>
 8008a88:	08009c4e 	.word	0x08009c4e
 8008a8c:	08009cd6 	.word	0x08009cd6

08008a90 <__pow5mult>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	4615      	mov	r5, r2
 8008a96:	f012 0203 	ands.w	r2, r2, #3
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	d007      	beq.n	8008ab0 <__pow5mult+0x20>
 8008aa0:	4c25      	ldr	r4, [pc, #148]	@ (8008b38 <__pow5mult+0xa8>)
 8008aa2:	3a01      	subs	r2, #1
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008aaa:	f7ff fe5d 	bl	8008768 <__multadd>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	10ad      	asrs	r5, r5, #2
 8008ab2:	d03d      	beq.n	8008b30 <__pow5mult+0xa0>
 8008ab4:	69fc      	ldr	r4, [r7, #28]
 8008ab6:	b97c      	cbnz	r4, 8008ad8 <__pow5mult+0x48>
 8008ab8:	2010      	movs	r0, #16
 8008aba:	f000 fbbf 	bl	800923c <malloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	61f8      	str	r0, [r7, #28]
 8008ac2:	b928      	cbnz	r0, 8008ad0 <__pow5mult+0x40>
 8008ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8008b3c <__pow5mult+0xac>)
 8008ac6:	481e      	ldr	r0, [pc, #120]	@ (8008b40 <__pow5mult+0xb0>)
 8008ac8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008acc:	f000 fb3a 	bl	8009144 <__assert_func>
 8008ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ad4:	6004      	str	r4, [r0, #0]
 8008ad6:	60c4      	str	r4, [r0, #12]
 8008ad8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ae0:	b94c      	cbnz	r4, 8008af6 <__pow5mult+0x66>
 8008ae2:	f240 2171 	movw	r1, #625	@ 0x271
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	f7ff ff1a 	bl	8008920 <__i2b>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008af2:	4604      	mov	r4, r0
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	f04f 0900 	mov.w	r9, #0
 8008afa:	07eb      	lsls	r3, r5, #31
 8008afc:	d50a      	bpl.n	8008b14 <__pow5mult+0x84>
 8008afe:	4631      	mov	r1, r6
 8008b00:	4622      	mov	r2, r4
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7ff ff22 	bl	800894c <__multiply>
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff fe09 	bl	8008724 <_Bfree>
 8008b12:	4646      	mov	r6, r8
 8008b14:	106d      	asrs	r5, r5, #1
 8008b16:	d00b      	beq.n	8008b30 <__pow5mult+0xa0>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	b938      	cbnz	r0, 8008b2c <__pow5mult+0x9c>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4638      	mov	r0, r7
 8008b22:	f7ff ff13 	bl	800894c <__multiply>
 8008b26:	6020      	str	r0, [r4, #0]
 8008b28:	f8c0 9000 	str.w	r9, [r0]
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	e7e4      	b.n	8008afa <__pow5mult+0x6a>
 8008b30:	4630      	mov	r0, r6
 8008b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b36:	bf00      	nop
 8008b38:	08009ef4 	.word	0x08009ef4
 8008b3c:	08009cbf 	.word	0x08009cbf
 8008b40:	08009cd6 	.word	0x08009cd6

08008b44 <__lshift>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	460c      	mov	r4, r1
 8008b4a:	6849      	ldr	r1, [r1, #4]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	4607      	mov	r7, r0
 8008b56:	4691      	mov	r9, r2
 8008b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b5c:	f108 0601 	add.w	r6, r8, #1
 8008b60:	42b3      	cmp	r3, r6
 8008b62:	db0b      	blt.n	8008b7c <__lshift+0x38>
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7ff fd9d 	bl	80086a4 <_Balloc>
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	b948      	cbnz	r0, 8008b82 <__lshift+0x3e>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b28      	ldr	r3, [pc, #160]	@ (8008c14 <__lshift+0xd0>)
 8008b72:	4829      	ldr	r0, [pc, #164]	@ (8008c18 <__lshift+0xd4>)
 8008b74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b78:	f000 fae4 	bl	8009144 <__assert_func>
 8008b7c:	3101      	adds	r1, #1
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	e7ee      	b.n	8008b60 <__lshift+0x1c>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f100 0114 	add.w	r1, r0, #20
 8008b88:	f100 0210 	add.w	r2, r0, #16
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	4553      	cmp	r3, sl
 8008b90:	db33      	blt.n	8008bfa <__lshift+0xb6>
 8008b92:	6920      	ldr	r0, [r4, #16]
 8008b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b98:	f104 0314 	add.w	r3, r4, #20
 8008b9c:	f019 091f 	ands.w	r9, r9, #31
 8008ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ba8:	d02b      	beq.n	8008c02 <__lshift+0xbe>
 8008baa:	f1c9 0e20 	rsb	lr, r9, #32
 8008bae:	468a      	mov	sl, r1
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	fa00 f009 	lsl.w	r0, r0, r9
 8008bb8:	4310      	orrs	r0, r2
 8008bba:	f84a 0b04 	str.w	r0, [sl], #4
 8008bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc2:	459c      	cmp	ip, r3
 8008bc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bc8:	d8f3      	bhi.n	8008bb2 <__lshift+0x6e>
 8008bca:	ebac 0304 	sub.w	r3, ip, r4
 8008bce:	3b15      	subs	r3, #21
 8008bd0:	f023 0303 	bic.w	r3, r3, #3
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	f104 0015 	add.w	r0, r4, #21
 8008bda:	4560      	cmp	r0, ip
 8008bdc:	bf88      	it	hi
 8008bde:	2304      	movhi	r3, #4
 8008be0:	50ca      	str	r2, [r1, r3]
 8008be2:	b10a      	cbz	r2, 8008be8 <__lshift+0xa4>
 8008be4:	f108 0602 	add.w	r6, r8, #2
 8008be8:	3e01      	subs	r6, #1
 8008bea:	4638      	mov	r0, r7
 8008bec:	612e      	str	r6, [r5, #16]
 8008bee:	4621      	mov	r1, r4
 8008bf0:	f7ff fd98 	bl	8008724 <_Bfree>
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bfe:	3301      	adds	r3, #1
 8008c00:	e7c5      	b.n	8008b8e <__lshift+0x4a>
 8008c02:	3904      	subs	r1, #4
 8008c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c08:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c0c:	459c      	cmp	ip, r3
 8008c0e:	d8f9      	bhi.n	8008c04 <__lshift+0xc0>
 8008c10:	e7ea      	b.n	8008be8 <__lshift+0xa4>
 8008c12:	bf00      	nop
 8008c14:	08009c4e 	.word	0x08009c4e
 8008c18:	08009cd6 	.word	0x08009cd6

08008c1c <__mcmp>:
 8008c1c:	690a      	ldr	r2, [r1, #16]
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6900      	ldr	r0, [r0, #16]
 8008c22:	1a80      	subs	r0, r0, r2
 8008c24:	b530      	push	{r4, r5, lr}
 8008c26:	d10e      	bne.n	8008c46 <__mcmp+0x2a>
 8008c28:	3314      	adds	r3, #20
 8008c2a:	3114      	adds	r1, #20
 8008c2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c3c:	4295      	cmp	r5, r2
 8008c3e:	d003      	beq.n	8008c48 <__mcmp+0x2c>
 8008c40:	d205      	bcs.n	8008c4e <__mcmp+0x32>
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c46:	bd30      	pop	{r4, r5, pc}
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d3f3      	bcc.n	8008c34 <__mcmp+0x18>
 8008c4c:	e7fb      	b.n	8008c46 <__mcmp+0x2a>
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e7f9      	b.n	8008c46 <__mcmp+0x2a>
	...

08008c54 <__mdiff>:
 8008c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	4689      	mov	r9, r1
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4648      	mov	r0, r9
 8008c60:	4614      	mov	r4, r2
 8008c62:	f7ff ffdb 	bl	8008c1c <__mcmp>
 8008c66:	1e05      	subs	r5, r0, #0
 8008c68:	d112      	bne.n	8008c90 <__mdiff+0x3c>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff fd19 	bl	80086a4 <_Balloc>
 8008c72:	4602      	mov	r2, r0
 8008c74:	b928      	cbnz	r0, 8008c82 <__mdiff+0x2e>
 8008c76:	4b3f      	ldr	r3, [pc, #252]	@ (8008d74 <__mdiff+0x120>)
 8008c78:	f240 2137 	movw	r1, #567	@ 0x237
 8008c7c:	483e      	ldr	r0, [pc, #248]	@ (8008d78 <__mdiff+0x124>)
 8008c7e:	f000 fa61 	bl	8009144 <__assert_func>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c88:	4610      	mov	r0, r2
 8008c8a:	b003      	add	sp, #12
 8008c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c90:	bfbc      	itt	lt
 8008c92:	464b      	movlt	r3, r9
 8008c94:	46a1      	movlt	r9, r4
 8008c96:	4630      	mov	r0, r6
 8008c98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c9c:	bfba      	itte	lt
 8008c9e:	461c      	movlt	r4, r3
 8008ca0:	2501      	movlt	r5, #1
 8008ca2:	2500      	movge	r5, #0
 8008ca4:	f7ff fcfe 	bl	80086a4 <_Balloc>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	b918      	cbnz	r0, 8008cb4 <__mdiff+0x60>
 8008cac:	4b31      	ldr	r3, [pc, #196]	@ (8008d74 <__mdiff+0x120>)
 8008cae:	f240 2145 	movw	r1, #581	@ 0x245
 8008cb2:	e7e3      	b.n	8008c7c <__mdiff+0x28>
 8008cb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cb8:	6926      	ldr	r6, [r4, #16]
 8008cba:	60c5      	str	r5, [r0, #12]
 8008cbc:	f109 0310 	add.w	r3, r9, #16
 8008cc0:	f109 0514 	add.w	r5, r9, #20
 8008cc4:	f104 0e14 	add.w	lr, r4, #20
 8008cc8:	f100 0b14 	add.w	fp, r0, #20
 8008ccc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008cd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	46d9      	mov	r9, fp
 8008cd8:	f04f 0c00 	mov.w	ip, #0
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ce2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	fa1f f38a 	uxth.w	r3, sl
 8008cec:	4619      	mov	r1, r3
 8008cee:	b283      	uxth	r3, r0
 8008cf0:	1acb      	subs	r3, r1, r3
 8008cf2:	0c00      	lsrs	r0, r0, #16
 8008cf4:	4463      	add	r3, ip
 8008cf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008cfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d04:	4576      	cmp	r6, lr
 8008d06:	f849 3b04 	str.w	r3, [r9], #4
 8008d0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d0e:	d8e5      	bhi.n	8008cdc <__mdiff+0x88>
 8008d10:	1b33      	subs	r3, r6, r4
 8008d12:	3b15      	subs	r3, #21
 8008d14:	f023 0303 	bic.w	r3, r3, #3
 8008d18:	3415      	adds	r4, #21
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	bf38      	it	cc
 8008d20:	2304      	movcc	r3, #4
 8008d22:	441d      	add	r5, r3
 8008d24:	445b      	add	r3, fp
 8008d26:	461e      	mov	r6, r3
 8008d28:	462c      	mov	r4, r5
 8008d2a:	4544      	cmp	r4, r8
 8008d2c:	d30e      	bcc.n	8008d4c <__mdiff+0xf8>
 8008d2e:	f108 0103 	add.w	r1, r8, #3
 8008d32:	1b49      	subs	r1, r1, r5
 8008d34:	f021 0103 	bic.w	r1, r1, #3
 8008d38:	3d03      	subs	r5, #3
 8008d3a:	45a8      	cmp	r8, r5
 8008d3c:	bf38      	it	cc
 8008d3e:	2100      	movcc	r1, #0
 8008d40:	440b      	add	r3, r1
 8008d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d46:	b191      	cbz	r1, 8008d6e <__mdiff+0x11a>
 8008d48:	6117      	str	r7, [r2, #16]
 8008d4a:	e79d      	b.n	8008c88 <__mdiff+0x34>
 8008d4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d50:	46e6      	mov	lr, ip
 8008d52:	0c08      	lsrs	r0, r1, #16
 8008d54:	fa1c fc81 	uxtah	ip, ip, r1
 8008d58:	4471      	add	r1, lr
 8008d5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d5e:	b289      	uxth	r1, r1
 8008d60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d64:	f846 1b04 	str.w	r1, [r6], #4
 8008d68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d6c:	e7dd      	b.n	8008d2a <__mdiff+0xd6>
 8008d6e:	3f01      	subs	r7, #1
 8008d70:	e7e7      	b.n	8008d42 <__mdiff+0xee>
 8008d72:	bf00      	nop
 8008d74:	08009c4e 	.word	0x08009c4e
 8008d78:	08009cd6 	.word	0x08009cd6

08008d7c <__ulp>:
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	ed8d 0b00 	vstr	d0, [sp]
 8008d82:	9a01      	ldr	r2, [sp, #4]
 8008d84:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc4 <__ulp+0x48>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc08      	bgt.n	8008da2 <__ulp+0x26>
 8008d90:	425b      	negs	r3, r3
 8008d92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008d96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d9a:	da04      	bge.n	8008da6 <__ulp+0x2a>
 8008d9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008da0:	4113      	asrs	r3, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	e008      	b.n	8008db8 <__ulp+0x3c>
 8008da6:	f1a2 0314 	sub.w	r3, r2, #20
 8008daa:	2b1e      	cmp	r3, #30
 8008dac:	bfda      	itte	le
 8008dae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008db2:	40da      	lsrle	r2, r3
 8008db4:	2201      	movgt	r2, #1
 8008db6:	2300      	movs	r3, #0
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	ec41 0b10 	vmov	d0, r0, r1
 8008dc0:	b002      	add	sp, #8
 8008dc2:	4770      	bx	lr
 8008dc4:	7ff00000 	.word	0x7ff00000

08008dc8 <__b2d>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	6906      	ldr	r6, [r0, #16]
 8008dce:	f100 0814 	add.w	r8, r0, #20
 8008dd2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008dd6:	1f37      	subs	r7, r6, #4
 8008dd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7ff fd53 	bl	8008888 <__hi0bits>
 8008de2:	f1c0 0320 	rsb	r3, r0, #32
 8008de6:	280a      	cmp	r0, #10
 8008de8:	600b      	str	r3, [r1, #0]
 8008dea:	491b      	ldr	r1, [pc, #108]	@ (8008e58 <__b2d+0x90>)
 8008dec:	dc15      	bgt.n	8008e1a <__b2d+0x52>
 8008dee:	f1c0 0c0b 	rsb	ip, r0, #11
 8008df2:	fa22 f30c 	lsr.w	r3, r2, ip
 8008df6:	45b8      	cmp	r8, r7
 8008df8:	ea43 0501 	orr.w	r5, r3, r1
 8008dfc:	bf34      	ite	cc
 8008dfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e02:	2300      	movcs	r3, #0
 8008e04:	3015      	adds	r0, #21
 8008e06:	fa02 f000 	lsl.w	r0, r2, r0
 8008e0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e0e:	4303      	orrs	r3, r0
 8008e10:	461c      	mov	r4, r3
 8008e12:	ec45 4b10 	vmov	d0, r4, r5
 8008e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1a:	45b8      	cmp	r8, r7
 8008e1c:	bf3a      	itte	cc
 8008e1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e22:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e26:	2300      	movcs	r3, #0
 8008e28:	380b      	subs	r0, #11
 8008e2a:	d012      	beq.n	8008e52 <__b2d+0x8a>
 8008e2c:	f1c0 0120 	rsb	r1, r0, #32
 8008e30:	fa23 f401 	lsr.w	r4, r3, r1
 8008e34:	4082      	lsls	r2, r0
 8008e36:	4322      	orrs	r2, r4
 8008e38:	4547      	cmp	r7, r8
 8008e3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e3e:	bf8c      	ite	hi
 8008e40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e44:	2200      	movls	r2, #0
 8008e46:	4083      	lsls	r3, r0
 8008e48:	40ca      	lsrs	r2, r1
 8008e4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	e7de      	b.n	8008e10 <__b2d+0x48>
 8008e52:	ea42 0501 	orr.w	r5, r2, r1
 8008e56:	e7db      	b.n	8008e10 <__b2d+0x48>
 8008e58:	3ff00000 	.word	0x3ff00000

08008e5c <__d2b>:
 8008e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e60:	460f      	mov	r7, r1
 8008e62:	2101      	movs	r1, #1
 8008e64:	ec59 8b10 	vmov	r8, r9, d0
 8008e68:	4616      	mov	r6, r2
 8008e6a:	f7ff fc1b 	bl	80086a4 <_Balloc>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	b930      	cbnz	r0, 8008e80 <__d2b+0x24>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b23      	ldr	r3, [pc, #140]	@ (8008f04 <__d2b+0xa8>)
 8008e76:	4824      	ldr	r0, [pc, #144]	@ (8008f08 <__d2b+0xac>)
 8008e78:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e7c:	f000 f962 	bl	8009144 <__assert_func>
 8008e80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e88:	b10d      	cbz	r5, 8008e8e <__d2b+0x32>
 8008e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	f1b8 0300 	subs.w	r3, r8, #0
 8008e94:	d023      	beq.n	8008ede <__d2b+0x82>
 8008e96:	4668      	mov	r0, sp
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	f7ff fd14 	bl	80088c6 <__lo0bits>
 8008e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ea2:	b1d0      	cbz	r0, 8008eda <__d2b+0x7e>
 8008ea4:	f1c0 0320 	rsb	r3, r0, #32
 8008ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eac:	430b      	orrs	r3, r1
 8008eae:	40c2      	lsrs	r2, r0
 8008eb0:	6163      	str	r3, [r4, #20]
 8008eb2:	9201      	str	r2, [sp, #4]
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	61a3      	str	r3, [r4, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf0c      	ite	eq
 8008ebc:	2201      	moveq	r2, #1
 8008ebe:	2202      	movne	r2, #2
 8008ec0:	6122      	str	r2, [r4, #16]
 8008ec2:	b1a5      	cbz	r5, 8008eee <__d2b+0x92>
 8008ec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ec8:	4405      	add	r5, r0
 8008eca:	603d      	str	r5, [r7, #0]
 8008ecc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ed0:	6030      	str	r0, [r6, #0]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	b003      	add	sp, #12
 8008ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eda:	6161      	str	r1, [r4, #20]
 8008edc:	e7ea      	b.n	8008eb4 <__d2b+0x58>
 8008ede:	a801      	add	r0, sp, #4
 8008ee0:	f7ff fcf1 	bl	80088c6 <__lo0bits>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	6163      	str	r3, [r4, #20]
 8008ee8:	3020      	adds	r0, #32
 8008eea:	2201      	movs	r2, #1
 8008eec:	e7e8      	b.n	8008ec0 <__d2b+0x64>
 8008eee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ef6:	6038      	str	r0, [r7, #0]
 8008ef8:	6918      	ldr	r0, [r3, #16]
 8008efa:	f7ff fcc5 	bl	8008888 <__hi0bits>
 8008efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f02:	e7e5      	b.n	8008ed0 <__d2b+0x74>
 8008f04:	08009c4e 	.word	0x08009c4e
 8008f08:	08009cd6 	.word	0x08009cd6

08008f0c <__ratio>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	b085      	sub	sp, #20
 8008f12:	e9cd 1000 	strd	r1, r0, [sp]
 8008f16:	a902      	add	r1, sp, #8
 8008f18:	f7ff ff56 	bl	8008dc8 <__b2d>
 8008f1c:	9800      	ldr	r0, [sp, #0]
 8008f1e:	a903      	add	r1, sp, #12
 8008f20:	ec55 4b10 	vmov	r4, r5, d0
 8008f24:	f7ff ff50 	bl	8008dc8 <__b2d>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	6919      	ldr	r1, [r3, #16]
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	1ac9      	subs	r1, r1, r3
 8008f32:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	ec5b ab10 	vmov	sl, fp, d0
 8008f3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfce      	itee	gt
 8008f44:	462a      	movgt	r2, r5
 8008f46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f4a:	465a      	movle	r2, fp
 8008f4c:	462f      	mov	r7, r5
 8008f4e:	46d9      	mov	r9, fp
 8008f50:	bfcc      	ite	gt
 8008f52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f56:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 fc83 	bl	800086c <__aeabi_ddiv>
 8008f66:	ec41 0b10 	vmov	d0, r0, r1
 8008f6a:	b005      	add	sp, #20
 8008f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f70 <__copybits>:
 8008f70:	3901      	subs	r1, #1
 8008f72:	b570      	push	{r4, r5, r6, lr}
 8008f74:	1149      	asrs	r1, r1, #5
 8008f76:	6914      	ldr	r4, [r2, #16]
 8008f78:	3101      	adds	r1, #1
 8008f7a:	f102 0314 	add.w	r3, r2, #20
 8008f7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f86:	1f05      	subs	r5, r0, #4
 8008f88:	42a3      	cmp	r3, r4
 8008f8a:	d30c      	bcc.n	8008fa6 <__copybits+0x36>
 8008f8c:	1aa3      	subs	r3, r4, r2
 8008f8e:	3b11      	subs	r3, #17
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	3211      	adds	r2, #17
 8008f96:	42a2      	cmp	r2, r4
 8008f98:	bf88      	it	hi
 8008f9a:	2300      	movhi	r3, #0
 8008f9c:	4418      	add	r0, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4288      	cmp	r0, r1
 8008fa2:	d305      	bcc.n	8008fb0 <__copybits+0x40>
 8008fa4:	bd70      	pop	{r4, r5, r6, pc}
 8008fa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008faa:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fae:	e7eb      	b.n	8008f88 <__copybits+0x18>
 8008fb0:	f840 3b04 	str.w	r3, [r0], #4
 8008fb4:	e7f4      	b.n	8008fa0 <__copybits+0x30>

08008fb6 <__any_on>:
 8008fb6:	f100 0214 	add.w	r2, r0, #20
 8008fba:	6900      	ldr	r0, [r0, #16]
 8008fbc:	114b      	asrs	r3, r1, #5
 8008fbe:	4298      	cmp	r0, r3
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	db11      	blt.n	8008fe8 <__any_on+0x32>
 8008fc4:	dd0a      	ble.n	8008fdc <__any_on+0x26>
 8008fc6:	f011 011f 	ands.w	r1, r1, #31
 8008fca:	d007      	beq.n	8008fdc <__any_on+0x26>
 8008fcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fd0:	fa24 f001 	lsr.w	r0, r4, r1
 8008fd4:	fa00 f101 	lsl.w	r1, r0, r1
 8008fd8:	428c      	cmp	r4, r1
 8008fda:	d10b      	bne.n	8008ff4 <__any_on+0x3e>
 8008fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d803      	bhi.n	8008fec <__any_on+0x36>
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	bd10      	pop	{r4, pc}
 8008fe8:	4603      	mov	r3, r0
 8008fea:	e7f7      	b.n	8008fdc <__any_on+0x26>
 8008fec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ff0:	2900      	cmp	r1, #0
 8008ff2:	d0f5      	beq.n	8008fe0 <__any_on+0x2a>
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	e7f6      	b.n	8008fe6 <__any_on+0x30>

08008ff8 <__sread>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	f000 f85c 	bl	80090bc <_read_r>
 8009004:	2800      	cmp	r0, #0
 8009006:	bfab      	itete	ge
 8009008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800900a:	89a3      	ldrhlt	r3, [r4, #12]
 800900c:	181b      	addge	r3, r3, r0
 800900e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009012:	bfac      	ite	ge
 8009014:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009016:	81a3      	strhlt	r3, [r4, #12]
 8009018:	bd10      	pop	{r4, pc}

0800901a <__swrite>:
 800901a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	461f      	mov	r7, r3
 8009020:	898b      	ldrh	r3, [r1, #12]
 8009022:	05db      	lsls	r3, r3, #23
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	4616      	mov	r6, r2
 800902a:	d505      	bpl.n	8009038 <__swrite+0x1e>
 800902c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009030:	2302      	movs	r3, #2
 8009032:	2200      	movs	r2, #0
 8009034:	f000 f830 	bl	8009098 <_lseek_r>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800903e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	4632      	mov	r2, r6
 8009046:	463b      	mov	r3, r7
 8009048:	4628      	mov	r0, r5
 800904a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800904e:	f000 b857 	b.w	8009100 <_write_r>

08009052 <__sseek>:
 8009052:	b510      	push	{r4, lr}
 8009054:	460c      	mov	r4, r1
 8009056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905a:	f000 f81d 	bl	8009098 <_lseek_r>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	bf15      	itete	ne
 8009064:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800906a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800906e:	81a3      	strheq	r3, [r4, #12]
 8009070:	bf18      	it	ne
 8009072:	81a3      	strhne	r3, [r4, #12]
 8009074:	bd10      	pop	{r4, pc}

08009076 <__sclose>:
 8009076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907a:	f000 b853 	b.w	8009124 <_close_r>

0800907e <__ascii_wctomb>:
 800907e:	4603      	mov	r3, r0
 8009080:	4608      	mov	r0, r1
 8009082:	b141      	cbz	r1, 8009096 <__ascii_wctomb+0x18>
 8009084:	2aff      	cmp	r2, #255	@ 0xff
 8009086:	d904      	bls.n	8009092 <__ascii_wctomb+0x14>
 8009088:	228a      	movs	r2, #138	@ 0x8a
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009090:	4770      	bx	lr
 8009092:	700a      	strb	r2, [r1, #0]
 8009094:	2001      	movs	r0, #1
 8009096:	4770      	bx	lr

08009098 <_lseek_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	@ (80090b8 <_lseek_r+0x20>)
 800909c:	4604      	mov	r4, r0
 800909e:	4608      	mov	r0, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7f9 fb4f 	bl	800274a <_lseek>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_lseek_r+0x1e>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_lseek_r+0x1e>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	2000075c 	.word	0x2000075c

080090bc <_read_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	@ (80090dc <_read_r+0x20>)
 80090c0:	4604      	mov	r4, r0
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f7f9 fadd 	bl	800268a <_read>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_read_r+0x1e>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_read_r+0x1e>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	2000075c 	.word	0x2000075c

080090e0 <_sbrk_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d06      	ldr	r5, [pc, #24]	@ (80090fc <_sbrk_r+0x1c>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	f7f9 fb3a 	bl	8002764 <_sbrk>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_sbrk_r+0x1a>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_sbrk_r+0x1a>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	2000075c 	.word	0x2000075c

08009100 <_write_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	@ (8009120 <_write_r+0x20>)
 8009104:	4604      	mov	r4, r0
 8009106:	4608      	mov	r0, r1
 8009108:	4611      	mov	r1, r2
 800910a:	2200      	movs	r2, #0
 800910c:	602a      	str	r2, [r5, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	f7f9 fad8 	bl	80026c4 <_write>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_write_r+0x1e>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_write_r+0x1e>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	2000075c 	.word	0x2000075c

08009124 <_close_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	@ (8009140 <_close_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f9 fae4 	bl	80026fc <_close>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_close_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_close_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	2000075c 	.word	0x2000075c

08009144 <__assert_func>:
 8009144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009146:	4614      	mov	r4, r2
 8009148:	461a      	mov	r2, r3
 800914a:	4b09      	ldr	r3, [pc, #36]	@ (8009170 <__assert_func+0x2c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4605      	mov	r5, r0
 8009150:	68d8      	ldr	r0, [r3, #12]
 8009152:	b14c      	cbz	r4, 8009168 <__assert_func+0x24>
 8009154:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <__assert_func+0x30>)
 8009156:	9100      	str	r1, [sp, #0]
 8009158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800915c:	4906      	ldr	r1, [pc, #24]	@ (8009178 <__assert_func+0x34>)
 800915e:	462b      	mov	r3, r5
 8009160:	f000 f874 	bl	800924c <fiprintf>
 8009164:	f000 f884 	bl	8009270 <abort>
 8009168:	4b04      	ldr	r3, [pc, #16]	@ (800917c <__assert_func+0x38>)
 800916a:	461c      	mov	r4, r3
 800916c:	e7f3      	b.n	8009156 <__assert_func+0x12>
 800916e:	bf00      	nop
 8009170:	2000026c 	.word	0x2000026c
 8009174:	08009d2f 	.word	0x08009d2f
 8009178:	08009d3c 	.word	0x08009d3c
 800917c:	08009d6a 	.word	0x08009d6a

08009180 <_calloc_r>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	fba1 5402 	umull	r5, r4, r1, r2
 8009186:	b934      	cbnz	r4, 8009196 <_calloc_r+0x16>
 8009188:	4629      	mov	r1, r5
 800918a:	f7ff f941 	bl	8008410 <_malloc_r>
 800918e:	4606      	mov	r6, r0
 8009190:	b928      	cbnz	r0, 800919e <_calloc_r+0x1e>
 8009192:	4630      	mov	r0, r6
 8009194:	bd70      	pop	{r4, r5, r6, pc}
 8009196:	220c      	movs	r2, #12
 8009198:	6002      	str	r2, [r0, #0]
 800919a:	2600      	movs	r6, #0
 800919c:	e7f9      	b.n	8009192 <_calloc_r+0x12>
 800919e:	462a      	mov	r2, r5
 80091a0:	4621      	mov	r1, r4
 80091a2:	f7fe fd6b 	bl	8007c7c <memset>
 80091a6:	e7f4      	b.n	8009192 <_calloc_r+0x12>

080091a8 <_free_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4605      	mov	r5, r0
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d041      	beq.n	8009234 <_free_r+0x8c>
 80091b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b4:	1f0c      	subs	r4, r1, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bfb8      	it	lt
 80091ba:	18e4      	addlt	r4, r4, r3
 80091bc:	f7ff fa66 	bl	800868c <__malloc_lock>
 80091c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009238 <_free_r+0x90>)
 80091c2:	6813      	ldr	r3, [r2, #0]
 80091c4:	b933      	cbnz	r3, 80091d4 <_free_r+0x2c>
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	6014      	str	r4, [r2, #0]
 80091ca:	4628      	mov	r0, r5
 80091cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d0:	f7ff ba62 	b.w	8008698 <__malloc_unlock>
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d908      	bls.n	80091ea <_free_r+0x42>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	1821      	adds	r1, r4, r0
 80091dc:	428b      	cmp	r3, r1
 80091de:	bf01      	itttt	eq
 80091e0:	6819      	ldreq	r1, [r3, #0]
 80091e2:	685b      	ldreq	r3, [r3, #4]
 80091e4:	1809      	addeq	r1, r1, r0
 80091e6:	6021      	streq	r1, [r4, #0]
 80091e8:	e7ed      	b.n	80091c6 <_free_r+0x1e>
 80091ea:	461a      	mov	r2, r3
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	b10b      	cbz	r3, 80091f4 <_free_r+0x4c>
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	d9fa      	bls.n	80091ea <_free_r+0x42>
 80091f4:	6811      	ldr	r1, [r2, #0]
 80091f6:	1850      	adds	r0, r2, r1
 80091f8:	42a0      	cmp	r0, r4
 80091fa:	d10b      	bne.n	8009214 <_free_r+0x6c>
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	4401      	add	r1, r0
 8009200:	1850      	adds	r0, r2, r1
 8009202:	4283      	cmp	r3, r0
 8009204:	6011      	str	r1, [r2, #0]
 8009206:	d1e0      	bne.n	80091ca <_free_r+0x22>
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	6053      	str	r3, [r2, #4]
 800920e:	4408      	add	r0, r1
 8009210:	6010      	str	r0, [r2, #0]
 8009212:	e7da      	b.n	80091ca <_free_r+0x22>
 8009214:	d902      	bls.n	800921c <_free_r+0x74>
 8009216:	230c      	movs	r3, #12
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	e7d6      	b.n	80091ca <_free_r+0x22>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	1821      	adds	r1, r4, r0
 8009220:	428b      	cmp	r3, r1
 8009222:	bf04      	itt	eq
 8009224:	6819      	ldreq	r1, [r3, #0]
 8009226:	685b      	ldreq	r3, [r3, #4]
 8009228:	6063      	str	r3, [r4, #4]
 800922a:	bf04      	itt	eq
 800922c:	1809      	addeq	r1, r1, r0
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	6054      	str	r4, [r2, #4]
 8009232:	e7ca      	b.n	80091ca <_free_r+0x22>
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	20000758 	.word	0x20000758

0800923c <malloc>:
 800923c:	4b02      	ldr	r3, [pc, #8]	@ (8009248 <malloc+0xc>)
 800923e:	4601      	mov	r1, r0
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f7ff b8e5 	b.w	8008410 <_malloc_r>
 8009246:	bf00      	nop
 8009248:	2000026c 	.word	0x2000026c

0800924c <fiprintf>:
 800924c:	b40e      	push	{r1, r2, r3}
 800924e:	b503      	push	{r0, r1, lr}
 8009250:	4601      	mov	r1, r0
 8009252:	ab03      	add	r3, sp, #12
 8009254:	4805      	ldr	r0, [pc, #20]	@ (800926c <fiprintf+0x20>)
 8009256:	f853 2b04 	ldr.w	r2, [r3], #4
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f000 f837 	bl	80092d0 <_vfiprintf_r>
 8009262:	b002      	add	sp, #8
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b003      	add	sp, #12
 800926a:	4770      	bx	lr
 800926c:	2000026c 	.word	0x2000026c

08009270 <abort>:
 8009270:	b508      	push	{r3, lr}
 8009272:	2006      	movs	r0, #6
 8009274:	f000 fbee 	bl	8009a54 <raise>
 8009278:	2001      	movs	r0, #1
 800927a:	f7f9 f9fb 	bl	8002674 <_exit>

0800927e <__sfputc_r>:
 800927e:	6893      	ldr	r3, [r2, #8]
 8009280:	3b01      	subs	r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	b410      	push	{r4}
 8009286:	6093      	str	r3, [r2, #8]
 8009288:	da08      	bge.n	800929c <__sfputc_r+0x1e>
 800928a:	6994      	ldr	r4, [r2, #24]
 800928c:	42a3      	cmp	r3, r4
 800928e:	db01      	blt.n	8009294 <__sfputc_r+0x16>
 8009290:	290a      	cmp	r1, #10
 8009292:	d103      	bne.n	800929c <__sfputc_r+0x1e>
 8009294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009298:	f000 babe 	b.w	8009818 <__swbuf_r>
 800929c:	6813      	ldr	r3, [r2, #0]
 800929e:	1c58      	adds	r0, r3, #1
 80092a0:	6010      	str	r0, [r2, #0]
 80092a2:	7019      	strb	r1, [r3, #0]
 80092a4:	4608      	mov	r0, r1
 80092a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <__sfputs_r>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	4614      	mov	r4, r2
 80092b4:	18d5      	adds	r5, r2, r3
 80092b6:	42ac      	cmp	r4, r5
 80092b8:	d101      	bne.n	80092be <__sfputs_r+0x12>
 80092ba:	2000      	movs	r0, #0
 80092bc:	e007      	b.n	80092ce <__sfputs_r+0x22>
 80092be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c2:	463a      	mov	r2, r7
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff ffda 	bl	800927e <__sfputc_r>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	d1f3      	bne.n	80092b6 <__sfputs_r+0xa>
 80092ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092d0 <_vfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	460d      	mov	r5, r1
 80092d6:	b09d      	sub	sp, #116	@ 0x74
 80092d8:	4614      	mov	r4, r2
 80092da:	4698      	mov	r8, r3
 80092dc:	4606      	mov	r6, r0
 80092de:	b118      	cbz	r0, 80092e8 <_vfiprintf_r+0x18>
 80092e0:	6a03      	ldr	r3, [r0, #32]
 80092e2:	b90b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x18>
 80092e4:	f7fd fe86 	bl	8006ff4 <__sinit>
 80092e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092ea:	07d9      	lsls	r1, r3, #31
 80092ec:	d405      	bmi.n	80092fa <_vfiprintf_r+0x2a>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	059a      	lsls	r2, r3, #22
 80092f2:	d402      	bmi.n	80092fa <_vfiprintf_r+0x2a>
 80092f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092f6:	f7fe fd14 	bl	8007d22 <__retarget_lock_acquire_recursive>
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	071b      	lsls	r3, r3, #28
 80092fe:	d501      	bpl.n	8009304 <_vfiprintf_r+0x34>
 8009300:	692b      	ldr	r3, [r5, #16]
 8009302:	b99b      	cbnz	r3, 800932c <_vfiprintf_r+0x5c>
 8009304:	4629      	mov	r1, r5
 8009306:	4630      	mov	r0, r6
 8009308:	f000 fac4 	bl	8009894 <__swsetup_r>
 800930c:	b170      	cbz	r0, 800932c <_vfiprintf_r+0x5c>
 800930e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009310:	07dc      	lsls	r4, r3, #31
 8009312:	d504      	bpl.n	800931e <_vfiprintf_r+0x4e>
 8009314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009318:	b01d      	add	sp, #116	@ 0x74
 800931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	0598      	lsls	r0, r3, #22
 8009322:	d4f7      	bmi.n	8009314 <_vfiprintf_r+0x44>
 8009324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009326:	f7fe fcfd 	bl	8007d24 <__retarget_lock_release_recursive>
 800932a:	e7f3      	b.n	8009314 <_vfiprintf_r+0x44>
 800932c:	2300      	movs	r3, #0
 800932e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009330:	2320      	movs	r3, #32
 8009332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009336:	f8cd 800c 	str.w	r8, [sp, #12]
 800933a:	2330      	movs	r3, #48	@ 0x30
 800933c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094ec <_vfiprintf_r+0x21c>
 8009340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009344:	f04f 0901 	mov.w	r9, #1
 8009348:	4623      	mov	r3, r4
 800934a:	469a      	mov	sl, r3
 800934c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009350:	b10a      	cbz	r2, 8009356 <_vfiprintf_r+0x86>
 8009352:	2a25      	cmp	r2, #37	@ 0x25
 8009354:	d1f9      	bne.n	800934a <_vfiprintf_r+0x7a>
 8009356:	ebba 0b04 	subs.w	fp, sl, r4
 800935a:	d00b      	beq.n	8009374 <_vfiprintf_r+0xa4>
 800935c:	465b      	mov	r3, fp
 800935e:	4622      	mov	r2, r4
 8009360:	4629      	mov	r1, r5
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ffa2 	bl	80092ac <__sfputs_r>
 8009368:	3001      	adds	r0, #1
 800936a:	f000 80a7 	beq.w	80094bc <_vfiprintf_r+0x1ec>
 800936e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009370:	445a      	add	r2, fp
 8009372:	9209      	str	r2, [sp, #36]	@ 0x24
 8009374:	f89a 3000 	ldrb.w	r3, [sl]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 809f 	beq.w	80094bc <_vfiprintf_r+0x1ec>
 800937e:	2300      	movs	r3, #0
 8009380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009388:	f10a 0a01 	add.w	sl, sl, #1
 800938c:	9304      	str	r3, [sp, #16]
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009394:	931a      	str	r3, [sp, #104]	@ 0x68
 8009396:	4654      	mov	r4, sl
 8009398:	2205      	movs	r2, #5
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	4853      	ldr	r0, [pc, #332]	@ (80094ec <_vfiprintf_r+0x21c>)
 80093a0:	f7f6 ff2e 	bl	8000200 <memchr>
 80093a4:	9a04      	ldr	r2, [sp, #16]
 80093a6:	b9d8      	cbnz	r0, 80093e0 <_vfiprintf_r+0x110>
 80093a8:	06d1      	lsls	r1, r2, #27
 80093aa:	bf44      	itt	mi
 80093ac:	2320      	movmi	r3, #32
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093b2:	0713      	lsls	r3, r2, #28
 80093b4:	bf44      	itt	mi
 80093b6:	232b      	movmi	r3, #43	@ 0x2b
 80093b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093bc:	f89a 3000 	ldrb.w	r3, [sl]
 80093c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093c2:	d015      	beq.n	80093f0 <_vfiprintf_r+0x120>
 80093c4:	9a07      	ldr	r2, [sp, #28]
 80093c6:	4654      	mov	r4, sl
 80093c8:	2000      	movs	r0, #0
 80093ca:	f04f 0c0a 	mov.w	ip, #10
 80093ce:	4621      	mov	r1, r4
 80093d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d4:	3b30      	subs	r3, #48	@ 0x30
 80093d6:	2b09      	cmp	r3, #9
 80093d8:	d94b      	bls.n	8009472 <_vfiprintf_r+0x1a2>
 80093da:	b1b0      	cbz	r0, 800940a <_vfiprintf_r+0x13a>
 80093dc:	9207      	str	r2, [sp, #28]
 80093de:	e014      	b.n	800940a <_vfiprintf_r+0x13a>
 80093e0:	eba0 0308 	sub.w	r3, r0, r8
 80093e4:	fa09 f303 	lsl.w	r3, r9, r3
 80093e8:	4313      	orrs	r3, r2
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	46a2      	mov	sl, r4
 80093ee:	e7d2      	b.n	8009396 <_vfiprintf_r+0xc6>
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	1d19      	adds	r1, r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	9103      	str	r1, [sp, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfbb      	ittet	lt
 80093fc:	425b      	neglt	r3, r3
 80093fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009402:	9307      	strge	r3, [sp, #28]
 8009404:	9307      	strlt	r3, [sp, #28]
 8009406:	bfb8      	it	lt
 8009408:	9204      	strlt	r2, [sp, #16]
 800940a:	7823      	ldrb	r3, [r4, #0]
 800940c:	2b2e      	cmp	r3, #46	@ 0x2e
 800940e:	d10a      	bne.n	8009426 <_vfiprintf_r+0x156>
 8009410:	7863      	ldrb	r3, [r4, #1]
 8009412:	2b2a      	cmp	r3, #42	@ 0x2a
 8009414:	d132      	bne.n	800947c <_vfiprintf_r+0x1ac>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	9203      	str	r2, [sp, #12]
 800941e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009422:	3402      	adds	r4, #2
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094fc <_vfiprintf_r+0x22c>
 800942a:	7821      	ldrb	r1, [r4, #0]
 800942c:	2203      	movs	r2, #3
 800942e:	4650      	mov	r0, sl
 8009430:	f7f6 fee6 	bl	8000200 <memchr>
 8009434:	b138      	cbz	r0, 8009446 <_vfiprintf_r+0x176>
 8009436:	9b04      	ldr	r3, [sp, #16]
 8009438:	eba0 000a 	sub.w	r0, r0, sl
 800943c:	2240      	movs	r2, #64	@ 0x40
 800943e:	4082      	lsls	r2, r0
 8009440:	4313      	orrs	r3, r2
 8009442:	3401      	adds	r4, #1
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944a:	4829      	ldr	r0, [pc, #164]	@ (80094f0 <_vfiprintf_r+0x220>)
 800944c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009450:	2206      	movs	r2, #6
 8009452:	f7f6 fed5 	bl	8000200 <memchr>
 8009456:	2800      	cmp	r0, #0
 8009458:	d03f      	beq.n	80094da <_vfiprintf_r+0x20a>
 800945a:	4b26      	ldr	r3, [pc, #152]	@ (80094f4 <_vfiprintf_r+0x224>)
 800945c:	bb1b      	cbnz	r3, 80094a6 <_vfiprintf_r+0x1d6>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	3307      	adds	r3, #7
 8009462:	f023 0307 	bic.w	r3, r3, #7
 8009466:	3308      	adds	r3, #8
 8009468:	9303      	str	r3, [sp, #12]
 800946a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946c:	443b      	add	r3, r7
 800946e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009470:	e76a      	b.n	8009348 <_vfiprintf_r+0x78>
 8009472:	fb0c 3202 	mla	r2, ip, r2, r3
 8009476:	460c      	mov	r4, r1
 8009478:	2001      	movs	r0, #1
 800947a:	e7a8      	b.n	80093ce <_vfiprintf_r+0xfe>
 800947c:	2300      	movs	r3, #0
 800947e:	3401      	adds	r4, #1
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	4619      	mov	r1, r3
 8009484:	f04f 0c0a 	mov.w	ip, #10
 8009488:	4620      	mov	r0, r4
 800948a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800948e:	3a30      	subs	r2, #48	@ 0x30
 8009490:	2a09      	cmp	r2, #9
 8009492:	d903      	bls.n	800949c <_vfiprintf_r+0x1cc>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0c6      	beq.n	8009426 <_vfiprintf_r+0x156>
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	e7c4      	b.n	8009426 <_vfiprintf_r+0x156>
 800949c:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a0:	4604      	mov	r4, r0
 80094a2:	2301      	movs	r3, #1
 80094a4:	e7f0      	b.n	8009488 <_vfiprintf_r+0x1b8>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4b12      	ldr	r3, [pc, #72]	@ (80094f8 <_vfiprintf_r+0x228>)
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4630      	mov	r0, r6
 80094b2:	f3af 8000 	nop.w
 80094b6:	4607      	mov	r7, r0
 80094b8:	1c78      	adds	r0, r7, #1
 80094ba:	d1d6      	bne.n	800946a <_vfiprintf_r+0x19a>
 80094bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094be:	07d9      	lsls	r1, r3, #31
 80094c0:	d405      	bmi.n	80094ce <_vfiprintf_r+0x1fe>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	059a      	lsls	r2, r3, #22
 80094c6:	d402      	bmi.n	80094ce <_vfiprintf_r+0x1fe>
 80094c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ca:	f7fe fc2b 	bl	8007d24 <__retarget_lock_release_recursive>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	065b      	lsls	r3, r3, #25
 80094d2:	f53f af1f 	bmi.w	8009314 <_vfiprintf_r+0x44>
 80094d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094d8:	e71e      	b.n	8009318 <_vfiprintf_r+0x48>
 80094da:	ab03      	add	r3, sp, #12
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	462a      	mov	r2, r5
 80094e0:	4b05      	ldr	r3, [pc, #20]	@ (80094f8 <_vfiprintf_r+0x228>)
 80094e2:	a904      	add	r1, sp, #16
 80094e4:	4630      	mov	r0, r6
 80094e6:	f000 f879 	bl	80095dc <_printf_i>
 80094ea:	e7e4      	b.n	80094b6 <_vfiprintf_r+0x1e6>
 80094ec:	08009d6b 	.word	0x08009d6b
 80094f0:	08009d75 	.word	0x08009d75
 80094f4:	00000000 	.word	0x00000000
 80094f8:	080092ad 	.word	0x080092ad
 80094fc:	08009d71 	.word	0x08009d71

08009500 <_printf_common>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	4616      	mov	r6, r2
 8009506:	4698      	mov	r8, r3
 8009508:	688a      	ldr	r2, [r1, #8]
 800950a:	690b      	ldr	r3, [r1, #16]
 800950c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009510:	4293      	cmp	r3, r2
 8009512:	bfb8      	it	lt
 8009514:	4613      	movlt	r3, r2
 8009516:	6033      	str	r3, [r6, #0]
 8009518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800951c:	4607      	mov	r7, r0
 800951e:	460c      	mov	r4, r1
 8009520:	b10a      	cbz	r2, 8009526 <_printf_common+0x26>
 8009522:	3301      	adds	r3, #1
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	0699      	lsls	r1, r3, #26
 800952a:	bf42      	ittt	mi
 800952c:	6833      	ldrmi	r3, [r6, #0]
 800952e:	3302      	addmi	r3, #2
 8009530:	6033      	strmi	r3, [r6, #0]
 8009532:	6825      	ldr	r5, [r4, #0]
 8009534:	f015 0506 	ands.w	r5, r5, #6
 8009538:	d106      	bne.n	8009548 <_printf_common+0x48>
 800953a:	f104 0a19 	add.w	sl, r4, #25
 800953e:	68e3      	ldr	r3, [r4, #12]
 8009540:	6832      	ldr	r2, [r6, #0]
 8009542:	1a9b      	subs	r3, r3, r2
 8009544:	42ab      	cmp	r3, r5
 8009546:	dc26      	bgt.n	8009596 <_printf_common+0x96>
 8009548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800954c:	6822      	ldr	r2, [r4, #0]
 800954e:	3b00      	subs	r3, #0
 8009550:	bf18      	it	ne
 8009552:	2301      	movne	r3, #1
 8009554:	0692      	lsls	r2, r2, #26
 8009556:	d42b      	bmi.n	80095b0 <_printf_common+0xb0>
 8009558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800955c:	4641      	mov	r1, r8
 800955e:	4638      	mov	r0, r7
 8009560:	47c8      	blx	r9
 8009562:	3001      	adds	r0, #1
 8009564:	d01e      	beq.n	80095a4 <_printf_common+0xa4>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	6922      	ldr	r2, [r4, #16]
 800956a:	f003 0306 	and.w	r3, r3, #6
 800956e:	2b04      	cmp	r3, #4
 8009570:	bf02      	ittt	eq
 8009572:	68e5      	ldreq	r5, [r4, #12]
 8009574:	6833      	ldreq	r3, [r6, #0]
 8009576:	1aed      	subeq	r5, r5, r3
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	bf0c      	ite	eq
 800957c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009580:	2500      	movne	r5, #0
 8009582:	4293      	cmp	r3, r2
 8009584:	bfc4      	itt	gt
 8009586:	1a9b      	subgt	r3, r3, r2
 8009588:	18ed      	addgt	r5, r5, r3
 800958a:	2600      	movs	r6, #0
 800958c:	341a      	adds	r4, #26
 800958e:	42b5      	cmp	r5, r6
 8009590:	d11a      	bne.n	80095c8 <_printf_common+0xc8>
 8009592:	2000      	movs	r0, #0
 8009594:	e008      	b.n	80095a8 <_printf_common+0xa8>
 8009596:	2301      	movs	r3, #1
 8009598:	4652      	mov	r2, sl
 800959a:	4641      	mov	r1, r8
 800959c:	4638      	mov	r0, r7
 800959e:	47c8      	blx	r9
 80095a0:	3001      	adds	r0, #1
 80095a2:	d103      	bne.n	80095ac <_printf_common+0xac>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ac:	3501      	adds	r5, #1
 80095ae:	e7c6      	b.n	800953e <_printf_common+0x3e>
 80095b0:	18e1      	adds	r1, r4, r3
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	2030      	movs	r0, #48	@ 0x30
 80095b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ba:	4422      	add	r2, r4
 80095bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095c4:	3302      	adds	r3, #2
 80095c6:	e7c7      	b.n	8009558 <_printf_common+0x58>
 80095c8:	2301      	movs	r3, #1
 80095ca:	4622      	mov	r2, r4
 80095cc:	4641      	mov	r1, r8
 80095ce:	4638      	mov	r0, r7
 80095d0:	47c8      	blx	r9
 80095d2:	3001      	adds	r0, #1
 80095d4:	d0e6      	beq.n	80095a4 <_printf_common+0xa4>
 80095d6:	3601      	adds	r6, #1
 80095d8:	e7d9      	b.n	800958e <_printf_common+0x8e>
	...

080095dc <_printf_i>:
 80095dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	7e0f      	ldrb	r7, [r1, #24]
 80095e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095e4:	2f78      	cmp	r7, #120	@ 0x78
 80095e6:	4691      	mov	r9, r2
 80095e8:	4680      	mov	r8, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	469a      	mov	sl, r3
 80095ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095f2:	d807      	bhi.n	8009604 <_printf_i+0x28>
 80095f4:	2f62      	cmp	r7, #98	@ 0x62
 80095f6:	d80a      	bhi.n	800960e <_printf_i+0x32>
 80095f8:	2f00      	cmp	r7, #0
 80095fa:	f000 80d1 	beq.w	80097a0 <_printf_i+0x1c4>
 80095fe:	2f58      	cmp	r7, #88	@ 0x58
 8009600:	f000 80b8 	beq.w	8009774 <_printf_i+0x198>
 8009604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800960c:	e03a      	b.n	8009684 <_printf_i+0xa8>
 800960e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009612:	2b15      	cmp	r3, #21
 8009614:	d8f6      	bhi.n	8009604 <_printf_i+0x28>
 8009616:	a101      	add	r1, pc, #4	@ (adr r1, 800961c <_printf_i+0x40>)
 8009618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800961c:	08009675 	.word	0x08009675
 8009620:	08009689 	.word	0x08009689
 8009624:	08009605 	.word	0x08009605
 8009628:	08009605 	.word	0x08009605
 800962c:	08009605 	.word	0x08009605
 8009630:	08009605 	.word	0x08009605
 8009634:	08009689 	.word	0x08009689
 8009638:	08009605 	.word	0x08009605
 800963c:	08009605 	.word	0x08009605
 8009640:	08009605 	.word	0x08009605
 8009644:	08009605 	.word	0x08009605
 8009648:	08009787 	.word	0x08009787
 800964c:	080096b3 	.word	0x080096b3
 8009650:	08009741 	.word	0x08009741
 8009654:	08009605 	.word	0x08009605
 8009658:	08009605 	.word	0x08009605
 800965c:	080097a9 	.word	0x080097a9
 8009660:	08009605 	.word	0x08009605
 8009664:	080096b3 	.word	0x080096b3
 8009668:	08009605 	.word	0x08009605
 800966c:	08009605 	.word	0x08009605
 8009670:	08009749 	.word	0x08009749
 8009674:	6833      	ldr	r3, [r6, #0]
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6032      	str	r2, [r6, #0]
 800967c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009684:	2301      	movs	r3, #1
 8009686:	e09c      	b.n	80097c2 <_printf_i+0x1e6>
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	1d19      	adds	r1, r3, #4
 800968e:	6031      	str	r1, [r6, #0]
 8009690:	0606      	lsls	r6, r0, #24
 8009692:	d501      	bpl.n	8009698 <_printf_i+0xbc>
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	e003      	b.n	80096a0 <_printf_i+0xc4>
 8009698:	0645      	lsls	r5, r0, #25
 800969a:	d5fb      	bpl.n	8009694 <_printf_i+0xb8>
 800969c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	da03      	bge.n	80096ac <_printf_i+0xd0>
 80096a4:	232d      	movs	r3, #45	@ 0x2d
 80096a6:	426d      	negs	r5, r5
 80096a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ac:	4858      	ldr	r0, [pc, #352]	@ (8009810 <_printf_i+0x234>)
 80096ae:	230a      	movs	r3, #10
 80096b0:	e011      	b.n	80096d6 <_printf_i+0xfa>
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	6833      	ldr	r3, [r6, #0]
 80096b6:	0608      	lsls	r0, r1, #24
 80096b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096bc:	d402      	bmi.n	80096c4 <_printf_i+0xe8>
 80096be:	0649      	lsls	r1, r1, #25
 80096c0:	bf48      	it	mi
 80096c2:	b2ad      	uxthmi	r5, r5
 80096c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096c6:	4852      	ldr	r0, [pc, #328]	@ (8009810 <_printf_i+0x234>)
 80096c8:	6033      	str	r3, [r6, #0]
 80096ca:	bf14      	ite	ne
 80096cc:	230a      	movne	r3, #10
 80096ce:	2308      	moveq	r3, #8
 80096d0:	2100      	movs	r1, #0
 80096d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096d6:	6866      	ldr	r6, [r4, #4]
 80096d8:	60a6      	str	r6, [r4, #8]
 80096da:	2e00      	cmp	r6, #0
 80096dc:	db05      	blt.n	80096ea <_printf_i+0x10e>
 80096de:	6821      	ldr	r1, [r4, #0]
 80096e0:	432e      	orrs	r6, r5
 80096e2:	f021 0104 	bic.w	r1, r1, #4
 80096e6:	6021      	str	r1, [r4, #0]
 80096e8:	d04b      	beq.n	8009782 <_printf_i+0x1a6>
 80096ea:	4616      	mov	r6, r2
 80096ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80096f0:	fb03 5711 	mls	r7, r3, r1, r5
 80096f4:	5dc7      	ldrb	r7, [r0, r7]
 80096f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096fa:	462f      	mov	r7, r5
 80096fc:	42bb      	cmp	r3, r7
 80096fe:	460d      	mov	r5, r1
 8009700:	d9f4      	bls.n	80096ec <_printf_i+0x110>
 8009702:	2b08      	cmp	r3, #8
 8009704:	d10b      	bne.n	800971e <_printf_i+0x142>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	07df      	lsls	r7, r3, #31
 800970a:	d508      	bpl.n	800971e <_printf_i+0x142>
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	6861      	ldr	r1, [r4, #4]
 8009710:	4299      	cmp	r1, r3
 8009712:	bfde      	ittt	le
 8009714:	2330      	movle	r3, #48	@ 0x30
 8009716:	f806 3c01 	strble.w	r3, [r6, #-1]
 800971a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800971e:	1b92      	subs	r2, r2, r6
 8009720:	6122      	str	r2, [r4, #16]
 8009722:	f8cd a000 	str.w	sl, [sp]
 8009726:	464b      	mov	r3, r9
 8009728:	aa03      	add	r2, sp, #12
 800972a:	4621      	mov	r1, r4
 800972c:	4640      	mov	r0, r8
 800972e:	f7ff fee7 	bl	8009500 <_printf_common>
 8009732:	3001      	adds	r0, #1
 8009734:	d14a      	bne.n	80097cc <_printf_i+0x1f0>
 8009736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800973a:	b004      	add	sp, #16
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	f043 0320 	orr.w	r3, r3, #32
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	4832      	ldr	r0, [pc, #200]	@ (8009814 <_printf_i+0x238>)
 800974a:	2778      	movs	r7, #120	@ 0x78
 800974c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	6831      	ldr	r1, [r6, #0]
 8009754:	061f      	lsls	r7, r3, #24
 8009756:	f851 5b04 	ldr.w	r5, [r1], #4
 800975a:	d402      	bmi.n	8009762 <_printf_i+0x186>
 800975c:	065f      	lsls	r7, r3, #25
 800975e:	bf48      	it	mi
 8009760:	b2ad      	uxthmi	r5, r5
 8009762:	6031      	str	r1, [r6, #0]
 8009764:	07d9      	lsls	r1, r3, #31
 8009766:	bf44      	itt	mi
 8009768:	f043 0320 	orrmi.w	r3, r3, #32
 800976c:	6023      	strmi	r3, [r4, #0]
 800976e:	b11d      	cbz	r5, 8009778 <_printf_i+0x19c>
 8009770:	2310      	movs	r3, #16
 8009772:	e7ad      	b.n	80096d0 <_printf_i+0xf4>
 8009774:	4826      	ldr	r0, [pc, #152]	@ (8009810 <_printf_i+0x234>)
 8009776:	e7e9      	b.n	800974c <_printf_i+0x170>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	f023 0320 	bic.w	r3, r3, #32
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	e7f6      	b.n	8009770 <_printf_i+0x194>
 8009782:	4616      	mov	r6, r2
 8009784:	e7bd      	b.n	8009702 <_printf_i+0x126>
 8009786:	6833      	ldr	r3, [r6, #0]
 8009788:	6825      	ldr	r5, [r4, #0]
 800978a:	6961      	ldr	r1, [r4, #20]
 800978c:	1d18      	adds	r0, r3, #4
 800978e:	6030      	str	r0, [r6, #0]
 8009790:	062e      	lsls	r6, r5, #24
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	d501      	bpl.n	800979a <_printf_i+0x1be>
 8009796:	6019      	str	r1, [r3, #0]
 8009798:	e002      	b.n	80097a0 <_printf_i+0x1c4>
 800979a:	0668      	lsls	r0, r5, #25
 800979c:	d5fb      	bpl.n	8009796 <_printf_i+0x1ba>
 800979e:	8019      	strh	r1, [r3, #0]
 80097a0:	2300      	movs	r3, #0
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	4616      	mov	r6, r2
 80097a6:	e7bc      	b.n	8009722 <_printf_i+0x146>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	6032      	str	r2, [r6, #0]
 80097ae:	681e      	ldr	r6, [r3, #0]
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	2100      	movs	r1, #0
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7f6 fd23 	bl	8000200 <memchr>
 80097ba:	b108      	cbz	r0, 80097c0 <_printf_i+0x1e4>
 80097bc:	1b80      	subs	r0, r0, r6
 80097be:	6060      	str	r0, [r4, #4]
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	2300      	movs	r3, #0
 80097c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ca:	e7aa      	b.n	8009722 <_printf_i+0x146>
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	4632      	mov	r2, r6
 80097d0:	4649      	mov	r1, r9
 80097d2:	4640      	mov	r0, r8
 80097d4:	47d0      	blx	sl
 80097d6:	3001      	adds	r0, #1
 80097d8:	d0ad      	beq.n	8009736 <_printf_i+0x15a>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	079b      	lsls	r3, r3, #30
 80097de:	d413      	bmi.n	8009808 <_printf_i+0x22c>
 80097e0:	68e0      	ldr	r0, [r4, #12]
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	4298      	cmp	r0, r3
 80097e6:	bfb8      	it	lt
 80097e8:	4618      	movlt	r0, r3
 80097ea:	e7a6      	b.n	800973a <_printf_i+0x15e>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4632      	mov	r2, r6
 80097f0:	4649      	mov	r1, r9
 80097f2:	4640      	mov	r0, r8
 80097f4:	47d0      	blx	sl
 80097f6:	3001      	adds	r0, #1
 80097f8:	d09d      	beq.n	8009736 <_printf_i+0x15a>
 80097fa:	3501      	adds	r5, #1
 80097fc:	68e3      	ldr	r3, [r4, #12]
 80097fe:	9903      	ldr	r1, [sp, #12]
 8009800:	1a5b      	subs	r3, r3, r1
 8009802:	42ab      	cmp	r3, r5
 8009804:	dcf2      	bgt.n	80097ec <_printf_i+0x210>
 8009806:	e7eb      	b.n	80097e0 <_printf_i+0x204>
 8009808:	2500      	movs	r5, #0
 800980a:	f104 0619 	add.w	r6, r4, #25
 800980e:	e7f5      	b.n	80097fc <_printf_i+0x220>
 8009810:	08009d7c 	.word	0x08009d7c
 8009814:	08009d8d 	.word	0x08009d8d

08009818 <__swbuf_r>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	460e      	mov	r6, r1
 800981c:	4614      	mov	r4, r2
 800981e:	4605      	mov	r5, r0
 8009820:	b118      	cbz	r0, 800982a <__swbuf_r+0x12>
 8009822:	6a03      	ldr	r3, [r0, #32]
 8009824:	b90b      	cbnz	r3, 800982a <__swbuf_r+0x12>
 8009826:	f7fd fbe5 	bl	8006ff4 <__sinit>
 800982a:	69a3      	ldr	r3, [r4, #24]
 800982c:	60a3      	str	r3, [r4, #8]
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	071a      	lsls	r2, r3, #28
 8009832:	d501      	bpl.n	8009838 <__swbuf_r+0x20>
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	b943      	cbnz	r3, 800984a <__swbuf_r+0x32>
 8009838:	4621      	mov	r1, r4
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f82a 	bl	8009894 <__swsetup_r>
 8009840:	b118      	cbz	r0, 800984a <__swbuf_r+0x32>
 8009842:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009846:	4638      	mov	r0, r7
 8009848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	1a98      	subs	r0, r3, r2
 8009850:	6963      	ldr	r3, [r4, #20]
 8009852:	b2f6      	uxtb	r6, r6
 8009854:	4283      	cmp	r3, r0
 8009856:	4637      	mov	r7, r6
 8009858:	dc05      	bgt.n	8009866 <__swbuf_r+0x4e>
 800985a:	4621      	mov	r1, r4
 800985c:	4628      	mov	r0, r5
 800985e:	f7fe feed 	bl	800863c <_fflush_r>
 8009862:	2800      	cmp	r0, #0
 8009864:	d1ed      	bne.n	8009842 <__swbuf_r+0x2a>
 8009866:	68a3      	ldr	r3, [r4, #8]
 8009868:	3b01      	subs	r3, #1
 800986a:	60a3      	str	r3, [r4, #8]
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	6022      	str	r2, [r4, #0]
 8009872:	701e      	strb	r6, [r3, #0]
 8009874:	6962      	ldr	r2, [r4, #20]
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	429a      	cmp	r2, r3
 800987a:	d004      	beq.n	8009886 <__swbuf_r+0x6e>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	07db      	lsls	r3, r3, #31
 8009880:	d5e1      	bpl.n	8009846 <__swbuf_r+0x2e>
 8009882:	2e0a      	cmp	r6, #10
 8009884:	d1df      	bne.n	8009846 <__swbuf_r+0x2e>
 8009886:	4621      	mov	r1, r4
 8009888:	4628      	mov	r0, r5
 800988a:	f7fe fed7 	bl	800863c <_fflush_r>
 800988e:	2800      	cmp	r0, #0
 8009890:	d0d9      	beq.n	8009846 <__swbuf_r+0x2e>
 8009892:	e7d6      	b.n	8009842 <__swbuf_r+0x2a>

08009894 <__swsetup_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4b29      	ldr	r3, [pc, #164]	@ (800993c <__swsetup_r+0xa8>)
 8009898:	4605      	mov	r5, r0
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	460c      	mov	r4, r1
 800989e:	b118      	cbz	r0, 80098a8 <__swsetup_r+0x14>
 80098a0:	6a03      	ldr	r3, [r0, #32]
 80098a2:	b90b      	cbnz	r3, 80098a8 <__swsetup_r+0x14>
 80098a4:	f7fd fba6 	bl	8006ff4 <__sinit>
 80098a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ac:	0719      	lsls	r1, r3, #28
 80098ae:	d422      	bmi.n	80098f6 <__swsetup_r+0x62>
 80098b0:	06da      	lsls	r2, r3, #27
 80098b2:	d407      	bmi.n	80098c4 <__swsetup_r+0x30>
 80098b4:	2209      	movs	r2, #9
 80098b6:	602a      	str	r2, [r5, #0]
 80098b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098c2:	e033      	b.n	800992c <__swsetup_r+0x98>
 80098c4:	0758      	lsls	r0, r3, #29
 80098c6:	d512      	bpl.n	80098ee <__swsetup_r+0x5a>
 80098c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ca:	b141      	cbz	r1, 80098de <__swsetup_r+0x4a>
 80098cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098d0:	4299      	cmp	r1, r3
 80098d2:	d002      	beq.n	80098da <__swsetup_r+0x46>
 80098d4:	4628      	mov	r0, r5
 80098d6:	f7ff fc67 	bl	80091a8 <_free_r>
 80098da:	2300      	movs	r3, #0
 80098dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	2300      	movs	r3, #0
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	f043 0308 	orr.w	r3, r3, #8
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	b94b      	cbnz	r3, 800990e <__swsetup_r+0x7a>
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009904:	d003      	beq.n	800990e <__swsetup_r+0x7a>
 8009906:	4621      	mov	r1, r4
 8009908:	4628      	mov	r0, r5
 800990a:	f000 f83f 	bl	800998c <__smakebuf_r>
 800990e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009912:	f013 0201 	ands.w	r2, r3, #1
 8009916:	d00a      	beq.n	800992e <__swsetup_r+0x9a>
 8009918:	2200      	movs	r2, #0
 800991a:	60a2      	str	r2, [r4, #8]
 800991c:	6962      	ldr	r2, [r4, #20]
 800991e:	4252      	negs	r2, r2
 8009920:	61a2      	str	r2, [r4, #24]
 8009922:	6922      	ldr	r2, [r4, #16]
 8009924:	b942      	cbnz	r2, 8009938 <__swsetup_r+0xa4>
 8009926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800992a:	d1c5      	bne.n	80098b8 <__swsetup_r+0x24>
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	0799      	lsls	r1, r3, #30
 8009930:	bf58      	it	pl
 8009932:	6962      	ldrpl	r2, [r4, #20]
 8009934:	60a2      	str	r2, [r4, #8]
 8009936:	e7f4      	b.n	8009922 <__swsetup_r+0x8e>
 8009938:	2000      	movs	r0, #0
 800993a:	e7f7      	b.n	800992c <__swsetup_r+0x98>
 800993c:	2000026c 	.word	0x2000026c

08009940 <__swhatbuf_r>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	460c      	mov	r4, r1
 8009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009948:	2900      	cmp	r1, #0
 800994a:	b096      	sub	sp, #88	@ 0x58
 800994c:	4615      	mov	r5, r2
 800994e:	461e      	mov	r6, r3
 8009950:	da0d      	bge.n	800996e <__swhatbuf_r+0x2e>
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009958:	f04f 0100 	mov.w	r1, #0
 800995c:	bf14      	ite	ne
 800995e:	2340      	movne	r3, #64	@ 0x40
 8009960:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009964:	2000      	movs	r0, #0
 8009966:	6031      	str	r1, [r6, #0]
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	b016      	add	sp, #88	@ 0x58
 800996c:	bd70      	pop	{r4, r5, r6, pc}
 800996e:	466a      	mov	r2, sp
 8009970:	f000 f89c 	bl	8009aac <_fstat_r>
 8009974:	2800      	cmp	r0, #0
 8009976:	dbec      	blt.n	8009952 <__swhatbuf_r+0x12>
 8009978:	9901      	ldr	r1, [sp, #4]
 800997a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800997e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009982:	4259      	negs	r1, r3
 8009984:	4159      	adcs	r1, r3
 8009986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800998a:	e7eb      	b.n	8009964 <__swhatbuf_r+0x24>

0800998c <__smakebuf_r>:
 800998c:	898b      	ldrh	r3, [r1, #12]
 800998e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009990:	079d      	lsls	r5, r3, #30
 8009992:	4606      	mov	r6, r0
 8009994:	460c      	mov	r4, r1
 8009996:	d507      	bpl.n	80099a8 <__smakebuf_r+0x1c>
 8009998:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	6123      	str	r3, [r4, #16]
 80099a0:	2301      	movs	r3, #1
 80099a2:	6163      	str	r3, [r4, #20]
 80099a4:	b003      	add	sp, #12
 80099a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a8:	ab01      	add	r3, sp, #4
 80099aa:	466a      	mov	r2, sp
 80099ac:	f7ff ffc8 	bl	8009940 <__swhatbuf_r>
 80099b0:	9f00      	ldr	r7, [sp, #0]
 80099b2:	4605      	mov	r5, r0
 80099b4:	4639      	mov	r1, r7
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7fe fd2a 	bl	8008410 <_malloc_r>
 80099bc:	b948      	cbnz	r0, 80099d2 <__smakebuf_r+0x46>
 80099be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c2:	059a      	lsls	r2, r3, #22
 80099c4:	d4ee      	bmi.n	80099a4 <__smakebuf_r+0x18>
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	f043 0302 	orr.w	r3, r3, #2
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	e7e2      	b.n	8009998 <__smakebuf_r+0xc>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	6020      	str	r0, [r4, #0]
 80099d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099e2:	b15b      	cbz	r3, 80099fc <__smakebuf_r+0x70>
 80099e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e8:	4630      	mov	r0, r6
 80099ea:	f000 f83b 	bl	8009a64 <_isatty_r>
 80099ee:	b128      	cbz	r0, 80099fc <__smakebuf_r+0x70>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f023 0303 	bic.w	r3, r3, #3
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	431d      	orrs	r5, r3
 8009a00:	81a5      	strh	r5, [r4, #12]
 8009a02:	e7cf      	b.n	80099a4 <__smakebuf_r+0x18>

08009a04 <_raise_r>:
 8009a04:	291f      	cmp	r1, #31
 8009a06:	b538      	push	{r3, r4, r5, lr}
 8009a08:	4605      	mov	r5, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	d904      	bls.n	8009a18 <_raise_r+0x14>
 8009a0e:	2316      	movs	r3, #22
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a1a:	b112      	cbz	r2, 8009a22 <_raise_r+0x1e>
 8009a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a20:	b94b      	cbnz	r3, 8009a36 <_raise_r+0x32>
 8009a22:	4628      	mov	r0, r5
 8009a24:	f000 f840 	bl	8009aa8 <_getpid_r>
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a32:	f000 b827 	b.w	8009a84 <_kill_r>
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d00a      	beq.n	8009a50 <_raise_r+0x4c>
 8009a3a:	1c59      	adds	r1, r3, #1
 8009a3c:	d103      	bne.n	8009a46 <_raise_r+0x42>
 8009a3e:	2316      	movs	r3, #22
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7e7      	b.n	8009a16 <_raise_r+0x12>
 8009a46:	2100      	movs	r1, #0
 8009a48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4798      	blx	r3
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7e0      	b.n	8009a16 <_raise_r+0x12>

08009a54 <raise>:
 8009a54:	4b02      	ldr	r3, [pc, #8]	@ (8009a60 <raise+0xc>)
 8009a56:	4601      	mov	r1, r0
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	f7ff bfd3 	b.w	8009a04 <_raise_r>
 8009a5e:	bf00      	nop
 8009a60:	2000026c 	.word	0x2000026c

08009a64 <_isatty_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d06      	ldr	r5, [pc, #24]	@ (8009a80 <_isatty_r+0x1c>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	f7f8 fe60 	bl	8002734 <_isatty>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_isatty_r+0x1a>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_isatty_r+0x1a>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	2000075c 	.word	0x2000075c

08009a84 <_kill_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	@ (8009aa4 <_kill_r+0x20>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	4611      	mov	r1, r2
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	f7f8 fddf 	bl	8002654 <_kill>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d102      	bne.n	8009aa0 <_kill_r+0x1c>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	b103      	cbz	r3, 8009aa0 <_kill_r+0x1c>
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	bd38      	pop	{r3, r4, r5, pc}
 8009aa2:	bf00      	nop
 8009aa4:	2000075c 	.word	0x2000075c

08009aa8 <_getpid_r>:
 8009aa8:	f7f8 bdcc 	b.w	8002644 <_getpid>

08009aac <_fstat_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	@ (8009acc <_fstat_r+0x20>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	f7f8 fe2b 	bl	8002714 <_fstat>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d102      	bne.n	8009ac8 <_fstat_r+0x1c>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	b103      	cbz	r3, 8009ac8 <_fstat_r+0x1c>
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	bd38      	pop	{r3, r4, r5, pc}
 8009aca:	bf00      	nop
 8009acc:	2000075c 	.word	0x2000075c

08009ad0 <floor>:
 8009ad0:	ec51 0b10 	vmov	r0, r1, d0
 8009ad4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009adc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009ae0:	2e13      	cmp	r6, #19
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	dc34      	bgt.n	8009b54 <floor+0x84>
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	da17      	bge.n	8009b1e <floor+0x4e>
 8009aee:	a332      	add	r3, pc, #200	@ (adr r3, 8009bb8 <floor+0xe8>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fbda 	bl	80002ac <__adddf3>
 8009af8:	2200      	movs	r2, #0
 8009afa:	2300      	movs	r3, #0
 8009afc:	f7f7 f81c 	bl	8000b38 <__aeabi_dcmpgt>
 8009b00:	b150      	cbz	r0, 8009b18 <floor+0x48>
 8009b02:	2c00      	cmp	r4, #0
 8009b04:	da55      	bge.n	8009bb2 <floor+0xe2>
 8009b06:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009b0a:	432c      	orrs	r4, r5
 8009b0c:	2500      	movs	r5, #0
 8009b0e:	42ac      	cmp	r4, r5
 8009b10:	4c2b      	ldr	r4, [pc, #172]	@ (8009bc0 <floor+0xf0>)
 8009b12:	bf08      	it	eq
 8009b14:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	e023      	b.n	8009b66 <floor+0x96>
 8009b1e:	4f29      	ldr	r7, [pc, #164]	@ (8009bc4 <floor+0xf4>)
 8009b20:	4137      	asrs	r7, r6
 8009b22:	ea01 0307 	and.w	r3, r1, r7
 8009b26:	4303      	orrs	r3, r0
 8009b28:	d01d      	beq.n	8009b66 <floor+0x96>
 8009b2a:	a323      	add	r3, pc, #140	@ (adr r3, 8009bb8 <floor+0xe8>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fbbc 	bl	80002ac <__adddf3>
 8009b34:	2200      	movs	r2, #0
 8009b36:	2300      	movs	r3, #0
 8009b38:	f7f6 fffe 	bl	8000b38 <__aeabi_dcmpgt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d0eb      	beq.n	8009b18 <floor+0x48>
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	bfbe      	ittt	lt
 8009b44:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009b48:	4133      	asrlt	r3, r6
 8009b4a:	18e4      	addlt	r4, r4, r3
 8009b4c:	ea24 0407 	bic.w	r4, r4, r7
 8009b50:	2500      	movs	r5, #0
 8009b52:	e7e1      	b.n	8009b18 <floor+0x48>
 8009b54:	2e33      	cmp	r6, #51	@ 0x33
 8009b56:	dd0a      	ble.n	8009b6e <floor+0x9e>
 8009b58:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009b5c:	d103      	bne.n	8009b66 <floor+0x96>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	f7f6 fba3 	bl	80002ac <__adddf3>
 8009b66:	ec41 0b10 	vmov	d0, r0, r1
 8009b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b6e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009b72:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009b76:	40df      	lsrs	r7, r3
 8009b78:	4207      	tst	r7, r0
 8009b7a:	d0f4      	beq.n	8009b66 <floor+0x96>
 8009b7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009bb8 <floor+0xe8>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f7f6 fb93 	bl	80002ac <__adddf3>
 8009b86:	2200      	movs	r2, #0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f7f6 ffd5 	bl	8000b38 <__aeabi_dcmpgt>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d0c2      	beq.n	8009b18 <floor+0x48>
 8009b92:	2c00      	cmp	r4, #0
 8009b94:	da0a      	bge.n	8009bac <floor+0xdc>
 8009b96:	2e14      	cmp	r6, #20
 8009b98:	d101      	bne.n	8009b9e <floor+0xce>
 8009b9a:	3401      	adds	r4, #1
 8009b9c:	e006      	b.n	8009bac <floor+0xdc>
 8009b9e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	40b3      	lsls	r3, r6
 8009ba6:	441d      	add	r5, r3
 8009ba8:	4545      	cmp	r5, r8
 8009baa:	d3f6      	bcc.n	8009b9a <floor+0xca>
 8009bac:	ea25 0507 	bic.w	r5, r5, r7
 8009bb0:	e7b2      	b.n	8009b18 <floor+0x48>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	462c      	mov	r4, r5
 8009bb6:	e7af      	b.n	8009b18 <floor+0x48>
 8009bb8:	8800759c 	.word	0x8800759c
 8009bbc:	7e37e43c 	.word	0x7e37e43c
 8009bc0:	bff00000 	.word	0xbff00000
 8009bc4:	000fffff 	.word	0x000fffff

08009bc8 <_init>:
 8009bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bca:	bf00      	nop
 8009bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bce:	bc08      	pop	{r3}
 8009bd0:	469e      	mov	lr, r3
 8009bd2:	4770      	bx	lr

08009bd4 <_fini>:
 8009bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd6:	bf00      	nop
 8009bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bda:	bc08      	pop	{r3}
 8009bdc:	469e      	mov	lr, r3
 8009bde:	4770      	bx	lr
